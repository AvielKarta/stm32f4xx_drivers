
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001108  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c0  080012c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012c0  080012c0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c0  080012c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080012cc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080012cc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019b0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004ad  00000000  00000000  000219e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00021e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00021fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e9a  00000000  00000000  000220d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011a5  00000000  00000000  00023f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008b35  00000000  00000000  0002510f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002dc44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a0  00000000  00000000  0002dcc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001298 	.word	0x08001298

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08001298 	.word	0x08001298

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_drsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001fc:	e002      	b.n	8000204 <__adddf3>
 80001fe:	bf00      	nop

08000200 <__aeabi_dsub>:
 8000200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000204 <__adddf3>:
 8000204:	b530      	push	{r4, r5, lr}
 8000206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	bf1f      	itttt	ne
 800021a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022a:	f000 80e2 	beq.w	80003f2 <__adddf3+0x1ee>
 800022e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000236:	bfb8      	it	lt
 8000238:	426d      	neglt	r5, r5
 800023a:	dd0c      	ble.n	8000256 <__adddf3+0x52>
 800023c:	442c      	add	r4, r5
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	ea82 0000 	eor.w	r0, r2, r0
 800024a:	ea83 0101 	eor.w	r1, r3, r1
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	2d36      	cmp	r5, #54	; 0x36
 8000258:	bf88      	it	hi
 800025a:	bd30      	pophi	{r4, r5, pc}
 800025c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x70>
 800026e:	4240      	negs	r0, r0
 8000270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800027c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000280:	d002      	beq.n	8000288 <__adddf3+0x84>
 8000282:	4252      	negs	r2, r2
 8000284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000288:	ea94 0f05 	teq	r4, r5
 800028c:	f000 80a7 	beq.w	80003de <__adddf3+0x1da>
 8000290:	f1a4 0401 	sub.w	r4, r4, #1
 8000294:	f1d5 0e20 	rsbs	lr, r5, #32
 8000298:	db0d      	blt.n	80002b6 <__adddf3+0xb2>
 800029a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029e:	fa22 f205 	lsr.w	r2, r2, r5
 80002a2:	1880      	adds	r0, r0, r2
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ac:	1880      	adds	r0, r0, r2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	4159      	adcs	r1, r3
 80002b4:	e00e      	b.n	80002d4 <__adddf3+0xd0>
 80002b6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ba:	f10e 0e20 	add.w	lr, lr, #32
 80002be:	2a01      	cmp	r2, #1
 80002c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c4:	bf28      	it	cs
 80002c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	18c0      	adds	r0, r0, r3
 80002d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d8:	d507      	bpl.n	80002ea <__adddf3+0xe6>
 80002da:	f04f 0e00 	mov.w	lr, #0
 80002de:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ee:	d31b      	bcc.n	8000328 <__adddf3+0x124>
 80002f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f4:	d30c      	bcc.n	8000310 <__adddf3+0x10c>
 80002f6:	0849      	lsrs	r1, r1, #1
 80002f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000300:	f104 0401 	add.w	r4, r4, #1
 8000304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800030c:	f080 809a 	bcs.w	8000444 <__adddf3+0x240>
 8000310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	ea41 0105 	orr.w	r1, r1, r5
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800032c:	4140      	adcs	r0, r0
 800032e:	eb41 0101 	adc.w	r1, r1, r1
 8000332:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000336:	f1a4 0401 	sub.w	r4, r4, #1
 800033a:	d1e9      	bne.n	8000310 <__adddf3+0x10c>
 800033c:	f091 0f00 	teq	r1, #0
 8000340:	bf04      	itt	eq
 8000342:	4601      	moveq	r1, r0
 8000344:	2000      	moveq	r0, #0
 8000346:	fab1 f381 	clz	r3, r1
 800034a:	bf08      	it	eq
 800034c:	3320      	addeq	r3, #32
 800034e:	f1a3 030b 	sub.w	r3, r3, #11
 8000352:	f1b3 0220 	subs.w	r2, r3, #32
 8000356:	da0c      	bge.n	8000372 <__adddf3+0x16e>
 8000358:	320c      	adds	r2, #12
 800035a:	dd08      	ble.n	800036e <__adddf3+0x16a>
 800035c:	f102 0c14 	add.w	ip, r2, #20
 8000360:	f1c2 020c 	rsb	r2, r2, #12
 8000364:	fa01 f00c 	lsl.w	r0, r1, ip
 8000368:	fa21 f102 	lsr.w	r1, r1, r2
 800036c:	e00c      	b.n	8000388 <__adddf3+0x184>
 800036e:	f102 0214 	add.w	r2, r2, #20
 8000372:	bfd8      	it	le
 8000374:	f1c2 0c20 	rsble	ip, r2, #32
 8000378:	fa01 f102 	lsl.w	r1, r1, r2
 800037c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000380:	bfdc      	itt	le
 8000382:	ea41 010c 	orrle.w	r1, r1, ip
 8000386:	4090      	lslle	r0, r2
 8000388:	1ae4      	subs	r4, r4, r3
 800038a:	bfa2      	ittt	ge
 800038c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000390:	4329      	orrge	r1, r5
 8000392:	bd30      	popge	{r4, r5, pc}
 8000394:	ea6f 0404 	mvn.w	r4, r4
 8000398:	3c1f      	subs	r4, #31
 800039a:	da1c      	bge.n	80003d6 <__adddf3+0x1d2>
 800039c:	340c      	adds	r4, #12
 800039e:	dc0e      	bgt.n	80003be <__adddf3+0x1ba>
 80003a0:	f104 0414 	add.w	r4, r4, #20
 80003a4:	f1c4 0220 	rsb	r2, r4, #32
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f302 	lsl.w	r3, r1, r2
 80003b0:	ea40 0003 	orr.w	r0, r0, r3
 80003b4:	fa21 f304 	lsr.w	r3, r1, r4
 80003b8:	ea45 0103 	orr.w	r1, r5, r3
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f1c4 040c 	rsb	r4, r4, #12
 80003c2:	f1c4 0220 	rsb	r2, r4, #32
 80003c6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ca:	fa01 f304 	lsl.w	r3, r1, r4
 80003ce:	ea40 0003 	orr.w	r0, r0, r3
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	fa21 f004 	lsr.w	r0, r1, r4
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f094 0f00 	teq	r4, #0
 80003e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e6:	bf06      	itte	eq
 80003e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003ec:	3401      	addeq	r4, #1
 80003ee:	3d01      	subne	r5, #1
 80003f0:	e74e      	b.n	8000290 <__adddf3+0x8c>
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf18      	it	ne
 80003f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fc:	d029      	beq.n	8000452 <__adddf3+0x24e>
 80003fe:	ea94 0f05 	teq	r4, r5
 8000402:	bf08      	it	eq
 8000404:	ea90 0f02 	teqeq	r0, r2
 8000408:	d005      	beq.n	8000416 <__adddf3+0x212>
 800040a:	ea54 0c00 	orrs.w	ip, r4, r0
 800040e:	bf04      	itt	eq
 8000410:	4619      	moveq	r1, r3
 8000412:	4610      	moveq	r0, r2
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	ea91 0f03 	teq	r1, r3
 800041a:	bf1e      	ittt	ne
 800041c:	2100      	movne	r1, #0
 800041e:	2000      	movne	r0, #0
 8000420:	bd30      	popne	{r4, r5, pc}
 8000422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000426:	d105      	bne.n	8000434 <__adddf3+0x230>
 8000428:	0040      	lsls	r0, r0, #1
 800042a:	4149      	adcs	r1, r1
 800042c:	bf28      	it	cs
 800042e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000438:	bf3c      	itt	cc
 800043a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043e:	bd30      	popcc	{r4, r5, pc}
 8000440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf1a      	itte	ne
 8000458:	4619      	movne	r1, r3
 800045a:	4610      	movne	r0, r2
 800045c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000460:	bf1c      	itt	ne
 8000462:	460b      	movne	r3, r1
 8000464:	4602      	movne	r2, r0
 8000466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046a:	bf06      	itte	eq
 800046c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000470:	ea91 0f03 	teqeq	r1, r3
 8000474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	bf00      	nop

0800047c <__aeabi_ui2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f04f 0500 	mov.w	r5, #0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e750      	b.n	800033c <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_i2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b4:	bf48      	it	mi
 80004b6:	4240      	negmi	r0, r0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e73e      	b.n	800033c <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_f2d>:
 80004c0:	0042      	lsls	r2, r0, #1
 80004c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ce:	bf1f      	itttt	ne
 80004d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004dc:	4770      	bxne	lr
 80004de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e2:	bf08      	it	eq
 80004e4:	4770      	bxeq	lr
 80004e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ea:	bf04      	itt	eq
 80004ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e71c      	b.n	800033c <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aed8 	beq.w	80002ea <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6bd      	b.n	80002ea <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__gedf2>:
 8000570:	f04f 3cff 	mov.w	ip, #4294967295
 8000574:	e006      	b.n	8000584 <__cmpdf2+0x4>
 8000576:	bf00      	nop

08000578 <__ledf2>:
 8000578:	f04f 0c01 	mov.w	ip, #1
 800057c:	e002      	b.n	8000584 <__cmpdf2+0x4>
 800057e:	bf00      	nop

08000580 <__cmpdf2>:
 8000580:	f04f 0c01 	mov.w	ip, #1
 8000584:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000588:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800058c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000594:	bf18      	it	ne
 8000596:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800059a:	d01b      	beq.n	80005d4 <__cmpdf2+0x54>
 800059c:	b001      	add	sp, #4
 800059e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005a2:	bf0c      	ite	eq
 80005a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005a8:	ea91 0f03 	teqne	r1, r3
 80005ac:	bf02      	ittt	eq
 80005ae:	ea90 0f02 	teqeq	r0, r2
 80005b2:	2000      	moveq	r0, #0
 80005b4:	4770      	bxeq	lr
 80005b6:	f110 0f00 	cmn.w	r0, #0
 80005ba:	ea91 0f03 	teq	r1, r3
 80005be:	bf58      	it	pl
 80005c0:	4299      	cmppl	r1, r3
 80005c2:	bf08      	it	eq
 80005c4:	4290      	cmpeq	r0, r2
 80005c6:	bf2c      	ite	cs
 80005c8:	17d8      	asrcs	r0, r3, #31
 80005ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ce:	f040 0001 	orr.w	r0, r0, #1
 80005d2:	4770      	bx	lr
 80005d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005dc:	d102      	bne.n	80005e4 <__cmpdf2+0x64>
 80005de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005e2:	d107      	bne.n	80005f4 <__cmpdf2+0x74>
 80005e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ec:	d1d6      	bne.n	800059c <__cmpdf2+0x1c>
 80005ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005f2:	d0d3      	beq.n	800059c <__cmpdf2+0x1c>
 80005f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <__aeabi_cdrcmple>:
 80005fc:	4684      	mov	ip, r0
 80005fe:	4610      	mov	r0, r2
 8000600:	4662      	mov	r2, ip
 8000602:	468c      	mov	ip, r1
 8000604:	4619      	mov	r1, r3
 8000606:	4663      	mov	r3, ip
 8000608:	e000      	b.n	800060c <__aeabi_cdcmpeq>
 800060a:	bf00      	nop

0800060c <__aeabi_cdcmpeq>:
 800060c:	b501      	push	{r0, lr}
 800060e:	f7ff ffb7 	bl	8000580 <__cmpdf2>
 8000612:	2800      	cmp	r0, #0
 8000614:	bf48      	it	mi
 8000616:	f110 0f00 	cmnmi.w	r0, #0
 800061a:	bd01      	pop	{r0, pc}

0800061c <__aeabi_dcmpeq>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff fff4 	bl	800060c <__aeabi_cdcmpeq>
 8000624:	bf0c      	ite	eq
 8000626:	2001      	moveq	r0, #1
 8000628:	2000      	movne	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmplt>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffea 	bl	800060c <__aeabi_cdcmpeq>
 8000638:	bf34      	ite	cc
 800063a:	2001      	movcc	r0, #1
 800063c:	2000      	movcs	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmple>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffe0 	bl	800060c <__aeabi_cdcmpeq>
 800064c:	bf94      	ite	ls
 800064e:	2001      	movls	r0, #1
 8000650:	2000      	movhi	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_dcmpge>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffce 	bl	80005fc <__aeabi_cdrcmple>
 8000660:	bf94      	ite	ls
 8000662:	2001      	movls	r0, #1
 8000664:	2000      	movhi	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_dcmpgt>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffc4 	bl	80005fc <__aeabi_cdrcmple>
 8000674:	bf34      	ite	cc
 8000676:	2001      	movcc	r0, #1
 8000678:	2000      	movcs	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <delay>:
#include <string.h>

static int timeout = 2.5*M;

void delay(int timeout)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < timeout ; i ++);
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e002      	b.n	8000694 <delay+0x14>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3f8      	bcc.n	800068e <delay+0xe>
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <gpio_driver_function>:

void gpio_driver_function(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af04      	add	r7, sp, #16
	GPIO_Handle_t green_led, orange_led, red_led, blue_led, irq_pin;

	gpio_configure_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 80006ae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80006b2:	2300      	movs	r3, #0
 80006b4:	9303      	str	r3, [sp, #12]
 80006b6:	2300      	movs	r3, #0
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	2300      	movs	r3, #0
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2300      	movs	r3, #0
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	220c      	movs	r2, #12
 80006c6:	4933      	ldr	r1, [pc, #204]	; (8000794 <gpio_driver_function+0xec>)
 80006c8:	f000 fbea 	bl	8000ea0 <gpio_configure_pin>
	gpio_configure_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 80006cc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006d0:	2300      	movs	r3, #0
 80006d2:	9303      	str	r3, [sp, #12]
 80006d4:	2300      	movs	r3, #0
 80006d6:	9302      	str	r3, [sp, #8]
 80006d8:	2300      	movs	r3, #0
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2300      	movs	r3, #0
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	220d      	movs	r2, #13
 80006e4:	492b      	ldr	r1, [pc, #172]	; (8000794 <gpio_driver_function+0xec>)
 80006e6:	f000 fbdb 	bl	8000ea0 <gpio_configure_pin>
	gpio_configure_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 80006ea:	f107 001c 	add.w	r0, r7, #28
 80006ee:	2300      	movs	r3, #0
 80006f0:	9303      	str	r3, [sp, #12]
 80006f2:	2300      	movs	r3, #0
 80006f4:	9302      	str	r3, [sp, #8]
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2300      	movs	r3, #0
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2301      	movs	r3, #1
 8000700:	220e      	movs	r2, #14
 8000702:	4924      	ldr	r1, [pc, #144]	; (8000794 <gpio_driver_function+0xec>)
 8000704:	f000 fbcc 	bl	8000ea0 <gpio_configure_pin>
	gpio_configure_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 8000708:	f107 0010 	add.w	r0, r7, #16
 800070c:	2300      	movs	r3, #0
 800070e:	9303      	str	r3, [sp, #12]
 8000710:	2300      	movs	r3, #0
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2300      	movs	r3, #0
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	2300      	movs	r3, #0
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	220f      	movs	r2, #15
 8000720:	491c      	ldr	r1, [pc, #112]	; (8000794 <gpio_driver_function+0xec>)
 8000722:	f000 fbbd 	bl	8000ea0 <gpio_configure_pin>
	gpio_configure_pin(&irq_pin, GPIOA, 0, GPIO_MODE_IRQ_RT, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);		/*Configures GPIOA_0 pin the work in interrupt mode*/
 8000726:	1d38      	adds	r0, r7, #4
 8000728:	2300      	movs	r3, #0
 800072a:	9303      	str	r3, [sp, #12]
 800072c:	2300      	movs	r3, #0
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2300      	movs	r3, #0
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2302      	movs	r3, #2
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2305      	movs	r3, #5
 800073a:	2200      	movs	r2, #0
 800073c:	4916      	ldr	r1, [pc, #88]	; (8000798 <gpio_driver_function+0xf0>)
 800073e:	f000 fbaf 	bl	8000ea0 <gpio_configure_pin>

	gpio_init(&green_led);
 8000742:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f9e6 	bl	8000b18 <gpio_init>
	gpio_init(&orange_led);
 800074c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f9e1 	bl	8000b18 <gpio_init>
	gpio_init(&red_led);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9dc 	bl	8000b18 <gpio_init>
	gpio_init(&blue_led);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f9d7 	bl	8000b18 <gpio_init>
	gpio_init(&irq_pin);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f9d3 	bl	8000b18 <gpio_init>

	/*Enable and configure interrupt line 0*/
	gpio_irq_set(EXTI0);
 8000772:	2006      	movs	r0, #6
 8000774:	f000 fbf6 	bl	8000f64 <gpio_irq_set>
	gpio_irq_priority(EXTI0, 15);
 8000778:	210f      	movs	r1, #15
 800077a:	2006      	movs	r0, #6
 800077c:	f000 fc36 	bl	8000fec <gpio_irq_priority>
	gpio_write_to_pin(GPIOD, 15, ENABLE);
 8000780:	2201      	movs	r2, #1
 8000782:	210f      	movs	r1, #15
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <gpio_driver_function+0xec>)
 8000786:	f000 fbb3 	bl	8000ef0 <gpio_write_to_pin>

}
 800078a:	bf00      	nop
 800078c:	3740      	adds	r7, #64	; 0x40
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020c00 	.word	0x40020c00
 8000798:	40020000 	.word	0x40020000

0800079c <spi_driver_function>:
void spi_driver_function(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b091      	sub	sp, #68	; 0x44
 80007a0:	af06      	add	r7, sp, #24
	char spi_data[] = "spi_test_string";
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <spi_driver_function+0xb4>)
 80007a4:	f107 0418 	add.w	r4, r7, #24
 80007a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	GPIO_Handle_t spi_pins;
	gpio_configure_pin(&spi_pins, GPIOB, 12, GPIO_MODE_ALTFN, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 5);/*Enables NSS*/
 80007ae:	f107 000c 	add.w	r0, r7, #12
 80007b2:	2305      	movs	r3, #5
 80007b4:	9303      	str	r3, [sp, #12]
 80007b6:	2300      	movs	r3, #0
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2300      	movs	r3, #0
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2300      	movs	r3, #0
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2302      	movs	r3, #2
 80007c4:	220c      	movs	r2, #12
 80007c6:	4923      	ldr	r1, [pc, #140]	; (8000854 <spi_driver_function+0xb8>)
 80007c8:	f000 fb6a 	bl	8000ea0 <gpio_configure_pin>
	spi_pins.GPIO_PinCfng.PinNumber = 13; /*Enables SCLK*/
 80007cc:	230d      	movs	r3, #13
 80007ce:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f99f 	bl	8000b18 <gpio_init>
	spi_pins.GPIO_PinCfng.PinNumber = 14;/*Enables MISO*/
 80007da:	230e      	movs	r3, #14
 80007dc:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f998 	bl	8000b18 <gpio_init>
	spi_pins.GPIO_PinCfng.PinNumber = 15;/*Enables MOSI*/
 80007e8:	230f      	movs	r3, #15
 80007ea:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f991 	bl	8000b18 <gpio_init>


	SPI_Handle_t spi2_handler;
	spi_configure_pin(&spi2_handler, SPI2, SPI_CLK_PHASE_0, SPI_CLK_IDLE_0, SPI_MASTER, SPI_BR_CLK_DIV_256, SPI_SSM_EN, SPI_DFF_16_BIT, SPI_FULL_DUPLEX);/*Configures parameters for SPI2*/
 80007f6:	4638      	mov	r0, r7
 80007f8:	2301      	movs	r3, #1
 80007fa:	9304      	str	r3, [sp, #16]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9303      	str	r3, [sp, #12]
 8000800:	2301      	movs	r3, #1
 8000802:	9302      	str	r3, [sp, #8]
 8000804:	2307      	movs	r3, #7
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	2301      	movs	r3, #1
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2300      	movs	r3, #0
 800080e:	2200      	movs	r2, #0
 8000810:	4911      	ldr	r1, [pc, #68]	; (8000858 <spi_driver_function+0xbc>)
 8000812:	f000 fc3b 	bl	800108c <spi_configure_pin>
	spi_init(&spi2_handler);
 8000816:	463b      	mov	r3, r7
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fc63 	bl	80010e4 <spi_init>
	spi_ssi_enable(SPI2, ENABLE);
 800081e:	2101      	movs	r1, #1
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <spi_driver_function+0xbc>)
 8000822:	f000 fcc6 	bl	80011b2 <spi_ssi_enable>
	spi_enable(SPI2, ENABLE);
 8000826:	2101      	movs	r1, #1
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <spi_driver_function+0xbc>)
 800082a:	f000 fca9 	bl	8001180 <spi_enable>

	spi_send(SPI2, (uint8_t*)spi_data, strlen(spi_data));
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcd8 	bl	80001e8 <strlen>
 8000838:	4602      	mov	r2, r0
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <spi_driver_function+0xbc>)
 8000842:	f000 fccf 	bl	80011e4 <spi_send>


}
 8000846:	bf00      	nop
 8000848:	372c      	adds	r7, #44	; 0x2c
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	bf00      	nop
 8000850:	080012b0 	.word	0x080012b0
 8000854:	40020400 	.word	0x40020400
 8000858:	40003800 	.word	0x40003800

0800085c <main>:

int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	int cnt = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]

	gpio_driver_function();
 8000866:	f7ff ff1f 	bl	80006a8 <gpio_driver_function>


	spi_driver_function();
 800086a:	f7ff ff97 	bl	800079c <spi_driver_function>



	while(1)
	{
		delay(timeout);
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <main+0x40>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff04 	bl	8000680 <delay>
		gpio_toggle_pin(GPIOD, 12+(cnt++)%4);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	425a      	negs	r2, r3
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	f002 0203 	and.w	r2, r2, #3
 8000888:	bf58      	it	pl
 800088a:	4253      	negpl	r3, r2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	330c      	adds	r3, #12
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <main+0x44>)
 8000896:	f000 fb50 	bl	8000f3a <gpio_toggle_pin>
		delay(timeout);
 800089a:	e7e8      	b.n	800086e <main+0x12>
 800089c:	20000000 	.word	0x20000000
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	00000000 	.word	0x00000000

080008a8 <EXTI0_IRQHandler>:

	return 0;
}

void EXTI0_IRQHandler(void)
	{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	if (timeout == 2.5*M)
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <EXTI0_IRQHandler+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fdf3 	bl	800049c <__aeabi_i2d>
 80008b6:	a30a      	add	r3, pc, #40	; (adr r3, 80008e0 <EXTI0_IRQHandler+0x38>)
 80008b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008bc:	f7ff feae 	bl	800061c <__aeabi_dcmpeq>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <EXTI0_IRQHandler+0x26>
		timeout = 100*K;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <EXTI0_IRQHandler+0x40>)
 80008c8:	4a08      	ldr	r2, [pc, #32]	; (80008ec <EXTI0_IRQHandler+0x44>)
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e002      	b.n	80008d4 <EXTI0_IRQHandler+0x2c>
	else
		timeout = 2.5*M;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <EXTI0_IRQHandler+0x40>)
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <EXTI0_IRQHandler+0x48>)
 80008d2:	601a      	str	r2, [r3, #0]
	gpio_irq_handler(0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 fbb9 	bl	800104c <gpio_irq_handler>
	}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	00000000 	.word	0x00000000
 80008e4:	414312d0 	.word	0x414312d0
 80008e8:	20000000 	.word	0x20000000
 80008ec:	000186a0 	.word	0x000186a0
 80008f0:	002625a0 	.word	0x002625a0

080008f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000922:	f000 fc95 	bl	8001250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff ff99 	bl	800085c <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000938:	080012c8 	.word	0x080012c8
  ldr r2, =_sbss
 800093c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000940:	20000020 	.word	0x20000020

08000944 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC_IRQHandler>
	...

08000948 <gpio_clk_control>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void gpio_clk_control(GPIO_RegDef_t *pGPIOx,uint8_t enable)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
	if (enable)
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d062      	beq.n	8000a20 <gpio_clk_control+0xd8>
	{
		if (pGPIOx == GPIOA)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a64      	ldr	r2, [pc, #400]	; (8000af0 <gpio_clk_control+0x1a8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <gpio_clk_control+0x28>
		{
			GPIOA_CLK_EN();
 8000962:	4b64      	ldr	r3, [pc, #400]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a63      	ldr	r2, [pc, #396]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 800096e:	e0b9      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a61      	ldr	r2, [pc, #388]	; (8000af8 <gpio_clk_control+0x1b0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <gpio_clk_control+0x3e>
			GPIOB_CLK_EN();
 8000978:	4b5e      	ldr	r3, [pc, #376]	; (8000af4 <gpio_clk_control+0x1ac>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a5d      	ldr	r2, [pc, #372]	; (8000af4 <gpio_clk_control+0x1ac>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000984:	e0ae      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a5c      	ldr	r2, [pc, #368]	; (8000afc <gpio_clk_control+0x1b4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <gpio_clk_control+0x54>
			GPIOC_CLK_EN();
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a58      	ldr	r2, [pc, #352]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099a:	e0a3      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a58      	ldr	r2, [pc, #352]	; (8000b00 <gpio_clk_control+0x1b8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d106      	bne.n	80009b2 <gpio_clk_control+0x6a>
			GPIOD_CLK_EN();
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a52      	ldr	r2, [pc, #328]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b0:	e098      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a53      	ldr	r2, [pc, #332]	; (8000b04 <gpio_clk_control+0x1bc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <gpio_clk_control+0x80>
			GPIOE_CLK_EN();
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4d      	ldr	r2, [pc, #308]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c6:	e08d      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <gpio_clk_control+0x1c0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <gpio_clk_control+0x96>
			GPIOF_CLK_EN();
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009d6:	f043 0320 	orr.w	r3, r3, #32
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009dc:	e082      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <gpio_clk_control+0x1c4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <gpio_clk_control+0xac>
			GPIOG_CLK_EN();
 80009e6:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a42      	ldr	r2, [pc, #264]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f2:	e077      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <gpio_clk_control+0x1c8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <gpio_clk_control+0xc2>
			GPIOH_CLK_EN();
 80009fc:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <gpio_clk_control+0x1ac>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a3c      	ldr	r2, [pc, #240]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a08:	e06c      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a41      	ldr	r2, [pc, #260]	; (8000b14 <gpio_clk_control+0x1cc>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d168      	bne.n	8000ae4 <gpio_clk_control+0x19c>
			GPIOI_CLK_EN();
 8000a12:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a37      	ldr	r2, [pc, #220]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a1e:	e061      	b.n	8000ae4 <gpio_clk_control+0x19c>
		if (pGPIOx == GPIOA)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a33      	ldr	r2, [pc, #204]	; (8000af0 <gpio_clk_control+0x1a8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <gpio_clk_control+0xee>
			GPIOA_CLK_DI();
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a2e:	f023 0301 	bic.w	r3, r3, #1
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a34:	e056      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <gpio_clk_control+0x1b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <gpio_clk_control+0x104>
			GPIOB_CLK_DI();
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4a:	e04b      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	; (8000afc <gpio_clk_control+0x1b4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <gpio_clk_control+0x11a>
			GPIOC_CLK_DI();
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a5a:	f023 0304 	bic.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a60:	e040      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <gpio_clk_control+0x1b8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <gpio_clk_control+0x130>
			GPIOD_CLK_DI();
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a70:	f023 0308 	bic.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a76:	e035      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <gpio_clk_control+0x1bc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d106      	bne.n	8000a8e <gpio_clk_control+0x146>
			GPIOE_CLK_DI();
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a86:	f023 0310 	bic.w	r3, r3, #16
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a8c:	e02a      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <gpio_clk_control+0x1c0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d106      	bne.n	8000aa4 <gpio_clk_control+0x15c>
			GPIOF_CLK_DI();
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000a9c:	f023 0320 	bic.w	r3, r3, #32
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa2:	e01f      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <gpio_clk_control+0x1c4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d106      	bne.n	8000aba <gpio_clk_control+0x172>
			GPIOG_CLK_DI();
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab8:	e014      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <gpio_clk_control+0x1c8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d106      	bne.n	8000ad0 <gpio_clk_control+0x188>
			GPIOH_CLK_DI();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ace:	e009      	b.n	8000ae4 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <gpio_clk_control+0x1cc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d105      	bne.n	8000ae4 <gpio_clk_control+0x19c>
			GPIOI_CLK_DI();
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <gpio_clk_control+0x1ac>)
 8000ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40021400 	.word	0x40021400
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40022000 	.word	0x40022000

08000b18 <gpio_init>:

/******************************************************
				2.GPIO initializations
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	gpio_clk_control(pGPIOHandle->pGPIOx, ENABLE);/*Initializes the clock control*/
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff0e 	bl	8000948 <gpio_clk_control>
	uint32_t temp=0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d821      	bhi.n	8000b7c <gpio_init+0x64>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	791b      	ldrb	r3, [r3, #4]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	791b      	ldrb	r3, [r3, #4]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2303      	movs	r3, #3
 8000b58:	408b      	lsls	r3, r1
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	400a      	ands	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
		temp= 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	e0e9      	b.n	8000d50 <gpio_init+0x238>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	; (8000cbc <gpio_init+0x1a4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	7912      	ldrb	r2, [r2, #4]
 8000b84:	4611      	mov	r1, r2
 8000b86:	2201      	movs	r2, #1
 8000b88:	408a      	lsls	r2, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <gpio_init+0x1a4>)
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	795b      	ldrb	r3, [r3, #5]
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d117      	bne.n	8000bca <gpio_init+0xb2>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000b9a:	4b48      	ldr	r3, [pc, #288]	; (8000cbc <gpio_init+0x1a4>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	7912      	ldrb	r2, [r2, #4]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	408a      	lsls	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	4611      	mov	r1, r2
 8000bac:	4a43      	ldr	r2, [pc, #268]	; (8000cbc <gpio_init+0x1a4>)
 8000bae:	400b      	ands	r3, r1
 8000bb0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <gpio_init+0x1a4>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	7912      	ldrb	r2, [r2, #4]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	408a      	lsls	r2, r1
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4a3e      	ldr	r2, [pc, #248]	; (8000cbc <gpio_init+0x1a4>)
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	60d3      	str	r3, [r2, #12]
 8000bc8:	e035      	b.n	8000c36 <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	795b      	ldrb	r3, [r3, #5]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d117      	bne.n	8000c02 <gpio_init+0xea>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000bd2:	4b3a      	ldr	r3, [pc, #232]	; (8000cbc <gpio_init+0x1a4>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	7912      	ldrb	r2, [r2, #4]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	2201      	movs	r2, #1
 8000bde:	408a      	lsls	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	4611      	mov	r1, r2
 8000be4:	4a35      	ldr	r2, [pc, #212]	; (8000cbc <gpio_init+0x1a4>)
 8000be6:	400b      	ands	r3, r1
 8000be8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <gpio_init+0x1a4>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	7912      	ldrb	r2, [r2, #4]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	408a      	lsls	r2, r1
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <gpio_init+0x1a4>)
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	6093      	str	r3, [r2, #8]
 8000c00:	e019      	b.n	8000c36 <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	795b      	ldrb	r3, [r3, #5]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d115      	bne.n	8000c36 <gpio_init+0x11e>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <gpio_init+0x1a4>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	7912      	ldrb	r2, [r2, #4]
 8000c12:	4611      	mov	r1, r2
 8000c14:	2201      	movs	r2, #1
 8000c16:	408a      	lsls	r2, r1
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <gpio_init+0x1a4>)
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <gpio_init+0x1a4>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	7912      	ldrb	r2, [r2, #4]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	408a      	lsls	r2, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <gpio_init+0x1a4>)
 8000c32:	430b      	orrs	r3, r1
 8000c34:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <gpio_init+0x1a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d102      	bne.n	8000c4a <gpio_init+0x132>
			value = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	e051      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <gpio_init+0x1ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d102      	bne.n	8000c5a <gpio_init+0x142>
			value = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	e049      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <gpio_init+0x1b0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d102      	bne.n	8000c6a <gpio_init+0x152>
			value = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	e041      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <gpio_init+0x1b4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d102      	bne.n	8000c7a <gpio_init+0x162>
			value = 3;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	e039      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <gpio_init+0x1b8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d102      	bne.n	8000c8a <gpio_init+0x172>
			value = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	e031      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <gpio_init+0x1bc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d102      	bne.n	8000c9a <gpio_init+0x182>
			value = 5;
 8000c94:	2305      	movs	r3, #5
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	e029      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <gpio_init+0x1c0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d102      	bne.n	8000caa <gpio_init+0x192>
			value = 6;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	e021      	b.n	8000cee <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <gpio_init+0x1c4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d115      	bne.n	8000ce0 <gpio_init+0x1c8>
			value = 7;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	e019      	b.n	8000cee <gpio_init+0x1d6>
 8000cba:	bf00      	nop
 8000cbc:	40013c00 	.word	0x40013c00
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020c00 	.word	0x40020c00
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40021400 	.word	0x40021400
 8000cd8:	40021800 	.word	0x40021800
 8000cdc:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a6b      	ldr	r2, [pc, #428]	; (8000e94 <gpio_init+0x37c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <gpio_init+0x1d6>
			value = 8;
 8000cea:	2308      	movs	r3, #8
 8000cec:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 8000cee:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <gpio_init+0x380>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a69      	ldr	r2, [pc, #420]	; (8000e98 <gpio_init+0x380>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 8000d0e:	4a63      	ldr	r2, [pc, #396]	; (8000e9c <gpio_init+0x384>)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3302      	adds	r3, #2
 8000d14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	69f9      	ldr	r1, [r7, #28]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	495d      	ldr	r1, [pc, #372]	; (8000e9c <gpio_init+0x384>)
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 8000d30:	4a5a      	ldr	r2, [pc, #360]	; (8000e9c <gpio_init+0x384>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3302      	adds	r3, #2
 8000d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	69f9      	ldr	r1, [r7, #28]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4955      	ldr	r1, [pc, #340]	; (8000e9c <gpio_init+0x384>)
 8000d46:	431a      	orrs	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	799b      	ldrb	r3, [r3, #6]
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	791b      	ldrb	r3, [r3, #4]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2103      	movs	r1, #3
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6899      	ldr	r1, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]
	temp= 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	79db      	ldrb	r3, [r3, #7]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2103      	movs	r1, #3
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4619      	mov	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68d9      	ldr	r1, [r3, #12]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7a1b      	ldrb	r3, [r3, #8]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	4619      	mov	r1, r3
 8000df4:	2301      	movs	r3, #1
 8000df6:	408b      	lsls	r3, r1
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	400a      	ands	r2, r1
 8000e02:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6859      	ldr	r1, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	795b      	ldrb	r3, [r3, #5]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d135      	bne.n	8000e8c <gpio_init+0x374>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	791b      	ldrb	r3, [r3, #4]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	7bfa      	ldrb	r2, [r7, #15]
 8000e52:	4001      	ands	r1, r0
 8000e54:	3208      	adds	r2, #8
 8000e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	3208      	adds	r2, #8
 8000e62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7a5b      	ldrb	r3, [r3, #9]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	4301      	orrs	r1, r0
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73bb      	strb	r3, [r7, #14]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	73fb      	strb	r3, [r7, #15]
	}


}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40013800 	.word	0x40013800

08000ea0 <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *gpio_x_pin, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor, int alternate_function)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	gpio_x_pin->pGPIOx = gpio;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	601a      	str	r2, [r3, #0]
	gpio_x_pin->GPIO_PinCfng.PinNumber = pin_number;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	711a      	strb	r2, [r3, #4]
	gpio_x_pin->GPIO_PinCfng.PinMode = output_mode;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	715a      	strb	r2, [r3, #5]
	gpio_x_pin->GPIO_PinCfng.PinSpeed = pin_speed;
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	719a      	strb	r2, [r3, #6]
	gpio_x_pin->GPIO_PinCfng.PinOType = pin_out_mode;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	721a      	strb	r2, [r3, #8]
	gpio_x_pin->GPIO_PinCfng.PinPuPdCtrl = internal_resistor;
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	71da      	strb	r2, [r3, #7]
	gpio_x_pin->GPIO_PinCfng.PinAltFunc = alternate_function;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	725a      	strb	r2, [r3, #9]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <gpio_write_to_pin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR; // returns the entire register
	return value;
}
void gpio_write_to_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
 8000efc:	4613      	mov	r3, r2
 8000efe:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d109      	bne.n	8000f1a <gpio_write_to_pin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	78fa      	ldrb	r2, [r7, #3]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR &= ~ (0x1 << PinNumber);
	pGPIOx->ODR |= (value << PinNumber);
	 */


}
 8000f18:	e009      	b.n	8000f2e <gpio_write_to_pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	43d2      	mvns	r2, r2
 8000f28:	401a      	ands	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	615a      	str	r2, [r3, #20]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <gpio_toggle_pin>:
void gpio_write_to_port(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = value;
}
void gpio_toggle_pin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin_number); //changing previous pin state
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	78fa      	ldrb	r2, [r7, #3]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	405a      	eors	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	615a      	str	r2, [r3, #20]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <gpio_irq_set>:

/******************************************************
				4.GPIO Interrupt request functions
*******************************************************/
void gpio_irq_set(uint8_t IRQNumber)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	if (IRQNumber < 32)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b1f      	cmp	r3, #31
 8000f72:	d80a      	bhi.n	8000f8a <gpio_irq_set+0x26>
		{*NVIC_ISER0 |= (1<<IRQNumber);}
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <gpio_irq_set+0x7c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	4611      	mov	r1, r2
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <gpio_irq_set+0x7c>)
 8000f84:	430b      	orrs	r3, r1
 8000f86:	6013      	str	r3, [r2, #0]
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
}
 8000f88:	e024      	b.n	8000fd4 <gpio_irq_set+0x70>
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d90f      	bls.n	8000fb0 <gpio_irq_set+0x4c>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b3f      	cmp	r3, #63	; 0x3f
 8000f94:	d80c      	bhi.n	8000fb0 <gpio_irq_set+0x4c>
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <gpio_irq_set+0x80>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <gpio_irq_set+0x80>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	e011      	b.n	8000fd4 <gpio_irq_set+0x70>
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b40      	cmp	r3, #64	; 0x40
 8000fb4:	d90e      	bls.n	8000fd4 <gpio_irq_set+0x70>
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b5f      	cmp	r3, #95	; 0x5f
 8000fba:	d80b      	bhi.n	8000fd4 <gpio_irq_set+0x70>
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <gpio_irq_set+0x84>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	79fa      	ldrb	r2, [r7, #7]
 8000fc2:	f002 021f 	and.w	r2, r2, #31
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <gpio_irq_set+0x84>)
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000e104 	.word	0xe000e104
 8000fe8:	e000e108 	.word	0xe000e108

08000fec <gpio_irq_priority>:
		{*NVIC_ICER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ICER2 |= (1<<IRQNumber%32); }
}
void gpio_irq_priority(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber/4;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	73fb      	strb	r3, [r7, #15]
	uint8_t	iprx_section = IRQNumber%4;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - PRIORITY_NOT_IMPLEMENTED_BITS);
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	3304      	adds	r3, #4
 8001012:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE + iprx) |= (IRQPriority << iprx_section) << (shift_amount);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800101c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	79b9      	ldrb	r1, [r7, #6]
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	4099      	lsls	r1, r3
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	4619      	mov	r1, r3
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001038:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800103c:	430a      	orrs	r2, r1
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <gpio_irq_handler>:
void gpio_irq_handler(uint8_t PinNumber)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	//Clear the pending register pin
	if(EXTI->PR & (1 << PinNumber))
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <gpio_irq_handler+0x3c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	2101      	movs	r1, #1
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d009      	beq.n	800107c <gpio_irq_handler+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <gpio_irq_handler+0x3c>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4611      	mov	r1, r2
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <gpio_irq_handler+0x3c>)
 8001078:	430b      	orrs	r3, r1
 800107a:	6153      	str	r3, [r2, #20]
	}
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40013c00 	.word	0x40013c00

0800108c <spi_configure_pin>:

/******************************************************
				2.SPI
*******************************************************/
void spi_configure_pin(SPI_Handle_t* spi, SPI_RegDef_t* spi_x, int cpha, int cpol, int master, int baudrate, int ssm, int dff, int bus_cfg)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]

	spi->p_spi_x = spi_x;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	601a      	str	r2, [r3, #0]
	spi->spi_config.CPHA = cpha;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	711a      	strb	r2, [r3, #4]
	spi->spi_config.CPOL = cpol;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	715a      	strb	r2, [r3, #5]
	spi->spi_config.MSTR = master;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	719a      	strb	r2, [r3, #6]
	spi->spi_config.BR = baudrate;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	71da      	strb	r2, [r3, #7]
	spi->spi_config.SSM = ssm;
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	725a      	strb	r2, [r3, #9]
	spi->spi_config.DFF = dff;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	721a      	strb	r2, [r3, #8]

	spi->spi_config.BUS = bus_cfg;
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	729a      	strb	r2, [r3, #10]

}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <spi_init>:
void spi_init(SPI_Handle_t* spi_handle)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]

	temp |= (spi_handle->spi_config.CPHA)<<CR1_BIT0_CPHA;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.CPOL)<<CR1_BIT1_CPOL;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	795b      	ldrb	r3, [r3, #5]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.MSTR)<<CR1_BIT2_MSTR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	799b      	ldrb	r3, [r3, #6]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.BR)<<CR1_BIT3_BR0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	79db      	ldrb	r3, [r3, #7]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
	temp |= ENABLE<<CR1_BIT7_LSB;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.DFF)<<CR1_BIT11_DFF;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7a1b      	ldrb	r3, [r3, #8]
 8001132:	02db      	lsls	r3, r3, #11
 8001134:	461a      	mov	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.SSM)<<CR1_BIT9_SSM;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7a5b      	ldrb	r3, [r3, #9]
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]

	if (spi_handle->spi_config.BUS == SPI_HALF_DUPLEX)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7a9b      	ldrb	r3, [r3, #10]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d104      	bne.n	800115c <spi_init+0x78>
	{
		/*Half duplex - BIDIMODE bit should be enabled*/
		temp |= SPI_BIDI_MODE<<CR1_BIT15_BIDIMODE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e007      	b.n	800116c <spi_init+0x88>
	}
	else
	{
		/*Full duplex - BIDIMODE bit should be reset*/
		temp |= SPI_UNIDI_MODE<<CR1_BIT15_BIDIMODE;
		if (spi_handle->spi_config.BUS == SPI_SIMPLEX_RX_ONLY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7a9b      	ldrb	r3, [r3, #10]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d103      	bne.n	800116c <spi_init+0x88>
		{
			/*Simplex RX only - RXONLY bit should be enabled*/
			temp |= ENABLE<<CR1_BIT10_RXONLY;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	60fb      	str	r3, [r7, #12]
		}
	}
	spi_handle->p_spi_x->SPI_CR1 = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <spi_enable>:
void spi_enable(SPI_RegDef_t *p_spi_x, uint8_t enable)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	p_spi_x->SPI_CR1 &= ~(1<<CR1_BIT6_SPE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
	p_spi_x->SPI_CR1 |= (enable<<CR1_BIT6_SPE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	0192      	lsls	r2, r2, #6
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]

}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <spi_ssi_enable>:
void spi_ssi_enable(SPI_RegDef_t *p_spi_x, uint8_t enable)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
	p_spi_x->SPI_CR1 &= ~(1<<CR1_BIT8_SSI);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
	p_spi_x->SPI_CR1 |= (enable<<CR1_BIT8_SSI);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	0212      	lsls	r2, r2, #8
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]

}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <spi_send>:
/******************************************************
				3.3.SPI send/receive functions
*******************************************************/

void spi_send(SPI_RegDef_t* p_spi_x,uint8_t *pTxbuffer, uint32_t len)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
	while(len > 0)
 80011f0:	e024      	b.n	800123c <spi_send+0x58>
	{
		if (((p_spi_x->SPI_SR)&(1<<SR_BIT1_TXE)) != 0)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d01e      	beq.n	800123c <spi_send+0x58>
		/*If TX buffer is empty*/
		{
			if (((p_spi_x->SPI_CR1)&(1<<CR1_BIT11_DFF)) == SPI_DFF_8_BIT)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10d      	bne.n	8001226 <spi_send+0x42>
			/*If Frame format is 8 bit*/
			{
				p_spi_x->SPI_DR |= *pTxbuffer;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	60da      	str	r2, [r3, #12]
				pTxbuffer++;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
				len--;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3b01      	subs	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	e00a      	b.n	800123c <spi_send+0x58>
			}
			else
			/*If Frame format is 16 bit*/
			{
				p_spi_x->SPI_DR =  *((uint16_t*)pTxbuffer);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	60da      	str	r2, [r3, #12]
				len = len-2;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b02      	subs	r3, #2
 8001234:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxbuffer++;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3301      	adds	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1d7      	bne.n	80011f2 <spi_send+0xe>
				pTxbuffer++;
				*/
			}
		}
	}
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <__libc_init_array>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	4e0d      	ldr	r6, [pc, #52]	; (8001288 <__libc_init_array+0x38>)
 8001254:	4c0d      	ldr	r4, [pc, #52]	; (800128c <__libc_init_array+0x3c>)
 8001256:	1ba4      	subs	r4, r4, r6
 8001258:	10a4      	asrs	r4, r4, #2
 800125a:	2500      	movs	r5, #0
 800125c:	42a5      	cmp	r5, r4
 800125e:	d109      	bne.n	8001274 <__libc_init_array+0x24>
 8001260:	4e0b      	ldr	r6, [pc, #44]	; (8001290 <__libc_init_array+0x40>)
 8001262:	4c0c      	ldr	r4, [pc, #48]	; (8001294 <__libc_init_array+0x44>)
 8001264:	f000 f818 	bl	8001298 <_init>
 8001268:	1ba4      	subs	r4, r4, r6
 800126a:	10a4      	asrs	r4, r4, #2
 800126c:	2500      	movs	r5, #0
 800126e:	42a5      	cmp	r5, r4
 8001270:	d105      	bne.n	800127e <__libc_init_array+0x2e>
 8001272:	bd70      	pop	{r4, r5, r6, pc}
 8001274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001278:	4798      	blx	r3
 800127a:	3501      	adds	r5, #1
 800127c:	e7ee      	b.n	800125c <__libc_init_array+0xc>
 800127e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001282:	4798      	blx	r3
 8001284:	3501      	adds	r5, #1
 8001286:	e7f2      	b.n	800126e <__libc_init_array+0x1e>
 8001288:	080012c0 	.word	0x080012c0
 800128c:	080012c0 	.word	0x080012c0
 8001290:	080012c0 	.word	0x080012c0
 8001294:	080012c4 	.word	0x080012c4

08001298 <_init>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr

080012a4 <_fini>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr
