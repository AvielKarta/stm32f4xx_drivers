
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800071c  08000724  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800071c  0800071c  00010724  2**0
                  CONTENTS
  4 .ARM          00000000  0800071c  0800071c  00010724  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800071c  08000724  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800071c  0800071c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000724  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000724  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000083c  00000000  00000000  00010754  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001f0  00000000  00000000  00010f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b0  00000000  00000000  00011180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000088  00000000  00000000  00011230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000012c5  00000000  00000000  000112b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009e5  00000000  00000000  0001257d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004fd2  00000000  00000000  00012f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00017f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  00017fb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000704 	.word	0x08000704

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000704 	.word	0x08000704

080001e8 <delay>:

#include "stm32f407xx.h"


void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b094      	sub	sp, #80	; 0x50
 8000218:	af04      	add	r7, sp, #16

	int cnt = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_Handle_t orange_led;
	GPIO_Handle_t red_led;
	GPIO_Handle_t blue_led;
	GPIO_Handle_t button;

	configure_gpio_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 800021e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000222:	2300      	movs	r3, #0
 8000224:	9302      	str	r3, [sp, #8]
 8000226:	2300      	movs	r3, #0
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	2300      	movs	r3, #0
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	220c      	movs	r2, #12
 8000232:	4939      	ldr	r1, [pc, #228]	; (8000318 <main+0x104>)
 8000234:	f000 fa1e 	bl	8000674 <configure_gpio_pin>
	configure_gpio_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000238:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800023c:	2300      	movs	r3, #0
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	2300      	movs	r3, #0
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	2300      	movs	r3, #0
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2301      	movs	r3, #1
 800024a:	220d      	movs	r2, #13
 800024c:	4932      	ldr	r1, [pc, #200]	; (8000318 <main+0x104>)
 800024e:	f000 fa11 	bl	8000674 <configure_gpio_pin>
	configure_gpio_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000252:	f107 0018 	add.w	r0, r7, #24
 8000256:	2300      	movs	r3, #0
 8000258:	9302      	str	r3, [sp, #8]
 800025a:	2300      	movs	r3, #0
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2301      	movs	r3, #1
 8000264:	220e      	movs	r2, #14
 8000266:	492c      	ldr	r1, [pc, #176]	; (8000318 <main+0x104>)
 8000268:	f000 fa04 	bl	8000674 <configure_gpio_pin>
	configure_gpio_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 800026c:	f107 000c 	add.w	r0, r7, #12
 8000270:	2300      	movs	r3, #0
 8000272:	9302      	str	r3, [sp, #8]
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2300      	movs	r3, #0
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	220f      	movs	r2, #15
 8000280:	4925      	ldr	r1, [pc, #148]	; (8000318 <main+0x104>)
 8000282:	f000 f9f7 	bl	8000674 <configure_gpio_pin>
	configure_gpio_pin(&button, GPIOA, 0, GPIO_MODE_IN, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000286:	4638      	mov	r0, r7
 8000288:	2300      	movs	r3, #0
 800028a:	9302      	str	r3, [sp, #8]
 800028c:	2300      	movs	r3, #0
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2302      	movs	r3, #2
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	2200      	movs	r2, #0
 8000298:	4920      	ldr	r1, [pc, #128]	; (800031c <main+0x108>)
 800029a:	f000 f9eb 	bl	8000674 <configure_gpio_pin>
//	configure_gpio_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);
//	configure_gpio_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);
//  configure_gpio_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);
//	configure_gpio_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);

	GPIO_CLKCtrl(GPIOD,ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	481d      	ldr	r0, [pc, #116]	; (8000318 <main+0x104>)
 80002a2:	f000 f867 	bl	8000374 <GPIO_CLKCtrl>
	GPIO_CLKCtrl(GPIOA,ENABLE);
 80002a6:	2101      	movs	r1, #1
 80002a8:	481c      	ldr	r0, [pc, #112]	; (800031c <main+0x108>)
 80002aa:	f000 f863 	bl	8000374 <GPIO_CLKCtrl>

	GPIO_Init(&green_led);
 80002ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f8e4 	bl	8000480 <GPIO_Init>
	GPIO_Init(&orange_led);
 80002b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f8df 	bl	8000480 <GPIO_Init>
	GPIO_Init(&red_led);
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f8da 	bl	8000480 <GPIO_Init>
	GPIO_Init(&blue_led);
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8d5 	bl	8000480 <GPIO_Init>
	GPIO_Init(&button);
 80002d6:	463b      	mov	r3, r7
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f8d1 	bl	8000480 <GPIO_Init>

	
	while(1)
	{
		if (GPIO_ReadPin(GPIOA, 0) == ENABLE)
 80002de:	2100      	movs	r1, #0
 80002e0:	480e      	ldr	r0, [pc, #56]	; (800031c <main+0x108>)
 80002e2:	f000 f99c 	bl	800061e <GPIO_ReadPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d1f8      	bne.n	80002de <main+0xca>
		{
			delay();
 80002ec:	f7ff ff7c 	bl	80001e8 <delay>
			GPIO_TogglePin(GPIOD, 12+(++cnt)%4);
 80002f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002f2:	3301      	adds	r3, #1
 80002f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002f8:	425a      	negs	r2, r3
 80002fa:	f003 0303 	and.w	r3, r3, #3
 80002fe:	f002 0203 	and.w	r2, r2, #3
 8000302:	bf58      	it	pl
 8000304:	4253      	negpl	r3, r2
 8000306:	b2db      	uxtb	r3, r3
 8000308:	330c      	adds	r3, #12
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <main+0x104>)
 8000310:	f000 f99b 	bl	800064a <GPIO_TogglePin>
		if (GPIO_ReadPin(GPIOA, 0) == ENABLE)
 8000314:	e7e3      	b.n	80002de <main+0xca>
 8000316:	bf00      	nop
 8000318:	40020c00 	.word	0x40020c00
 800031c:	40020000 	.word	0x40020000

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f9b5 	bl	80006bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff5f 	bl	8000214 <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000364:	08000724 	.word	0x08000724
  ldr r2, =_sbss
 8000368:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800036c:	2000001c 	.word	0x2000001c

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <GPIO_CLKCtrl>:
 */
# include "stm32f407xx.h"

//1.Clock control
void GPIO_CLKCtrl(GPIO_RegDef_t *pGPIOx,uint8_t EnOrDi)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d161      	bne.n	800044a <GPIO_CLKCtrl+0xd6>
	{
		if (pGPIOx == GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <GPIO_CLKCtrl+0xe4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_CLKCtrl+0x28>
		{
			GPIOA_CLK_EN();
 800038e:	4b33      	ldr	r3, [pc, #204]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{

	}

}
 800039a:	e056      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a30      	ldr	r2, [pc, #192]	; (8000460 <GPIO_CLKCtrl+0xec>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_CLKCtrl+0x3e>
			GPIOB_CLK_EN();
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e04b      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if (pGPIOx == GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <GPIO_CLKCtrl+0xf0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_CLKCtrl+0x54>
			GPIOC_CLK_EN();
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a27      	ldr	r2, [pc, #156]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e040      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <GPIO_CLKCtrl+0xf4>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_CLKCtrl+0x6a>
			GPIOD_CLK_EN();
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a21      	ldr	r2, [pc, #132]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e035      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a22      	ldr	r2, [pc, #136]	; (800046c <GPIO_CLKCtrl+0xf8>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_CLKCtrl+0x80>
			GPIOE_CLK_EN();
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e02a      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <GPIO_CLKCtrl+0xfc>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_CLKCtrl+0x96>
			GPIOF_CLK_EN();
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <GPIO_CLKCtrl+0xe8>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e01f      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a19      	ldr	r2, [pc, #100]	; (8000474 <GPIO_CLKCtrl+0x100>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_CLKCtrl+0xac>
			GPIOG_CLK_EN();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e014      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <GPIO_CLKCtrl+0x104>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_CLKCtrl+0xc2>
			GPIOH_CLK_EN();
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <GPIO_CLKCtrl+0xe8>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <GPIO_CLKCtrl+0xe8>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e009      	b.n	800044a <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOI)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <GPIO_CLKCtrl+0x108>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d105      	bne.n	800044a <GPIO_CLKCtrl+0xd6>
			GPIOI_CLK_EN();
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <GPIO_CLKCtrl+0xe8>)
 8000444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40020000 	.word	0x40020000
 800045c:	40023800 	.word	0x40023800
 8000460:	40020400 	.word	0x40020400
 8000464:	40020800 	.word	0x40020800
 8000468:	40020c00 	.word	0x40020c00
 800046c:	40021000 	.word	0x40021000
 8000470:	40021400 	.word	0x40021400
 8000474:	40021800 	.word	0x40021800
 8000478:	40021c00 	.word	0x40021c00
 800047c:	40022000 	.word	0x40022000

08000480 <GPIO_Init>:
//2.Initialize and deInitialize
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d820      	bhi.n	80004d6 <GPIO_Init+0x56>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	4619      	mov	r1, r3
 80004b2:	2303      	movs	r3, #3
 80004b4:	408b      	lsls	r3, r1
 80004b6:	43db      	mvns	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	400a      	ands	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6819      	ldr	r1, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	601a      	str	r2, [r3, #0]
		temp= 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
	{
		//Interrupt mode
	}
	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	799b      	ldrb	r3, [r3, #6]
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	689a      	ldr	r2, [r3, #8]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	2103      	movs	r1, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6899      	ldr	r1, [r3, #8]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	430a      	orrs	r2, r1
 8000514:	609a      	str	r2, [r3, #8]
	temp= 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	79db      	ldrb	r3, [r3, #7]
 800051e:	461a      	mov	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	68da      	ldr	r2, [r3, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2103      	movs	r1, #3
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	400a      	ands	r2, r1
 8000548:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68d9      	ldr	r1, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	430a      	orrs	r2, r1
 8000558:	60da      	str	r2, [r3, #12]
	temp= 0;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7a1b      	ldrb	r3, [r3, #8]
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	4619      	mov	r1, r3
 800057a:	2301      	movs	r3, #1
 800057c:	408b      	lsls	r3, r1
 800057e:	43db      	mvns	r3, r3
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	400a      	ands	r2, r1
 8000588:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6859      	ldr	r1, [r3, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	430a      	orrs	r2, r1
 8000598:	605a      	str	r2, [r3, #4]
	temp= 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d135      	bne.n	8000612 <GPIO_Init+0x192>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	7afa      	ldrb	r2, [r7, #11]
 80005be:	3208      	adds	r2, #8
 80005c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005c4:	7abb      	ldrb	r3, [r7, #10]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	220f      	movs	r2, #15
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	7afa      	ldrb	r2, [r7, #11]
 80005d8:	4001      	ands	r1, r0
 80005da:	3208      	adds	r2, #8
 80005dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	7afa      	ldrb	r2, [r7, #11]
 80005e6:	3208      	adds	r2, #8
 80005e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7a5b      	ldrb	r3, [r3, #9]
 80005f0:	461a      	mov	r2, r3
 80005f2:	7abb      	ldrb	r3, [r7, #10]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	7afa      	ldrb	r2, [r7, #11]
 8000602:	4301      	orrs	r1, r0
 8000604:	3208      	adds	r2, #8
 8000606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	72bb      	strb	r3, [r7, #10]
 800060e:	7abb      	ldrb	r3, [r7, #10]
 8000610:	72fb      	strb	r3, [r7, #11]





}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <GPIO_ReadPin>:
		GPIOI_RST();
	}
}
//3.Data read\write
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >>PinNumber) & 0x00000001); // shift n-th bit on the LSB and masking the rest
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	691a      	ldr	r2, [r3, #16]
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	fa22 f303 	lsr.w	r3, r2, r3
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
	return value;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <GPIO_TogglePin>:
void GPIO_WriteToPort(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = value;
}
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin_number); //changing previous pin state
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	78fa      	ldrb	r2, [r7, #3]
 800065c:	2101      	movs	r1, #1
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	405a      	eors	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	615a      	str	r2, [r3, #20]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <configure_gpio_pin>:

//4.LedController
void configure_gpio_pin(GPIO_Handle_t *GpioLed, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor_state)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	603b      	str	r3, [r7, #0]
	GpioLed->pGPIOx = gpio;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	601a      	str	r2, [r3, #0]
	GpioLed->GPIO_PinCfng.PinNumber = pin_number;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	711a      	strb	r2, [r3, #4]
	GpioLed->GPIO_PinCfng.PinMode = output_mode;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	715a      	strb	r2, [r3, #5]
	GpioLed->GPIO_PinCfng.PinSpeed = pin_speed;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	719a      	strb	r2, [r3, #6]
	GpioLed->GPIO_PinCfng.PinOType = pin_out_mode;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	721a      	strb	r2, [r3, #8]
	GpioLed->GPIO_PinCfng.PinPuPdCtrl = internal_resistor_state;
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	71da      	strb	r2, [r3, #7]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <__libc_init_array>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	4e0d      	ldr	r6, [pc, #52]	; (80006f4 <__libc_init_array+0x38>)
 80006c0:	4c0d      	ldr	r4, [pc, #52]	; (80006f8 <__libc_init_array+0x3c>)
 80006c2:	1ba4      	subs	r4, r4, r6
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	2500      	movs	r5, #0
 80006c8:	42a5      	cmp	r5, r4
 80006ca:	d109      	bne.n	80006e0 <__libc_init_array+0x24>
 80006cc:	4e0b      	ldr	r6, [pc, #44]	; (80006fc <__libc_init_array+0x40>)
 80006ce:	4c0c      	ldr	r4, [pc, #48]	; (8000700 <__libc_init_array+0x44>)
 80006d0:	f000 f818 	bl	8000704 <_init>
 80006d4:	1ba4      	subs	r4, r4, r6
 80006d6:	10a4      	asrs	r4, r4, #2
 80006d8:	2500      	movs	r5, #0
 80006da:	42a5      	cmp	r5, r4
 80006dc:	d105      	bne.n	80006ea <__libc_init_array+0x2e>
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e4:	4798      	blx	r3
 80006e6:	3501      	adds	r5, #1
 80006e8:	e7ee      	b.n	80006c8 <__libc_init_array+0xc>
 80006ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ee:	4798      	blx	r3
 80006f0:	3501      	adds	r5, #1
 80006f2:	e7f2      	b.n	80006da <__libc_init_array+0x1e>
 80006f4:	0800071c 	.word	0x0800071c
 80006f8:	0800071c 	.word	0x0800071c
 80006fc:	0800071c 	.word	0x0800071c
 8000700:	08000720 	.word	0x08000720

08000704 <_init>:
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000706:	bf00      	nop
 8000708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070a:	bc08      	pop	{r3}
 800070c:	469e      	mov	lr, r3
 800070e:	4770      	bx	lr

08000710 <_fini>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	bf00      	nop
 8000714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000716:	bc08      	pop	{r3}
 8000718:	469e      	mov	lr, r3
 800071a:	4770      	bx	lr
