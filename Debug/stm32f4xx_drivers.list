
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000774  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800091c  08000924  00010924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800091c  0800091c  00010924  2**0
                  CONTENTS
  4 .ARM          00000000  0800091c  0800091c  00010924  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800091c  08000924  00010924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800091c  0800091c  0001091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000920  08000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000924  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000924  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010924  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a52  00000000  00000000  00010954  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000027a  00000000  00000000  000113a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d0  00000000  00000000  00011620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  000116f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000132e  00000000  00000000  00011798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a84  00000000  00000000  00012ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000052aa  00000000  00000000  0001354a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000187f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000029c  00000000  00000000  00018870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000904 	.word	0x08000904

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000904 	.word	0x08000904

080001e8 <delay>:

#include "stm32f407xx.h"


void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b098      	sub	sp, #96	; 0x60
 8000218:	af04      	add	r7, sp, #16
int main(void)
 800021a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48

	int cnt = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_Handle_t blue_led;
	GPIO_Handle_t button;

	GPIO_Handle_t irq_pin;

	gpio_configure_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000224:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000228:	2300      	movs	r3, #0
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2300      	movs	r3, #0
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	2300      	movs	r3, #0
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	220c      	movs	r2, #12
 8000238:	4941      	ldr	r1, [pc, #260]	; (8000340 <main+0x12c>)
 800023a:	f000 faef 	bl	800081c <gpio_configure_pin>
	gpio_configure_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 800023e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000242:	2300      	movs	r3, #0
 8000244:	9302      	str	r3, [sp, #8]
 8000246:	2300      	movs	r3, #0
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	2300      	movs	r3, #0
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2301      	movs	r3, #1
 8000250:	220d      	movs	r2, #13
 8000252:	493b      	ldr	r1, [pc, #236]	; (8000340 <main+0x12c>)
 8000254:	f000 fae2 	bl	800081c <gpio_configure_pin>
	gpio_configure_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000258:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800025c:	2300      	movs	r3, #0
 800025e:	9302      	str	r3, [sp, #8]
 8000260:	2300      	movs	r3, #0
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	2300      	movs	r3, #0
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2301      	movs	r3, #1
 800026a:	220e      	movs	r2, #14
 800026c:	4934      	ldr	r1, [pc, #208]	; (8000340 <main+0x12c>)
 800026e:	f000 fad5 	bl	800081c <gpio_configure_pin>
	gpio_configure_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000272:	f107 0018 	add.w	r0, r7, #24
 8000276:	2300      	movs	r3, #0
 8000278:	9302      	str	r3, [sp, #8]
 800027a:	2300      	movs	r3, #0
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	2300      	movs	r3, #0
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2301      	movs	r3, #1
 8000284:	220f      	movs	r2, #15
 8000286:	492e      	ldr	r1, [pc, #184]	; (8000340 <main+0x12c>)
 8000288:	f000 fac8 	bl	800081c <gpio_configure_pin>
	gpio_configure_pin(&button, GPIOA, 0, GPIO_MODE_IN, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 800028c:	f107 000c 	add.w	r0, r7, #12
 8000290:	2300      	movs	r3, #0
 8000292:	9302      	str	r3, [sp, #8]
 8000294:	2300      	movs	r3, #0
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	2302      	movs	r3, #2
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	2200      	movs	r2, #0
 80002a0:	4928      	ldr	r1, [pc, #160]	; (8000344 <main+0x130>)
 80002a2:	f000 fabb 	bl	800081c <gpio_configure_pin>

	gpio_configure_pin(&irq_pin, GPIOA, 12, GPIO_MODE_IRQ_FT, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 80002a6:	4638      	mov	r0, r7
 80002a8:	2300      	movs	r3, #0
 80002aa:	9302      	str	r3, [sp, #8]
 80002ac:	2300      	movs	r3, #0
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	2302      	movs	r3, #2
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2304      	movs	r3, #4
 80002b6:	220c      	movs	r2, #12
 80002b8:	4922      	ldr	r1, [pc, #136]	; (8000344 <main+0x130>)
 80002ba:	f000 faaf 	bl	800081c <gpio_configure_pin>
//	configure_gpio_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);
//	configure_gpio_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);
//	configure_gpio_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);
//	configure_gpio_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_OD, GPIO_PU);

	GPIO_CLKCtrl(GPIOD,ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	481f      	ldr	r0, [pc, #124]	; (8000340 <main+0x12c>)
 80002c2:	f000 f86b 	bl	800039c <GPIO_CLKCtrl>
	GPIO_CLKCtrl(GPIOA,ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	481e      	ldr	r0, [pc, #120]	; (8000344 <main+0x130>)
 80002ca:	f000 f867 	bl	800039c <GPIO_CLKCtrl>

	gpio_init(&green_led);
 80002ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8e8 	bl	80004a8 <gpio_init>
	gpio_init(&orange_led);
 80002d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f8e3 	bl	80004a8 <gpio_init>
	gpio_init(&red_led);
 80002e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8de 	bl	80004a8 <gpio_init>
	gpio_init(&blue_led);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f8d9 	bl	80004a8 <gpio_init>
	gpio_init(&button);
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f8d4 	bl	80004a8 <gpio_init>
	gpio_init(&irq_pin);
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f8d0 	bl	80004a8 <gpio_init>
		gpio_irq_handler(0);
	}
	
	while(1)
	{
		if (gpio_read_pin(GPIOA, 0) == ENABLE)
 8000308:	2100      	movs	r1, #0
 800030a:	480e      	ldr	r0, [pc, #56]	; (8000344 <main+0x130>)
 800030c:	f000 faaa 	bl	8000864 <gpio_read_pin>
 8000310:	4603      	mov	r3, r0
 8000312:	2b01      	cmp	r3, #1
 8000314:	d1f8      	bne.n	8000308 <main+0xf4>
		{
			delay();
 8000316:	f7ff ff67 	bl	80001e8 <delay>
			gpio_toggle_pin(GPIOD, 12+(++cnt)%4);
 800031a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800031c:	3301      	adds	r3, #1
 800031e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000322:	425a      	negs	r2, r3
 8000324:	f003 0303 	and.w	r3, r3, #3
 8000328:	f002 0203 	and.w	r2, r2, #3
 800032c:	bf58      	it	pl
 800032e:	4253      	negpl	r3, r2
 8000330:	b2db      	uxtb	r3, r3
 8000332:	330c      	adds	r3, #12
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	4801      	ldr	r0, [pc, #4]	; (8000340 <main+0x12c>)
 800033a:	f000 faa9 	bl	8000890 <gpio_toggle_pin>
		if (gpio_read_pin(GPIOA, 0) == ENABLE)
 800033e:	e7e3      	b.n	8000308 <main+0xf4>
 8000340:	40020c00 	.word	0x40020c00
 8000344:	40020000 	.word	0x40020000

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 faa1 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff4b 	bl	8000214 <main>

0800037e <LoopForever>:

LoopForever:
    b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000924 	.word	0x08000924
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <GPIO_CLKCtrl>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void GPIO_CLKCtrl(GPIO_RegDef_t *pGPIOx,uint8_t action)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
	if (action == ENABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d161      	bne.n	8000472 <GPIO_CLKCtrl+0xd6>
	{
		if (pGPIOx == GPIOA)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a33      	ldr	r2, [pc, #204]	; (8000480 <GPIO_CLKCtrl+0xe4>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_CLKCtrl+0x28>
		{
			GPIOA_CLK_EN();
 80003b6:	4b33      	ldr	r3, [pc, #204]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a32      	ldr	r2, [pc, #200]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{

	}

}
 80003c2:	e056      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOB)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a30      	ldr	r2, [pc, #192]	; (8000488 <GPIO_CLKCtrl+0xec>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_CLKCtrl+0x3e>
			GPIOB_CLK_EN();
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a2c      	ldr	r2, [pc, #176]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e04b      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if (pGPIOx == GPIOC)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a2b      	ldr	r2, [pc, #172]	; (800048c <GPIO_CLKCtrl+0xf0>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_CLKCtrl+0x54>
			GPIOC_CLK_EN();
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a27      	ldr	r2, [pc, #156]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e040      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOD)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a27      	ldr	r2, [pc, #156]	; (8000490 <GPIO_CLKCtrl+0xf4>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_CLKCtrl+0x6a>
			GPIOD_CLK_EN();
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a21      	ldr	r2, [pc, #132]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e035      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOE)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a22      	ldr	r2, [pc, #136]	; (8000494 <GPIO_CLKCtrl+0xf8>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_CLKCtrl+0x80>
			GPIOE_CLK_EN();
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e02a      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOF)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a1e      	ldr	r2, [pc, #120]	; (8000498 <GPIO_CLKCtrl+0xfc>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_CLKCtrl+0x96>
			GPIOF_CLK_EN();
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a16      	ldr	r2, [pc, #88]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e01f      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOG)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a19      	ldr	r2, [pc, #100]	; (800049c <GPIO_CLKCtrl+0x100>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_CLKCtrl+0xac>
			GPIOG_CLK_EN();
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e014      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOH)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <GPIO_CLKCtrl+0x104>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_CLKCtrl+0xc2>
			GPIOH_CLK_EN();
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e009      	b.n	8000472 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOI)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <GPIO_CLKCtrl+0x108>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d105      	bne.n	8000472 <GPIO_CLKCtrl+0xd6>
			GPIOI_CLK_EN();
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a06      	ldr	r2, [pc, #24]	; (8000484 <GPIO_CLKCtrl+0xe8>)
 800046c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40020000 	.word	0x40020000
 8000484:	40023800 	.word	0x40023800
 8000488:	40020400 	.word	0x40020400
 800048c:	40020800 	.word	0x40020800
 8000490:	40020c00 	.word	0x40020c00
 8000494:	40021000 	.word	0x40021000
 8000498:	40021400 	.word	0x40021400
 800049c:	40021800 	.word	0x40021800
 80004a0:	40021c00 	.word	0x40021c00
 80004a4:	40022000 	.word	0x40022000

080004a8 <gpio_init>:

/******************************************************
				2.GPIO de/init
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b089      	sub	sp, #36	; 0x24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d821      	bhi.n	8000500 <gpio_init+0x58>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	461a      	mov	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	4619      	mov	r1, r3
 80004da:	2303      	movs	r3, #3
 80004dc:	408b      	lsls	r3, r1
 80004de:	43db      	mvns	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	400a      	ands	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6819      	ldr	r1, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
		temp= 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
 80004fe:	e0d1      	b.n	80006a4 <gpio_init+0x1fc>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <gpio_init+0xe0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	4611      	mov	r1, r2
 8000510:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <gpio_init+0xe0>)
 8000512:	430b      	orrs	r3, r1
 8000514:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d117      	bne.n	800054e <gpio_init+0xa6>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <gpio_init+0xe0>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	43d2      	mvns	r2, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a15      	ldr	r2, [pc, #84]	; (8000588 <gpio_init+0xe0>)
 8000532:	400b      	ands	r3, r1
 8000534:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <gpio_init+0xe0>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	4611      	mov	r1, r2
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <gpio_init+0xe0>)
 8000548:	430b      	orrs	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]
 800054c:	e038      	b.n	80005c0 <gpio_init+0x118>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	795b      	ldrb	r3, [r3, #5]
 8000552:	2b05      	cmp	r3, #5
 8000554:	d11a      	bne.n	800058c <gpio_init+0xe4>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <gpio_init+0xe0>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	43d2      	mvns	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <gpio_init+0xe0>)
 800056a:	400b      	ands	r3, r1
 800056c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <gpio_init+0xe0>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	4611      	mov	r1, r2
 800057e:	4a02      	ldr	r2, [pc, #8]	; (8000588 <gpio_init+0xe0>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6093      	str	r3, [r2, #8]
 8000584:	e01c      	b.n	80005c0 <gpio_init+0x118>
 8000586:	bf00      	nop
 8000588:	40013c00 	.word	0x40013c00
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	2b06      	cmp	r3, #6
 8000592:	d115      	bne.n	80005c0 <gpio_init+0x118>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000594:	4b95      	ldr	r3, [pc, #596]	; (80007ec <gpio_init+0x344>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a91      	ldr	r2, [pc, #580]	; (80007ec <gpio_init+0x344>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005aa:	4b90      	ldr	r3, [pc, #576]	; (80007ec <gpio_init+0x344>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a8c      	ldr	r2, [pc, #560]	; (80007ec <gpio_init+0x344>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a89      	ldr	r2, [pc, #548]	; (80007f0 <gpio_init+0x348>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d101      	bne.n	80005d2 <gpio_init+0x12a>
			value = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOB)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a87      	ldr	r2, [pc, #540]	; (80007f4 <gpio_init+0x34c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d101      	bne.n	80005e0 <gpio_init+0x138>
			value = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOC)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a84      	ldr	r2, [pc, #528]	; (80007f8 <gpio_init+0x350>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <gpio_init+0x146>
			value = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOD)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a82      	ldr	r2, [pc, #520]	; (80007fc <gpio_init+0x354>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d101      	bne.n	80005fc <gpio_init+0x154>
			value = 3;
 80005f8:	2303      	movs	r3, #3
 80005fa:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOE)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a7f      	ldr	r2, [pc, #508]	; (8000800 <gpio_init+0x358>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d101      	bne.n	800060a <gpio_init+0x162>
			value = 4;
 8000606:	2304      	movs	r3, #4
 8000608:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOF)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a7d      	ldr	r2, [pc, #500]	; (8000804 <gpio_init+0x35c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d101      	bne.n	8000618 <gpio_init+0x170>
			value = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOG)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a7a      	ldr	r2, [pc, #488]	; (8000808 <gpio_init+0x360>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d101      	bne.n	8000626 <gpio_init+0x17e>
			value = 6;
 8000622:	2306      	movs	r3, #6
 8000624:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOH)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a78      	ldr	r2, [pc, #480]	; (800080c <gpio_init+0x364>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d101      	bne.n	8000634 <gpio_init+0x18c>
			value = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOI)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a75      	ldr	r2, [pc, #468]	; (8000810 <gpio_init+0x368>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d101      	bne.n	8000642 <gpio_init+0x19a>
			value = 8;
 800063e:	2308      	movs	r3, #8
 8000640:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 8000642:	4b74      	ldr	r3, [pc, #464]	; (8000814 <gpio_init+0x36c>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000646:	4a73      	ldr	r2, [pc, #460]	; (8000814 <gpio_init+0x36c>)
 8000648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064c:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	f003 0303 	and.w	r3, r3, #3
 8000660:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 8000662:	4a6d      	ldr	r2, [pc, #436]	; (8000818 <gpio_init+0x370>)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3302      	adds	r3, #2
 8000668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	69f9      	ldr	r1, [r7, #28]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	4967      	ldr	r1, [pc, #412]	; (8000818 <gpio_init+0x370>)
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3302      	adds	r3, #2
 8000680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 8000684:	4a64      	ldr	r2, [pc, #400]	; (8000818 <gpio_init+0x370>)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3302      	adds	r3, #2
 800068a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	69f9      	ldr	r1, [r7, #28]
 8000694:	fa01 f303 	lsl.w	r3, r1, r3
 8000698:	495f      	ldr	r1, [pc, #380]	; (8000818 <gpio_init+0x370>)
 800069a:	431a      	orrs	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3302      	adds	r3, #2
 80006a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	799b      	ldrb	r3, [r3, #6]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	2103      	movs	r1, #3
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	400a      	ands	r2, r1
 80006d2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6899      	ldr	r1, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	430a      	orrs	r2, r1
 80006e2:	609a      	str	r2, [r3, #8]
	temp= 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	79db      	ldrb	r3, [r3, #7]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	400a      	ands	r2, r1
 8000716:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68d9      	ldr	r1, [r3, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	69ba      	ldr	r2, [r7, #24]
 8000724:	430a      	orrs	r2, r1
 8000726:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7a1b      	ldrb	r3, [r3, #8]
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	4619      	mov	r1, r3
 8000748:	2301      	movs	r3, #1
 800074a:	408b      	lsls	r3, r1
 800074c:	43db      	mvns	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	400a      	ands	r2, r1
 8000756:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6859      	ldr	r1, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	430a      	orrs	r2, r1
 8000766:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	795b      	ldrb	r3, [r3, #5]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d135      	bne.n	80007e0 <gpio_init+0x338>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	7bfa      	ldrb	r2, [r7, #15]
 800078c:	3208      	adds	r2, #8
 800078e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	220f      	movs	r2, #15
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	4001      	ands	r1, r0
 80007a8:	3208      	adds	r2, #8
 80007aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	3208      	adds	r2, #8
 80007b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7a5b      	ldrb	r3, [r3, #9]
 80007be:	461a      	mov	r2, r3
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	4301      	orrs	r1, r0
 80007d2:	3208      	adds	r2, #8
 80007d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73bb      	strb	r3, [r7, #14]
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	73fb      	strb	r3, [r7, #15]
	}


}
 80007e0:	bf00      	nop
 80007e2:	3724      	adds	r7, #36	; 0x24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40013c00 	.word	0x40013c00
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020400 	.word	0x40020400
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	40021000 	.word	0x40021000
 8000804:	40021400 	.word	0x40021400
 8000808:	40021800 	.word	0x40021800
 800080c:	40021c00 	.word	0x40021c00
 8000810:	40022000 	.word	0x40022000
 8000814:	40023800 	.word	0x40023800
 8000818:	40013800 	.word	0x40013800

0800081c <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *GpioLed, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor_state)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	603b      	str	r3, [r7, #0]
	GpioLed->pGPIOx = gpio;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	601a      	str	r2, [r3, #0]
	GpioLed->GPIO_PinCfng.PinNumber = pin_number;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	711a      	strb	r2, [r3, #4]
	GpioLed->GPIO_PinCfng.PinMode = output_mode;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	715a      	strb	r2, [r3, #5]
	GpioLed->GPIO_PinCfng.PinSpeed = pin_speed;
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	719a      	strb	r2, [r3, #6]
	GpioLed->GPIO_PinCfng.PinOType = pin_out_mode;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	721a      	strb	r2, [r3, #8]
	GpioLed->GPIO_PinCfng.PinPuPdCtrl = internal_resistor_state;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	71da      	strb	r2, [r3, #7]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <gpio_read_pin>:

/******************************************************
				3.GPIO read\write functions
*******************************************************/
uint8_t gpio_read_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >>PinNumber) & 0x00000001); // shift n-th bit on the LSB and masking the rest
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691a      	ldr	r2, [r3, #16]
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	fa22 f303 	lsr.w	r3, r2, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
	return value;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <gpio_toggle_pin>:
void gpio_write_to_port(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = value;
}
void gpio_toggle_pin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin_number); //changing previous pin state
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	78fa      	ldrb	r2, [r7, #3]
 80008a2:	2101      	movs	r1, #1
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	405a      	eors	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	615a      	str	r2, [r3, #20]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4e0d      	ldr	r6, [pc, #52]	; (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	; (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1ba4      	subs	r4, r4, r6
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2500      	movs	r5, #0
 80008c8:	42a5      	cmp	r5, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4e0b      	ldr	r6, [pc, #44]	; (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	; (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 f818 	bl	8000904 <_init>
 80008d4:	1ba4      	subs	r4, r4, r6
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2500      	movs	r5, #0
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008e4:	4798      	blx	r3
 80008e6:	3501      	adds	r5, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008ee:	4798      	blx	r3
 80008f0:	3501      	adds	r5, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	0800091c 	.word	0x0800091c
 80008f8:	0800091c 	.word	0x0800091c
 80008fc:	0800091c 	.word	0x0800091c
 8000900:	08000920 	.word	0x08000920

08000904 <_init>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr

08000910 <_fini>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr
