
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a8c  08000a8c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a8c  08000a8c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a8c  08000a8c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a8c  08000a8c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a8c  08000a8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000a98  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000a98  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a7b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000292  00000000  00000000  00020aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00020d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  00020e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000013db  00000000  00000000  00020ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ada  00000000  00000000  000222ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005483  00000000  00000000  00022d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00028208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002b8  00000000  00000000  00028284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a74 	.word	0x08000a74

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000a74 	.word	0x08000a74

080001e8 <delay>:

#include "stm32f407xx.h"


void delay(int timeout)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < timeout ; i ++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <main>:


static int timeout = 2500000;

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b094      	sub	sp, #80	; 0x50
 8000214:	af04      	add	r7, sp, #16
	int cnt = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_Handle_t red_led;
	GPIO_Handle_t blue_led;
	//GPIO_Handle_t button;
	GPIO_Handle_t irq_pin;

	gpio_configure_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 800021a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800021e:	2300      	movs	r3, #0
 8000220:	9302      	str	r3, [sp, #8]
 8000222:	2300      	movs	r3, #0
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	2300      	movs	r3, #0
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2301      	movs	r3, #1
 800022c:	220c      	movs	r2, #12
 800022e:	493c      	ldr	r1, [pc, #240]	; (8000320 <main+0x110>)
 8000230:	f000 fb0a 	bl	8000848 <gpio_configure_pin>
	gpio_configure_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000234:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000238:	2300      	movs	r3, #0
 800023a:	9302      	str	r3, [sp, #8]
 800023c:	2300      	movs	r3, #0
 800023e:	9301      	str	r3, [sp, #4]
 8000240:	2300      	movs	r3, #0
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2301      	movs	r3, #1
 8000246:	220d      	movs	r2, #13
 8000248:	4935      	ldr	r1, [pc, #212]	; (8000320 <main+0x110>)
 800024a:	f000 fafd 	bl	8000848 <gpio_configure_pin>
	gpio_configure_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 800024e:	f107 0018 	add.w	r0, r7, #24
 8000252:	2300      	movs	r3, #0
 8000254:	9302      	str	r3, [sp, #8]
 8000256:	2300      	movs	r3, #0
 8000258:	9301      	str	r3, [sp, #4]
 800025a:	2300      	movs	r3, #0
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2301      	movs	r3, #1
 8000260:	220e      	movs	r2, #14
 8000262:	492f      	ldr	r1, [pc, #188]	; (8000320 <main+0x110>)
 8000264:	f000 faf0 	bl	8000848 <gpio_configure_pin>
	gpio_configure_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000268:	f107 000c 	add.w	r0, r7, #12
 800026c:	2300      	movs	r3, #0
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	2300      	movs	r3, #0
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2300      	movs	r3, #0
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	220f      	movs	r2, #15
 800027c:	4928      	ldr	r1, [pc, #160]	; (8000320 <main+0x110>)
 800027e:	f000 fae3 	bl	8000848 <gpio_configure_pin>
	*/

	//gpio_configure_pin(&button, GPIOA, 0, GPIO_MODE_IN, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);

	/*Configures GPIOA_0 pin the work in interrupt mode*/
	gpio_configure_pin(&irq_pin, GPIOA, 0, GPIO_MODE_IRQ_RT, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 8000282:	4638      	mov	r0, r7
 8000284:	2300      	movs	r3, #0
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2300      	movs	r3, #0
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2302      	movs	r3, #2
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2305      	movs	r3, #5
 8000292:	2200      	movs	r2, #0
 8000294:	4923      	ldr	r1, [pc, #140]	; (8000324 <main+0x114>)
 8000296:	f000 fad7 	bl	8000848 <gpio_configure_pin>
	//gpio_configure_pin(&irq_pin, GPIOD, 5, GPIO_MODE_IRQ_FT, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_PU);

	/*Enables the GPIO CLK*/
	GPIO_CLKCtrl(GPIOD,ENABLE);
 800029a:	2101      	movs	r1, #1
 800029c:	4820      	ldr	r0, [pc, #128]	; (8000320 <main+0x110>)
 800029e:	f000 f88d 	bl	80003bc <GPIO_CLKCtrl>
	GPIO_CLKCtrl(GPIOA,ENABLE);
 80002a2:	2101      	movs	r1, #1
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <main+0x114>)
 80002a6:	f000 f889 	bl	80003bc <GPIO_CLKCtrl>


	gpio_init(&green_led);
 80002aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f90a 	bl	80004c8 <gpio_init>
	gpio_init(&orange_led);
 80002b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f905 	bl	80004c8 <gpio_init>
	gpio_init(&red_led);
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f900 	bl	80004c8 <gpio_init>
	gpio_init(&blue_led);
 80002c8:	f107 030c 	add.w	r3, r7, #12
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8fb 	bl	80004c8 <gpio_init>
	gpio_init(&irq_pin);
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f8f7 	bl	80004c8 <gpio_init>
	//gpio_init(&button);

	gpio_irq_set(EXTI0);
 80002da:	2006      	movs	r0, #6
 80002dc:	f000 fb12 	bl	8000904 <gpio_irq_set>
	gpio_irq_priority(EXTI0, 15);
 80002e0:	210f      	movs	r1, #15
 80002e2:	2006      	movs	r0, #6
 80002e4:	f000 fb52 	bl	800098c <gpio_irq_priority>
	gpio_write_to_pin(GPIOD, 15, ENABLE);
 80002e8:	2201      	movs	r2, #1
 80002ea:	210f      	movs	r1, #15
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <main+0x110>)
 80002ee:	f000 facf 	bl	8000890 <gpio_write_to_pin>

	while(1)
	{
		delay(timeout);
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <main+0x118>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff76 	bl	80001e8 <delay>
		gpio_toggle_pin(GPIOD, 12+(cnt++)%4);
 80002fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000302:	425a      	negs	r2, r3
 8000304:	f003 0303 	and.w	r3, r3, #3
 8000308:	f002 0203 	and.w	r2, r2, #3
 800030c:	bf58      	it	pl
 800030e:	4253      	negpl	r3, r2
 8000310:	b2db      	uxtb	r3, r3
 8000312:	330c      	adds	r3, #12
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	4801      	ldr	r0, [pc, #4]	; (8000320 <main+0x110>)
 800031a:	f000 fade 	bl	80008da <gpio_toggle_pin>
		delay(timeout);
 800031e:	e7e8      	b.n	80002f2 <main+0xe2>
 8000320:	40020c00 	.word	0x40020c00
 8000324:	40020000 	.word	0x40020000
 8000328:	20000000 	.word	0x20000000

0800032c <EXTI0_IRQHandler>:

	return 0;
}

void EXTI0_IRQHandler(void)
	{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
		if (timeout < 200000)
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <EXTI0_IRQHandler+0x30>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <EXTI0_IRQHandler+0x34>)
 8000336:	4293      	cmp	r3, r2
 8000338:	dc03      	bgt.n	8000342 <EXTI0_IRQHandler+0x16>
		{
			timeout = 1000000;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <EXTI0_IRQHandler+0x30>)
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <EXTI0_IRQHandler+0x38>)
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	e006      	b.n	8000350 <EXTI0_IRQHandler+0x24>
		}
		else
		{
			timeout-=100000;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <EXTI0_IRQHandler+0x30>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 800034a:	3ba0      	subs	r3, #160	; 0xa0
 800034c:	4a03      	ldr	r2, [pc, #12]	; (800035c <EXTI0_IRQHandler+0x30>)
 800034e:	6013      	str	r3, [r2, #0]
		}
		gpio_irq_handler(0);
 8000350:	2000      	movs	r0, #0
 8000352:	f000 fb4b 	bl	80009ec <gpio_irq_handler>
	}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	00030d3f 	.word	0x00030d3f
 8000364:	000f4240 	.word	0x000f4240

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 fb49 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff39 	bl	8000210 <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003ac:	08000a94 	.word	0x08000a94
  ldr r2, =_sbss
 80003b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b4:	20000020 	.word	0x20000020

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <GPIO_CLKCtrl>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void GPIO_CLKCtrl(GPIO_RegDef_t *pGPIOx,uint8_t action)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	if (action == ENABLE)
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d161      	bne.n	8000492 <GPIO_CLKCtrl+0xd6>
	{
		if (pGPIOx == GPIOA)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <GPIO_CLKCtrl+0xe4>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_CLKCtrl+0x28>
		{
			GPIOA_CLK_EN();
 80003d6:	4b33      	ldr	r3, [pc, #204]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a32      	ldr	r2, [pc, #200]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{

	}

}
 80003e2:	e056      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOB)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a30      	ldr	r2, [pc, #192]	; (80004a8 <GPIO_CLKCtrl+0xec>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_CLKCtrl+0x3e>
			GPIOB_CLK_EN();
 80003ec:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a2c      	ldr	r2, [pc, #176]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e04b      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if (pGPIOx == GPIOC)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a2b      	ldr	r2, [pc, #172]	; (80004ac <GPIO_CLKCtrl+0xf0>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_CLKCtrl+0x54>
			GPIOC_CLK_EN();
 8000402:	4b28      	ldr	r3, [pc, #160]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a27      	ldr	r2, [pc, #156]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e040      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOD)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a27      	ldr	r2, [pc, #156]	; (80004b0 <GPIO_CLKCtrl+0xf4>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_CLKCtrl+0x6a>
			GPIOD_CLK_EN();
 8000418:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e035      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOE)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <GPIO_CLKCtrl+0xf8>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_CLKCtrl+0x80>
			GPIOE_CLK_EN();
 800042e:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e02a      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOF)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <GPIO_CLKCtrl+0xfc>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_CLKCtrl+0x96>
			GPIOF_CLK_EN();
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e01f      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOG)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a19      	ldr	r2, [pc, #100]	; (80004bc <GPIO_CLKCtrl+0x100>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_CLKCtrl+0xac>
			GPIOG_CLK_EN();
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e014      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOH)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <GPIO_CLKCtrl+0x104>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_CLKCtrl+0xc2>
			GPIOH_CLK_EN();
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e009      	b.n	8000492 <GPIO_CLKCtrl+0xd6>
		else if(pGPIOx == GPIOI)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <GPIO_CLKCtrl+0x108>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d105      	bne.n	8000492 <GPIO_CLKCtrl+0xd6>
			GPIOI_CLK_EN();
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <GPIO_CLKCtrl+0xe8>)
 800048c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021400 	.word	0x40021400
 80004bc:	40021800 	.word	0x40021800
 80004c0:	40021c00 	.word	0x40021c00
 80004c4:	40022000 	.word	0x40022000

080004c8 <gpio_init>:

/******************************************************
				2.GPIO de/init
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d821      	bhi.n	8000520 <gpio_init+0x58>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2303      	movs	r3, #3
 80004fc:	408b      	lsls	r3, r1
 80004fe:	43db      	mvns	r3, r3
 8000500:	4619      	mov	r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	400a      	ands	r2, r1
 8000508:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	69ba      	ldr	r2, [r7, #24]
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]
		temp= 0;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
 800051e:	e0e9      	b.n	80006f4 <gpio_init+0x22c>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000520:	4b4f      	ldr	r3, [pc, #316]	; (8000660 <gpio_init+0x198>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	4611      	mov	r1, r2
 8000530:	4a4b      	ldr	r2, [pc, #300]	; (8000660 <gpio_init+0x198>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d117      	bne.n	800056e <gpio_init+0xa6>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800053e:	4b48      	ldr	r3, [pc, #288]	; (8000660 <gpio_init+0x198>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	43d2      	mvns	r2, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a43      	ldr	r2, [pc, #268]	; (8000660 <gpio_init+0x198>)
 8000552:	400b      	ands	r3, r1
 8000554:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000556:	4b42      	ldr	r3, [pc, #264]	; (8000660 <gpio_init+0x198>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a3e      	ldr	r2, [pc, #248]	; (8000660 <gpio_init+0x198>)
 8000568:	430b      	orrs	r3, r1
 800056a:	60d3      	str	r3, [r2, #12]
 800056c:	e035      	b.n	80005da <gpio_init+0x112>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d117      	bne.n	80005a6 <gpio_init+0xde>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000576:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <gpio_init+0x198>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	43d2      	mvns	r2, r2
 8000586:	4611      	mov	r1, r2
 8000588:	4a35      	ldr	r2, [pc, #212]	; (8000660 <gpio_init+0x198>)
 800058a:	400b      	ands	r3, r1
 800058c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800058e:	4b34      	ldr	r3, [pc, #208]	; (8000660 <gpio_init+0x198>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	4611      	mov	r1, r2
 800059e:	4a30      	ldr	r2, [pc, #192]	; (8000660 <gpio_init+0x198>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	6093      	str	r3, [r2, #8]
 80005a4:	e019      	b.n	80005da <gpio_init+0x112>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d115      	bne.n	80005da <gpio_init+0x112>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <gpio_init+0x198>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	4a28      	ldr	r2, [pc, #160]	; (8000660 <gpio_init+0x198>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <gpio_init+0x198>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <gpio_init+0x198>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <gpio_init+0x19c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d102      	bne.n	80005ee <gpio_init+0x126>
			value = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e051      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <gpio_init+0x1a0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d102      	bne.n	80005fe <gpio_init+0x136>
			value = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	e049      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1a      	ldr	r2, [pc, #104]	; (800066c <gpio_init+0x1a4>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d102      	bne.n	800060e <gpio_init+0x146>
			value = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	e041      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a17      	ldr	r2, [pc, #92]	; (8000670 <gpio_init+0x1a8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d102      	bne.n	800061e <gpio_init+0x156>
			value = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	e039      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <gpio_init+0x1ac>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d102      	bne.n	800062e <gpio_init+0x166>
			value = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	e031      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <gpio_init+0x1b0>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d102      	bne.n	800063e <gpio_init+0x176>
			value = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	61fb      	str	r3, [r7, #28]
 800063c:	e029      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <gpio_init+0x1b4>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d102      	bne.n	800064e <gpio_init+0x186>
			value = 6;
 8000648:	2306      	movs	r3, #6
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	e021      	b.n	8000692 <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <gpio_init+0x1b8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d115      	bne.n	8000684 <gpio_init+0x1bc>
			value = 7;
 8000658:	2307      	movs	r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
 800065c:	e019      	b.n	8000692 <gpio_init+0x1ca>
 800065e:	bf00      	nop
 8000660:	40013c00 	.word	0x40013c00
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400
 800066c:	40020800 	.word	0x40020800
 8000670:	40020c00 	.word	0x40020c00
 8000674:	40021000 	.word	0x40021000
 8000678:	40021400 	.word	0x40021400
 800067c:	40021800 	.word	0x40021800
 8000680:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a6c      	ldr	r2, [pc, #432]	; (800083c <gpio_init+0x374>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <gpio_init+0x1ca>
			value = 8;
 800068e:	2308      	movs	r3, #8
 8000690:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 8000692:	4b6b      	ldr	r3, [pc, #428]	; (8000840 <gpio_init+0x378>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	4a6a      	ldr	r2, [pc, #424]	; (8000840 <gpio_init+0x378>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 80006b2:	4a64      	ldr	r2, [pc, #400]	; (8000844 <gpio_init+0x37c>)
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3302      	adds	r3, #2
 80006b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	69f9      	ldr	r1, [r7, #28]
 80006c2:	fa01 f303 	lsl.w	r3, r1, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	495e      	ldr	r1, [pc, #376]	; (8000844 <gpio_init+0x37c>)
 80006ca:	401a      	ands	r2, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	3302      	adds	r3, #2
 80006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 80006d4:	4a5b      	ldr	r2, [pc, #364]	; (8000844 <gpio_init+0x37c>)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3302      	adds	r3, #2
 80006da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	69f9      	ldr	r1, [r7, #28]
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	4956      	ldr	r1, [pc, #344]	; (8000844 <gpio_init+0x37c>)
 80006ea:	431a      	orrs	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	3302      	adds	r3, #2
 80006f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	799b      	ldrb	r3, [r3, #6]
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	2103      	movs	r1, #3
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	43db      	mvns	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	400a      	ands	r2, r1
 8000722:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6899      	ldr	r1, [r3, #8]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	430a      	orrs	r2, r1
 8000732:	609a      	str	r2, [r3, #8]
	temp= 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	79db      	ldrb	r3, [r3, #7]
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	2103      	movs	r1, #3
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	43db      	mvns	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d9      	ldr	r1, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	69ba      	ldr	r2, [r7, #24]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	461a      	mov	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	2301      	movs	r3, #1
 800079a:	408b      	lsls	r3, r1
 800079c:	43db      	mvns	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	400a      	ands	r2, r1
 80007a6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	605a      	str	r2, [r3, #4]
	temp= 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d135      	bne.n	8000830 <gpio_init+0x368>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	3208      	adds	r2, #8
 80007de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	220f      	movs	r2, #15
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	43db      	mvns	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	4001      	ands	r1, r0
 80007f8:	3208      	adds	r2, #8
 80007fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	3208      	adds	r2, #8
 8000806:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7a5b      	ldrb	r3, [r3, #9]
 800080e:	461a      	mov	r2, r3
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	4618      	mov	r0, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	4301      	orrs	r1, r0
 8000822:	3208      	adds	r2, #8
 8000824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	73bb      	strb	r3, [r7, #14]
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	73fb      	strb	r3, [r7, #15]
	}


}
 8000830:	bf00      	nop
 8000832:	3724      	adds	r7, #36	; 0x24
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40022000 	.word	0x40022000
 8000840:	40023800 	.word	0x40023800
 8000844:	40013800 	.word	0x40013800

08000848 <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *GpioLed, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor_state)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	603b      	str	r3, [r7, #0]
	GpioLed->pGPIOx = gpio;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	601a      	str	r2, [r3, #0]
	GpioLed->GPIO_PinCfng.PinNumber = pin_number;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	711a      	strb	r2, [r3, #4]
	GpioLed->GPIO_PinCfng.PinMode = output_mode;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	715a      	strb	r2, [r3, #5]
	GpioLed->GPIO_PinCfng.PinSpeed = pin_speed;
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	719a      	strb	r2, [r3, #6]
	GpioLed->GPIO_PinCfng.PinOType = pin_out_mode;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	721a      	strb	r2, [r3, #8]
	GpioLed->GPIO_PinCfng.PinPuPdCtrl = internal_resistor_state;
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	71da      	strb	r2, [r3, #7]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <gpio_write_to_pin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR; // returns the entire register
	return value;
}
void gpio_write_to_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
 800089c:	4613      	mov	r3, r2
 800089e:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 80008a0:	78bb      	ldrb	r3, [r7, #2]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d109      	bne.n	80008ba <gpio_write_to_pin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	78fa      	ldrb	r2, [r7, #3]
 80008ac:	2101      	movs	r1, #1
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	431a      	orrs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR &= ~ (0x1 << PinNumber);
	pGPIOx->ODR |= (value << PinNumber);
	 */


}
 80008b8:	e009      	b.n	80008ce <gpio_write_to_pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	78fa      	ldrb	r2, [r7, #3]
 80008c0:	2101      	movs	r1, #1
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	43d2      	mvns	r2, r2
 80008c8:	401a      	ands	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	615a      	str	r2, [r3, #20]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <gpio_toggle_pin>:
void gpio_write_to_port(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = value;
}
void gpio_toggle_pin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin_number); //changing previous pin state
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	78fa      	ldrb	r2, [r7, #3]
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	405a      	eors	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	615a      	str	r2, [r3, #20]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <gpio_irq_set>:

/******************************************************
				4.GPIO Interrupt request functions
*******************************************************/
void gpio_irq_set(uint8_t IRQNumber)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	if (IRQNumber < 32)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b1f      	cmp	r3, #31
 8000912:	d80a      	bhi.n	800092a <gpio_irq_set+0x26>
		{*NVIC_ISER0 |= (1<<IRQNumber);}
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <gpio_irq_set+0x7c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	2101      	movs	r1, #1
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <gpio_irq_set+0x7c>)
 8000924:	430b      	orrs	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
}
 8000928:	e024      	b.n	8000974 <gpio_irq_set+0x70>
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b20      	cmp	r3, #32
 800092e:	d90f      	bls.n	8000950 <gpio_irq_set+0x4c>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b3f      	cmp	r3, #63	; 0x3f
 8000934:	d80c      	bhi.n	8000950 <gpio_irq_set+0x4c>
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <gpio_irq_set+0x80>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	f002 021f 	and.w	r2, r2, #31
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4611      	mov	r1, r2
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <gpio_irq_set+0x80>)
 800094a:	430b      	orrs	r3, r1
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	e011      	b.n	8000974 <gpio_irq_set+0x70>
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b40      	cmp	r3, #64	; 0x40
 8000954:	d90e      	bls.n	8000974 <gpio_irq_set+0x70>
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b5f      	cmp	r3, #95	; 0x5f
 800095a:	d80b      	bhi.n	8000974 <gpio_irq_set+0x70>
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <gpio_irq_set+0x84>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	f002 021f 	and.w	r2, r2, #31
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <gpio_irq_set+0x84>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000e104 	.word	0xe000e104
 8000988:	e000e108 	.word	0xe000e108

0800098c <gpio_irq_priority>:
		{*NVIC_ICER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ICER2 |= (1<<IRQNumber%32); }
}
void gpio_irq_priority(uint8_t IRQNumber, uint8_t IRQPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber/4;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	73fb      	strb	r3, [r7, #15]
	uint8_t	iprx_section = IRQNumber%4;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - PRIORITY_NOT_IMPLEMENTED_BITS);
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	3304      	adds	r3, #4
 80009b2:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE + iprx) |= (IRQPriority << iprx_section) << (shift_amount);
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009bc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	79b9      	ldrb	r1, [r7, #6]
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	4099      	lsls	r1, r3
 80009c8:	7b7b      	ldrb	r3, [r7, #13]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009d8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009dc:	430a      	orrs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <gpio_irq_handler>:
void gpio_irq_handler(uint8_t PinNumber)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1 << PinNumber))
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <gpio_irq_handler+0x3c>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	2101      	movs	r1, #1
 80009fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d009      	beq.n	8000a1c <gpio_irq_handler+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <gpio_irq_handler+0x3c>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <gpio_irq_handler+0x3c>)
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6153      	str	r3, [r2, #20]
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40013c00 	.word	0x40013c00

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4e0d      	ldr	r6, [pc, #52]	; (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	; (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1ba4      	subs	r4, r4, r6
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2500      	movs	r5, #0
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4e0b      	ldr	r6, [pc, #44]	; (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	; (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 f818 	bl	8000a74 <_init>
 8000a44:	1ba4      	subs	r4, r4, r6
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2500      	movs	r5, #0
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a54:	4798      	blx	r3
 8000a56:	3501      	adds	r5, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a5e:	4798      	blx	r3
 8000a60:	3501      	adds	r5, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08000a8c 	.word	0x08000a8c
 8000a68:	08000a8c 	.word	0x08000a8c
 8000a6c:	08000a8c 	.word	0x08000a8c
 8000a70:	08000a90 	.word	0x08000a90

08000a74 <_init>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr

08000a80 <_fini>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr
