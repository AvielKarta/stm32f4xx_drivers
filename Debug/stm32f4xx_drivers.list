
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ea4  08000ea4  00010eac  2**0
                  CONTENTS
  4 .ARM          00000000  08000ea4  08000ea4  00010eac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ea4  08000eac  00010eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea8  08000ea8  00010ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000eac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000eac  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010eac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019e4  00000000  00000000  00010edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004c1  00000000  00000000  000128c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00012d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00012ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f20  00000000  00000000  00012fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000119d  00000000  00000000  00014ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008c67  00000000  00000000  0001607d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ece4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000430  00000000  00000000  0001ed60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e74 	.word	0x08000e74

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000e74 	.word	0x08000e74

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <gpio_driver_function>:
{
	for(uint32_t i = 0 ; i < timeout ; i ++);
}

void gpio_driver_function(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af04      	add	r7, sp, #16
	GPIO_Handle_t green_led, orange_led, red_led, blue_led, irq_pin;

	gpio_configure_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 80001fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000202:	2300      	movs	r3, #0
 8000204:	9303      	str	r3, [sp, #12]
 8000206:	2300      	movs	r3, #0
 8000208:	9302      	str	r3, [sp, #8]
 800020a:	2300      	movs	r3, #0
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	2300      	movs	r3, #0
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	220c      	movs	r2, #12
 8000216:	4930      	ldr	r1, [pc, #192]	; (80002d8 <gpio_driver_function+0xe0>)
 8000218:	f000 fbf4 	bl	8000a04 <gpio_configure_pin>
	gpio_configure_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 800021c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000220:	2300      	movs	r3, #0
 8000222:	9303      	str	r3, [sp, #12]
 8000224:	2300      	movs	r3, #0
 8000226:	9302      	str	r3, [sp, #8]
 8000228:	2300      	movs	r3, #0
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2300      	movs	r3, #0
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2301      	movs	r3, #1
 8000232:	220d      	movs	r2, #13
 8000234:	4928      	ldr	r1, [pc, #160]	; (80002d8 <gpio_driver_function+0xe0>)
 8000236:	f000 fbe5 	bl	8000a04 <gpio_configure_pin>
	gpio_configure_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 800023a:	f107 001c 	add.w	r0, r7, #28
 800023e:	2300      	movs	r3, #0
 8000240:	9303      	str	r3, [sp, #12]
 8000242:	2300      	movs	r3, #0
 8000244:	9302      	str	r3, [sp, #8]
 8000246:	2300      	movs	r3, #0
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	2300      	movs	r3, #0
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2301      	movs	r3, #1
 8000250:	220e      	movs	r2, #14
 8000252:	4921      	ldr	r1, [pc, #132]	; (80002d8 <gpio_driver_function+0xe0>)
 8000254:	f000 fbd6 	bl	8000a04 <gpio_configure_pin>
	gpio_configure_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 8000258:	f107 0010 	add.w	r0, r7, #16
 800025c:	2300      	movs	r3, #0
 800025e:	9303      	str	r3, [sp, #12]
 8000260:	2300      	movs	r3, #0
 8000262:	9302      	str	r3, [sp, #8]
 8000264:	2300      	movs	r3, #0
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	2300      	movs	r3, #0
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2301      	movs	r3, #1
 800026e:	220f      	movs	r2, #15
 8000270:	4919      	ldr	r1, [pc, #100]	; (80002d8 <gpio_driver_function+0xe0>)
 8000272:	f000 fbc7 	bl	8000a04 <gpio_configure_pin>

	gpio_init(&green_led);
 8000276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f9fe 	bl	800067c <gpio_init>
	gpio_init(&orange_led);
 8000280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f9f9 	bl	800067c <gpio_init>
	gpio_init(&red_led);
 800028a:	f107 031c 	add.w	r3, r7, #28
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f9f4 	bl	800067c <gpio_init>
	gpio_init(&blue_led);
 8000294:	f107 0310 	add.w	r3, r7, #16
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f9ef 	bl	800067c <gpio_init>

	gpio_configure_pin(&irq_pin, GPIOA, 0, GPIO_MODE_IRQ_RT, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);		/*Configures GPIOA_0 pin the work in interrupt mode*/
 800029e:	1d38      	adds	r0, r7, #4
 80002a0:	2300      	movs	r3, #0
 80002a2:	9303      	str	r3, [sp, #12]
 80002a4:	2300      	movs	r3, #0
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	2300      	movs	r3, #0
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	2302      	movs	r3, #2
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2305      	movs	r3, #5
 80002b2:	2200      	movs	r2, #0
 80002b4:	4909      	ldr	r1, [pc, #36]	; (80002dc <gpio_driver_function+0xe4>)
 80002b6:	f000 fba5 	bl	8000a04 <gpio_configure_pin>
	gpio_init(&irq_pin);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f9dd 	bl	800067c <gpio_init>

	/*Enable and configure interrupt line 0*/

	gpio_irq_set(EXTI0);
 80002c2:	2006      	movs	r0, #6
 80002c4:	f000 fbc2 	bl	8000a4c <gpio_irq_set>
	gpio_irq_priority(EXTI0, 15);
 80002c8:	210f      	movs	r1, #15
 80002ca:	2006      	movs	r0, #6
 80002cc:	f000 fc02 	bl	8000ad4 <gpio_irq_priority>


}
 80002d0:	bf00      	nop
 80002d2:	3740      	adds	r7, #64	; 0x40
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40020c00 	.word	0x40020c00
 80002dc:	40020000 	.word	0x40020000

080002e0 <spi_driver_function>:
void spi_driver_function(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08c      	sub	sp, #48	; 0x30
 80002e4:	af06      	add	r7, sp, #24


	GPIO_Handle_t spi_pins;
	gpio_configure_pin(&spi_pins, GPIOB, 13, GPIO_MODE_ALTFN, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 5);/*Enables CLK*/
 80002e6:	f107 000c 	add.w	r0, r7, #12
 80002ea:	2305      	movs	r3, #5
 80002ec:	9303      	str	r3, [sp, #12]
 80002ee:	2300      	movs	r3, #0
 80002f0:	9302      	str	r3, [sp, #8]
 80002f2:	2300      	movs	r3, #0
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	2302      	movs	r3, #2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2302      	movs	r3, #2
 80002fc:	220d      	movs	r2, #13
 80002fe:	4918      	ldr	r1, [pc, #96]	; (8000360 <spi_driver_function+0x80>)
 8000300:	f000 fb80 	bl	8000a04 <gpio_configure_pin>
	gpio_init(&spi_pins);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f9b7 	bl	800067c <gpio_init>
	spi_pins.GPIO_PinCfng.PinNumber = 14;/*Enables MISO*/
 800030e:	230e      	movs	r3, #14
 8000310:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f9b0 	bl	800067c <gpio_init>
	spi_pins.GPIO_PinCfng.PinNumber = 15;/*Enables MOSI*/
 800031c:	230f      	movs	r3, #15
 800031e:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f9a9 	bl	800067c <gpio_init>

	SPI_Handle_t spi2_handler;

	if (DEVICE==MASTER)
	{
		spi_configure_pin(&spi2_handler, SPI2, SPI_CLK_PHASE_0, SPI_CLK_IDLE_0, SPI_MASTER, SPI_BR_CLK_DIV_2, SPI_SSM_EN, SPI_SSI_EN, SPI_DFF_8_BIT, SPI_FULL_DUPLEX);/*Configures parameters for SPI2*/
 800032a:	4638      	mov	r0, r7
 800032c:	2301      	movs	r3, #1
 800032e:	9305      	str	r3, [sp, #20]
 8000330:	2300      	movs	r3, #0
 8000332:	9304      	str	r3, [sp, #16]
 8000334:	2301      	movs	r3, #1
 8000336:	9303      	str	r3, [sp, #12]
 8000338:	2301      	movs	r3, #1
 800033a:	9302      	str	r3, [sp, #8]
 800033c:	2300      	movs	r3, #0
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	2301      	movs	r3, #1
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2300      	movs	r3, #0
 8000346:	2200      	movs	r2, #0
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <spi_driver_function+0x84>)
 800034a:	f000 fc8b 	bl	8000c64 <spi_configure_pin>
		spi_init(&spi2_handler);
 800034e:	463b      	mov	r3, r7
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fcb7 	bl	8000cc4 <spi_init>
	else
	{
		spi_configure_pin(&spi2_handler, SPI2, SPI_CLK_PHASE_0, SPI_CLK_IDLE_0, SPI_SLAVE, SPI_BR_CLK_DIV_2, SPI_SSM_EN, SPI_SSI_DIS, SPI_DFF_8_BIT, SPI_FULL_DUPLEX);/*Configures parameters for SPI2*/
		spi_init(&spi2_handler);
	}
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40020400 	.word	0x40020400
 8000364:	40003800 	.word	0x40003800

08000368 <main>:

int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	gpio_driver_function();
 800036e:	f7ff ff43 	bl	80001f8 <gpio_driver_function>
	spi_driver_function();
 8000372:	f7ff ffb5 	bl	80002e0 <spi_driver_function>
	spi_ssi_enable(SPI2, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <main+0x20>)
 800037a:	f000 fd08 	bl	8000d8e <spi_ssi_enable>
	spi_enable(SPI2, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	4801      	ldr	r0, [pc, #4]	; (8000388 <main+0x20>)
 8000382:	f000 fceb 	bl	8000d5c <spi_enable>

	if (DEVICE == MASTER)
	{
		while(1)
 8000386:	e7fe      	b.n	8000386 <main+0x1e>
 8000388:	40003800 	.word	0x40003800

0800038c <EXTI0_IRQHandler>:
		}
	return 0;
}

void EXTI0_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	if (MASTER)
	{
		char spi_tx_data[7];
		if(led_cnt%4 == 0)
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <EXTI0_IRQHandler+0xb4>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f003 0303 	and.w	r3, r3, #3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d107      	bne.n	80003ae <EXTI0_IRQHandler+0x22>
		{
			strcpy(spi_tx_data, "green");
 800039e:	463b      	mov	r3, r7
 80003a0:	4a28      	ldr	r2, [pc, #160]	; (8000444 <EXTI0_IRQHandler+0xb8>)
 80003a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a6:	6018      	str	r0, [r3, #0]
 80003a8:	3304      	adds	r3, #4
 80003aa:	8019      	strh	r1, [r3, #0]
 80003ac:	e036      	b.n	800041c <EXTI0_IRQHandler+0x90>
		}
		else if(led_cnt%4 == 1)
 80003ae:	4b24      	ldr	r3, [pc, #144]	; (8000440 <EXTI0_IRQHandler+0xb4>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	425a      	negs	r2, r3
 80003b4:	f003 0303 	and.w	r3, r3, #3
 80003b8:	f002 0203 	and.w	r2, r2, #3
 80003bc:	bf58      	it	pl
 80003be:	4253      	negpl	r3, r2
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d10a      	bne.n	80003da <EXTI0_IRQHandler+0x4e>
		{
			strcpy(spi_tx_data,"orange");
 80003c4:	4a20      	ldr	r2, [pc, #128]	; (8000448 <EXTI0_IRQHandler+0xbc>)
 80003c6:	463b      	mov	r3, r7
 80003c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003cc:	6018      	str	r0, [r3, #0]
 80003ce:	3304      	adds	r3, #4
 80003d0:	8019      	strh	r1, [r3, #0]
 80003d2:	3302      	adds	r3, #2
 80003d4:	0c0a      	lsrs	r2, r1, #16
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e020      	b.n	800041c <EXTI0_IRQHandler+0x90>
		}
		else if(led_cnt%4 == 2)
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <EXTI0_IRQHandler+0xb4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	425a      	negs	r2, r3
 80003e0:	f003 0303 	and.w	r3, r3, #3
 80003e4:	f002 0203 	and.w	r2, r2, #3
 80003e8:	bf58      	it	pl
 80003ea:	4253      	negpl	r3, r2
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d103      	bne.n	80003f8 <EXTI0_IRQHandler+0x6c>
		{
			strcpy(spi_tx_data,"red");
 80003f0:	463b      	mov	r3, r7
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <EXTI0_IRQHandler+0xc0>)
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	e011      	b.n	800041c <EXTI0_IRQHandler+0x90>
		}
		else if(led_cnt%4 == 3)
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <EXTI0_IRQHandler+0xb4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	425a      	negs	r2, r3
 80003fe:	f003 0303 	and.w	r3, r3, #3
 8000402:	f002 0203 	and.w	r2, r2, #3
 8000406:	bf58      	it	pl
 8000408:	4253      	negpl	r3, r2
 800040a:	2b03      	cmp	r3, #3
 800040c:	d106      	bne.n	800041c <EXTI0_IRQHandler+0x90>
		{
			strcpy(spi_tx_data,"blue");
 800040e:	463b      	mov	r3, r7
 8000410:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <EXTI0_IRQHandler+0xc4>)
 8000412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000416:	6018      	str	r0, [r3, #0]
 8000418:	3304      	adds	r3, #4
 800041a:	7019      	strb	r1, [r3, #0]
		}
		spi_send(SPI2, (uint8_t*)spi_tx_data, strlen(spi_tx_data));
 800041c:	463b      	mov	r3, r7
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fee2 	bl	80001e8 <strlen>
 8000424:	4602      	mov	r2, r0
 8000426:	463b      	mov	r3, r7
 8000428:	4619      	mov	r1, r3
 800042a:	480a      	ldr	r0, [pc, #40]	; (8000454 <EXTI0_IRQHandler+0xc8>)
 800042c:	f000 fcc8 	bl	8000dc0 <spi_send>
		gpio_irq_handler(0);
 8000430:	2000      	movs	r0, #0
 8000432:	f000 fb7f 	bl	8000b34 <gpio_irq_handler>
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2000001c 	.word	0x2000001c
 8000444:	08000e8c 	.word	0x08000e8c
 8000448:	08000e94 	.word	0x08000e94
 800044c:	00646572 	.word	0x00646572
 8000450:	08000e9c 	.word	0x08000e9c
 8000454:	40003800 	.word	0x40003800

08000458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800045c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000486:	f000 fcd1 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff ff6d 	bl	8000368 <main>

0800048e <LoopForever>:

LoopForever:
    b LoopForever
 800048e:	e7fe      	b.n	800048e <LoopForever>
  ldr   r0, =_estack
 8000490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800049c:	08000eac 	.word	0x08000eac
  ldr r2, =_sbss
 80004a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a4:	20000020 	.word	0x20000020

080004a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC_IRQHandler>
	...

080004ac <gpio_clk_control>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void gpio_clk_control(GPIO_RegDef_t *pGPIOx,uint8_t enable)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]
	if (enable)
 80004b8:	78fb      	ldrb	r3, [r7, #3]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d062      	beq.n	8000584 <gpio_clk_control+0xd8>
	{
		if (pGPIOx == GPIOA)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a64      	ldr	r2, [pc, #400]	; (8000654 <gpio_clk_control+0x1a8>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <gpio_clk_control+0x28>
		{
			GPIOA_CLK_EN();
 80004c6:	4b64      	ldr	r3, [pc, #400]	; (8000658 <gpio_clk_control+0x1ac>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a63      	ldr	r2, [pc, #396]	; (8000658 <gpio_clk_control+0x1ac>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 80004d2:	e0b9      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a61      	ldr	r2, [pc, #388]	; (800065c <gpio_clk_control+0x1b0>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <gpio_clk_control+0x3e>
			GPIOB_CLK_EN();
 80004dc:	4b5e      	ldr	r3, [pc, #376]	; (8000658 <gpio_clk_control+0x1ac>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a5d      	ldr	r2, [pc, #372]	; (8000658 <gpio_clk_control+0x1ac>)
 80004e2:	f043 0302 	orr.w	r3, r3, #2
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e0ae      	b.n	8000648 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a5c      	ldr	r2, [pc, #368]	; (8000660 <gpio_clk_control+0x1b4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <gpio_clk_control+0x54>
			GPIOC_CLK_EN();
 80004f2:	4b59      	ldr	r3, [pc, #356]	; (8000658 <gpio_clk_control+0x1ac>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a58      	ldr	r2, [pc, #352]	; (8000658 <gpio_clk_control+0x1ac>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e0a3      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a58      	ldr	r2, [pc, #352]	; (8000664 <gpio_clk_control+0x1b8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <gpio_clk_control+0x6a>
			GPIOD_CLK_EN();
 8000508:	4b53      	ldr	r3, [pc, #332]	; (8000658 <gpio_clk_control+0x1ac>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a52      	ldr	r2, [pc, #328]	; (8000658 <gpio_clk_control+0x1ac>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000514:	e098      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a53      	ldr	r2, [pc, #332]	; (8000668 <gpio_clk_control+0x1bc>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <gpio_clk_control+0x80>
			GPIOE_CLK_EN();
 800051e:	4b4e      	ldr	r3, [pc, #312]	; (8000658 <gpio_clk_control+0x1ac>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a4d      	ldr	r2, [pc, #308]	; (8000658 <gpio_clk_control+0x1ac>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052a:	e08d      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a4f      	ldr	r2, [pc, #316]	; (800066c <gpio_clk_control+0x1c0>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <gpio_clk_control+0x96>
			GPIOF_CLK_EN();
 8000534:	4b48      	ldr	r3, [pc, #288]	; (8000658 <gpio_clk_control+0x1ac>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a47      	ldr	r2, [pc, #284]	; (8000658 <gpio_clk_control+0x1ac>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000540:	e082      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a4a      	ldr	r2, [pc, #296]	; (8000670 <gpio_clk_control+0x1c4>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <gpio_clk_control+0xac>
			GPIOG_CLK_EN();
 800054a:	4b43      	ldr	r3, [pc, #268]	; (8000658 <gpio_clk_control+0x1ac>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a42      	ldr	r2, [pc, #264]	; (8000658 <gpio_clk_control+0x1ac>)
 8000550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000556:	e077      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a46      	ldr	r2, [pc, #280]	; (8000674 <gpio_clk_control+0x1c8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <gpio_clk_control+0xc2>
			GPIOH_CLK_EN();
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <gpio_clk_control+0x1ac>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a3c      	ldr	r2, [pc, #240]	; (8000658 <gpio_clk_control+0x1ac>)
 8000566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056c:	e06c      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a41      	ldr	r2, [pc, #260]	; (8000678 <gpio_clk_control+0x1cc>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d168      	bne.n	8000648 <gpio_clk_control+0x19c>
			GPIOI_CLK_EN();
 8000576:	4b38      	ldr	r3, [pc, #224]	; (8000658 <gpio_clk_control+0x1ac>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a37      	ldr	r2, [pc, #220]	; (8000658 <gpio_clk_control+0x1ac>)
 800057c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000582:	e061      	b.n	8000648 <gpio_clk_control+0x19c>
		if (pGPIOx == GPIOA)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a33      	ldr	r2, [pc, #204]	; (8000654 <gpio_clk_control+0x1a8>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <gpio_clk_control+0xee>
			GPIOA_CLK_DI();
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <gpio_clk_control+0x1ac>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a31      	ldr	r2, [pc, #196]	; (8000658 <gpio_clk_control+0x1ac>)
 8000592:	f023 0301 	bic.w	r3, r3, #1
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000598:	e056      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <gpio_clk_control+0x1b0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <gpio_clk_control+0x104>
			GPIOB_CLK_DI();
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <gpio_clk_control+0x1ac>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <gpio_clk_control+0x1ac>)
 80005a8:	f023 0302 	bic.w	r3, r3, #2
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ae:	e04b      	b.n	8000648 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <gpio_clk_control+0x1b4>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d106      	bne.n	80005c6 <gpio_clk_control+0x11a>
			GPIOC_CLK_DI();
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <gpio_clk_control+0x1ac>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <gpio_clk_control+0x1ac>)
 80005be:	f023 0304 	bic.w	r3, r3, #4
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	e040      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <gpio_clk_control+0x1b8>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d106      	bne.n	80005dc <gpio_clk_control+0x130>
			GPIOD_CLK_DI();
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <gpio_clk_control+0x1ac>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a21      	ldr	r2, [pc, #132]	; (8000658 <gpio_clk_control+0x1ac>)
 80005d4:	f023 0308 	bic.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005da:	e035      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a22      	ldr	r2, [pc, #136]	; (8000668 <gpio_clk_control+0x1bc>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <gpio_clk_control+0x146>
			GPIOE_CLK_DI();
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <gpio_clk_control+0x1ac>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <gpio_clk_control+0x1ac>)
 80005ea:	f023 0310 	bic.w	r3, r3, #16
 80005ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f0:	e02a      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a1d      	ldr	r2, [pc, #116]	; (800066c <gpio_clk_control+0x1c0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <gpio_clk_control+0x15c>
			GPIOF_CLK_DI();
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <gpio_clk_control+0x1ac>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <gpio_clk_control+0x1ac>)
 8000600:	f023 0320 	bic.w	r3, r3, #32
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000606:	e01f      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <gpio_clk_control+0x1c4>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <gpio_clk_control+0x172>
			GPIOG_CLK_DI();
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <gpio_clk_control+0x1ac>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a10      	ldr	r2, [pc, #64]	; (8000658 <gpio_clk_control+0x1ac>)
 8000616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061c:	e014      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <gpio_clk_control+0x1c8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <gpio_clk_control+0x188>
			GPIOH_CLK_DI();
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <gpio_clk_control+0x1ac>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <gpio_clk_control+0x1ac>)
 800062c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000632:	e009      	b.n	8000648 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a10      	ldr	r2, [pc, #64]	; (8000678 <gpio_clk_control+0x1cc>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d105      	bne.n	8000648 <gpio_clk_control+0x19c>
			GPIOI_CLK_DI();
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <gpio_clk_control+0x1ac>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <gpio_clk_control+0x1ac>)
 8000642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40020000 	.word	0x40020000
 8000658:	40023800 	.word	0x40023800
 800065c:	40020400 	.word	0x40020400
 8000660:	40020800 	.word	0x40020800
 8000664:	40020c00 	.word	0x40020c00
 8000668:	40021000 	.word	0x40021000
 800066c:	40021400 	.word	0x40021400
 8000670:	40021800 	.word	0x40021800
 8000674:	40021c00 	.word	0x40021c00
 8000678:	40022000 	.word	0x40022000

0800067c <gpio_init>:

/******************************************************
				2.GPIO initializations
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	gpio_clk_control(pGPIOHandle->pGPIOx, ENABLE);/*Initializes the clock control*/
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff0e 	bl	80004ac <gpio_clk_control>
	uint32_t temp=0;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d821      	bhi.n	80006e0 <gpio_init+0x64>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	4619      	mov	r1, r3
 80006ba:	2303      	movs	r3, #3
 80006bc:	408b      	lsls	r3, r1
 80006be:	43db      	mvns	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	430a      	orrs	r2, r1
 80006d8:	601a      	str	r2, [r3, #0]
		temp= 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	e0e9      	b.n	80008b4 <gpio_init+0x238>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80006e0:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <gpio_init+0x1a4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7912      	ldrb	r2, [r2, #4]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <gpio_init+0x1a4>)
 80006f2:	430b      	orrs	r3, r1
 80006f4:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	795b      	ldrb	r3, [r3, #5]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d117      	bne.n	800072e <gpio_init+0xb2>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80006fe:	4b48      	ldr	r3, [pc, #288]	; (8000820 <gpio_init+0x1a4>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7912      	ldrb	r2, [r2, #4]
 8000706:	4611      	mov	r1, r2
 8000708:	2201      	movs	r2, #1
 800070a:	408a      	lsls	r2, r1
 800070c:	43d2      	mvns	r2, r2
 800070e:	4611      	mov	r1, r2
 8000710:	4a43      	ldr	r2, [pc, #268]	; (8000820 <gpio_init+0x1a4>)
 8000712:	400b      	ands	r3, r1
 8000714:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000716:	4b42      	ldr	r3, [pc, #264]	; (8000820 <gpio_init+0x1a4>)
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7912      	ldrb	r2, [r2, #4]
 800071e:	4611      	mov	r1, r2
 8000720:	2201      	movs	r2, #1
 8000722:	408a      	lsls	r2, r1
 8000724:	4611      	mov	r1, r2
 8000726:	4a3e      	ldr	r2, [pc, #248]	; (8000820 <gpio_init+0x1a4>)
 8000728:	430b      	orrs	r3, r1
 800072a:	60d3      	str	r3, [r2, #12]
 800072c:	e035      	b.n	800079a <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	795b      	ldrb	r3, [r3, #5]
 8000732:	2b05      	cmp	r3, #5
 8000734:	d117      	bne.n	8000766 <gpio_init+0xea>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <gpio_init+0x1a4>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7912      	ldrb	r2, [r2, #4]
 800073e:	4611      	mov	r1, r2
 8000740:	2201      	movs	r2, #1
 8000742:	408a      	lsls	r2, r1
 8000744:	43d2      	mvns	r2, r2
 8000746:	4611      	mov	r1, r2
 8000748:	4a35      	ldr	r2, [pc, #212]	; (8000820 <gpio_init+0x1a4>)
 800074a:	400b      	ands	r3, r1
 800074c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <gpio_init+0x1a4>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	4611      	mov	r1, r2
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <gpio_init+0x1a4>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6093      	str	r3, [r2, #8]
 8000764:	e019      	b.n	800079a <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	795b      	ldrb	r3, [r3, #5]
 800076a:	2b06      	cmp	r3, #6
 800076c:	d115      	bne.n	800079a <gpio_init+0x11e>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <gpio_init+0x1a4>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	7912      	ldrb	r2, [r2, #4]
 8000776:	4611      	mov	r1, r2
 8000778:	2201      	movs	r2, #1
 800077a:	408a      	lsls	r2, r1
 800077c:	4611      	mov	r1, r2
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <gpio_init+0x1a4>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <gpio_init+0x1a4>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	7912      	ldrb	r2, [r2, #4]
 800078c:	4611      	mov	r1, r2
 800078e:	2201      	movs	r2, #1
 8000790:	408a      	lsls	r2, r1
 8000792:	4611      	mov	r1, r2
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <gpio_init+0x1a4>)
 8000796:	430b      	orrs	r3, r1
 8000798:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <gpio_init+0x1a8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d102      	bne.n	80007ae <gpio_init+0x132>
			value = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
 80007ac:	e051      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <gpio_init+0x1ac>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d102      	bne.n	80007be <gpio_init+0x142>
			value = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	e049      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1a      	ldr	r2, [pc, #104]	; (800082c <gpio_init+0x1b0>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d102      	bne.n	80007ce <gpio_init+0x152>
			value = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	e041      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <gpio_init+0x1b4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d102      	bne.n	80007de <gpio_init+0x162>
			value = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	e039      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <gpio_init+0x1b8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d102      	bne.n	80007ee <gpio_init+0x172>
			value = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	61fb      	str	r3, [r7, #28]
 80007ec:	e031      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <gpio_init+0x1bc>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d102      	bne.n	80007fe <gpio_init+0x182>
			value = 5;
 80007f8:	2305      	movs	r3, #5
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e029      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <gpio_init+0x1c0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d102      	bne.n	800080e <gpio_init+0x192>
			value = 6;
 8000808:	2306      	movs	r3, #6
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	e021      	b.n	8000852 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <gpio_init+0x1c4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d115      	bne.n	8000844 <gpio_init+0x1c8>
			value = 7;
 8000818:	2307      	movs	r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	e019      	b.n	8000852 <gpio_init+0x1d6>
 800081e:	bf00      	nop
 8000820:	40013c00 	.word	0x40013c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40021000 	.word	0x40021000
 8000838:	40021400 	.word	0x40021400
 800083c:	40021800 	.word	0x40021800
 8000840:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a6b      	ldr	r2, [pc, #428]	; (80009f8 <gpio_init+0x37c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <gpio_init+0x1d6>
			value = 8;
 800084e:	2308      	movs	r3, #8
 8000850:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 8000852:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <gpio_init+0x380>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a69      	ldr	r2, [pc, #420]	; (80009fc <gpio_init+0x380>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 8000872:	4a63      	ldr	r2, [pc, #396]	; (8000a00 <gpio_init+0x384>)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3302      	adds	r3, #2
 8000878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	69f9      	ldr	r1, [r7, #28]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	495d      	ldr	r1, [pc, #372]	; (8000a00 <gpio_init+0x384>)
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3302      	adds	r3, #2
 8000890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 8000894:	4a5a      	ldr	r2, [pc, #360]	; (8000a00 <gpio_init+0x384>)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3302      	adds	r3, #2
 800089a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	69f9      	ldr	r1, [r7, #28]
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	4955      	ldr	r1, [pc, #340]	; (8000a00 <gpio_init+0x384>)
 80008aa:	431a      	orrs	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3302      	adds	r3, #2
 80008b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	799b      	ldrb	r3, [r3, #6]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2103      	movs	r1, #3
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	400a      	ands	r2, r1
 80008e2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6899      	ldr	r1, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	609a      	str	r2, [r3, #8]
	temp= 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	79db      	ldrb	r3, [r3, #7]
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2103      	movs	r1, #3
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	4619      	mov	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	400a      	ands	r2, r1
 8000926:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68d9      	ldr	r1, [r3, #12]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	430a      	orrs	r2, r1
 8000936:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7a1b      	ldrb	r3, [r3, #8]
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	791b      	ldrb	r3, [r3, #4]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	4619      	mov	r1, r3
 8000958:	2301      	movs	r3, #1
 800095a:	408b      	lsls	r3, r1
 800095c:	43db      	mvns	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6859      	ldr	r1, [r3, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	430a      	orrs	r2, r1
 8000976:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	795b      	ldrb	r3, [r3, #5]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d135      	bne.n	80009f0 <gpio_init+0x374>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	791b      	ldrb	r3, [r3, #4]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	7bfa      	ldrb	r2, [r7, #15]
 800099c:	3208      	adds	r2, #8
 800099e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	4001      	ands	r1, r0
 80009b8:	3208      	adds	r2, #8
 80009ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	3208      	adds	r2, #8
 80009c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7a5b      	ldrb	r3, [r3, #9]
 80009ce:	461a      	mov	r2, r3
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	4301      	orrs	r1, r0
 80009e2:	3208      	adds	r2, #8
 80009e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73bb      	strb	r3, [r7, #14]
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	73fb      	strb	r3, [r7, #15]
	}


}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40022000 	.word	0x40022000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40013800 	.word	0x40013800

08000a04 <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *gpio_x_pin, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor, int alternate_function)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	603b      	str	r3, [r7, #0]
	gpio_x_pin->pGPIOx = gpio;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	601a      	str	r2, [r3, #0]
	gpio_x_pin->GPIO_PinCfng.PinNumber = pin_number;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	711a      	strb	r2, [r3, #4]
	gpio_x_pin->GPIO_PinCfng.PinMode = output_mode;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	715a      	strb	r2, [r3, #5]
	gpio_x_pin->GPIO_PinCfng.PinSpeed = pin_speed;
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	719a      	strb	r2, [r3, #6]
	gpio_x_pin->GPIO_PinCfng.PinOType = pin_out_mode;
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	721a      	strb	r2, [r3, #8]
	gpio_x_pin->GPIO_PinCfng.PinPuPdCtrl = internal_resistor;
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	71da      	strb	r2, [r3, #7]
//	gpio_x_pin->GPIO_PinCfng.PinAltFunc = alternate_function;
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <gpio_irq_set>:

/******************************************************
				4.GPIO Interrupt request functions
*******************************************************/
void gpio_irq_set(uint8_t IRQNumber)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	if (IRQNumber < 32)
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b1f      	cmp	r3, #31
 8000a5a:	d80a      	bhi.n	8000a72 <gpio_irq_set+0x26>
		{*NVIC_ISER0 |= (1<<IRQNumber);}
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <gpio_irq_set+0x7c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	2101      	movs	r1, #1
 8000a64:	fa01 f202 	lsl.w	r2, r1, r2
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <gpio_irq_set+0x7c>)
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	6013      	str	r3, [r2, #0]
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
}
 8000a70:	e024      	b.n	8000abc <gpio_irq_set+0x70>
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b20      	cmp	r3, #32
 8000a76:	d90f      	bls.n	8000a98 <gpio_irq_set+0x4c>
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7c:	d80c      	bhi.n	8000a98 <gpio_irq_set+0x4c>
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <gpio_irq_set+0x80>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	f002 021f 	and.w	r2, r2, #31
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <gpio_irq_set+0x80>)
 8000a92:	430b      	orrs	r3, r1
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	e011      	b.n	8000abc <gpio_irq_set+0x70>
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b40      	cmp	r3, #64	; 0x40
 8000a9c:	d90e      	bls.n	8000abc <gpio_irq_set+0x70>
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b5f      	cmp	r3, #95	; 0x5f
 8000aa2:	d80b      	bhi.n	8000abc <gpio_irq_set+0x70>
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <gpio_irq_set+0x84>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	f002 021f 	and.w	r2, r2, #31
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <gpio_irq_set+0x84>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000e104 	.word	0xe000e104
 8000ad0:	e000e108 	.word	0xe000e108

08000ad4 <gpio_irq_priority>:
		{*NVIC_ICER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ICER2 |= (1<<IRQNumber%32); }
}
void gpio_irq_priority(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber/4;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	73fb      	strb	r3, [r7, #15]
	uint8_t	iprx_section = IRQNumber%4;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - PRIORITY_NOT_IMPLEMENTED_BITS);
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	3304      	adds	r3, #4
 8000afa:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE + iprx) |= (IRQPriority << iprx_section) << (shift_amount);
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b04:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	79b9      	ldrb	r1, [r7, #6]
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	4099      	lsls	r1, r3
 8000b10:	7b7b      	ldrb	r3, [r7, #13]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b20:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b24:	430a      	orrs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]

}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <gpio_irq_handler>:
void gpio_irq_handler(uint8_t PinNumber)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	//Clear the pending register pin
	if(EXTI->PR & (1 << PinNumber))
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <gpio_irq_handler+0x3c>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d009      	beq.n	8000b64 <gpio_irq_handler+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <gpio_irq_handler+0x3c>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	2101      	movs	r1, #1
 8000b58:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <gpio_irq_handler+0x3c>)
 8000b60:	430b      	orrs	r3, r1
 8000b62:	6153      	str	r3, [r2, #20]
	}
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40013c00 	.word	0x40013c00

08000b74 <spi_clk_control>:
/******************************************************
				1.GPIO CLK control
*******************************************************/

void spi_clk_control(SPI_Handle_t* spi_handle,uint8_t enable)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]

	if (enable)
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d02f      	beq.n	8000be6 <spi_clk_control+0x72>
	{
		if (spi_handle->p_spi_x == SPI1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a31      	ldr	r2, [pc, #196]	; (8000c50 <spi_clk_control+0xdc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d106      	bne.n	8000b9e <spi_clk_control+0x2a>
		{
			SPI1_CLK_EN();
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <spi_clk_control+0xe0>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <spi_clk_control+0xe0>)
 8000b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9a:	6453      	str	r3, [r2, #68]	; 0x44
				SPI4_CLK_DI();
			}
	}


}
 8000b9c:	e052      	b.n	8000c44 <spi_clk_control+0xd0>
		else if (spi_handle->p_spi_x == SPI2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <spi_clk_control+0xe4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <spi_clk_control+0x42>
			SPI2_CLK_EN();
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <spi_clk_control+0xe0>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <spi_clk_control+0xe0>)
 8000bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb4:	e046      	b.n	8000c44 <spi_clk_control+0xd0>
		else if (spi_handle->p_spi_x == SPI3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <spi_clk_control+0xe8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d106      	bne.n	8000bce <spi_clk_control+0x5a>
			SPI3_CLK_EN();
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <spi_clk_control+0xe0>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <spi_clk_control+0xe0>)
 8000bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bcc:	e03a      	b.n	8000c44 <spi_clk_control+0xd0>
		else if (spi_handle->p_spi_x == SPI4)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <spi_clk_control+0xec>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d135      	bne.n	8000c44 <spi_clk_control+0xd0>
			SPI4_CLK_EN();
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <spi_clk_control+0xe0>)
 8000bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <spi_clk_control+0xe0>)
 8000bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000be4:	e02e      	b.n	8000c44 <spi_clk_control+0xd0>
		if (spi_handle->p_spi_x == SPI1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <spi_clk_control+0xdc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d106      	bne.n	8000bfe <spi_clk_control+0x8a>
				SPI1_CLK_DI();
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <spi_clk_control+0xe0>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <spi_clk_control+0xe0>)
 8000bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bfa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bfc:	e022      	b.n	8000c44 <spi_clk_control+0xd0>
			else if (spi_handle->p_spi_x == SPI2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <spi_clk_control+0xe4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d106      	bne.n	8000c16 <spi_clk_control+0xa2>
				SPI2_CLK_DI();
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <spi_clk_control+0xe0>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <spi_clk_control+0xe0>)
 8000c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c14:	e016      	b.n	8000c44 <spi_clk_control+0xd0>
			else if (spi_handle->p_spi_x == SPI3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <spi_clk_control+0xe8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d106      	bne.n	8000c2e <spi_clk_control+0xba>
				SPI3_CLK_DI();
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <spi_clk_control+0xe0>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <spi_clk_control+0xe0>)
 8000c26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c2c:	e00a      	b.n	8000c44 <spi_clk_control+0xd0>
			else if (spi_handle->p_spi_x == SPI4)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <spi_clk_control+0xec>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d105      	bne.n	8000c44 <spi_clk_control+0xd0>
				SPI4_CLK_DI();
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <spi_clk_control+0xe0>)
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <spi_clk_control+0xe0>)
 8000c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c42:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40003800 	.word	0x40003800
 8000c5c:	40003c00 	.word	0x40003c00
 8000c60:	40013400 	.word	0x40013400

08000c64 <spi_configure_pin>:

/******************************************************
				2.SPI
*******************************************************/
void spi_configure_pin(SPI_Handle_t* spi, SPI_RegDef_t* spi_x, int cpha, int cpol, int master, int baudrate, int ssm, int ssi, int dff, int bus_cfg)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]

	spi->p_spi_x = spi_x;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	601a      	str	r2, [r3, #0]
	spi->spi_config.CPHA = cpha;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	711a      	strb	r2, [r3, #4]
	spi->spi_config.CPOL = cpol;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	715a      	strb	r2, [r3, #5]
	spi->spi_config.MSTR = master;
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	719a      	strb	r2, [r3, #6]
	spi->spi_config.BR = baudrate;
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	71da      	strb	r2, [r3, #7]
	spi->spi_config.SSM = ssm;
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	725a      	strb	r2, [r3, #9]
	spi->spi_config.SSI = ssi;
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	729a      	strb	r2, [r3, #10]
	spi->spi_config.DFF = dff;
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	721a      	strb	r2, [r3, #8]
	spi->spi_config.BUS = bus_cfg;
 8000cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	72da      	strb	r2, [r3, #11]

}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <spi_init>:
void spi_init(SPI_Handle_t* spi_handle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	spi_clk_control(spi_handle, ENABLE);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff50 	bl	8000b74 <spi_clk_control>

	uint32_t temp = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.CPHA)<<CR1_BIT0_CPHA;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.CPOL)<<CR1_BIT1_CPOL;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	795b      	ldrb	r3, [r3, #5]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.MSTR)<<CR1_BIT2_MSTR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.BR)<<CR1_BIT3_BR0;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	79db      	ldrb	r3, [r3, #7]
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
	temp |= DISABLE<<CR1_BIT7_LSB;
	temp |= (spi_handle->spi_config.DFF)<<CR1_BIT11_DFF;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7a1b      	ldrb	r3, [r3, #8]
 8000d12:	02db      	lsls	r3, r3, #11
 8000d14:	461a      	mov	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.SSM)<<CR1_BIT9_SSM;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7a5b      	ldrb	r3, [r3, #9]
 8000d20:	025b      	lsls	r3, r3, #9
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

	if (spi_handle->spi_config.BUS == SPI_HALF_DUPLEX)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7adb      	ldrb	r3, [r3, #11]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d104      	bne.n	8000d3c <spi_init+0x78>
	{
		/*Half duplex - BIDIMODE bit should be enabled*/
		temp |= SPI_BIDI_MODE<<CR1_BIT15_BIDIMODE;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e007      	b.n	8000d4c <spi_init+0x88>
	}
	else
	{
		/*Full duplex - BIDIMODE bit should be reset*/
		temp |= SPI_UNIDI_MODE<<CR1_BIT15_BIDIMODE;
		if (spi_handle->spi_config.BUS == SPI_SIMPLEX_RX_ONLY)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7adb      	ldrb	r3, [r3, #11]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d103      	bne.n	8000d4c <spi_init+0x88>
		{
			/*Simplex RX only - RXONLY bit should be enabled*/
			temp |= ENABLE<<CR1_BIT10_RXONLY;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4a:	60fb      	str	r3, [r7, #12]
		}
	}
	spi_handle->p_spi_x->SPI_CR1 = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]

}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <spi_enable>:
void spi_enable(SPI_RegDef_t *p_spi_x, uint8_t enable)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
	p_spi_x->SPI_CR1 &= ~(1<<CR1_BIT6_SPE);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
	p_spi_x->SPI_CR1 |= (enable<<CR1_BIT6_SPE);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	78fa      	ldrb	r2, [r7, #3]
 8000d7a:	0192      	lsls	r2, r2, #6
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]

}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <spi_ssi_enable>:
void spi_ssi_enable(SPI_RegDef_t *p_spi_x, uint8_t enable)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
	p_spi_x->SPI_CR1 &= ~(1<<CR1_BIT8_SSI);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	601a      	str	r2, [r3, #0]
	p_spi_x->SPI_CR1 |= (enable<<CR1_BIT8_SSI);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	0212      	lsls	r2, r2, #8
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	601a      	str	r2, [r3, #0]

}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <spi_send>:
/******************************************************
				3.3.SPI send/receive functions
*******************************************************/
void spi_send(SPI_RegDef_t* p_spi_x,uint8_t *pTxbuffer, uint32_t len)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000dcc:	e024      	b.n	8000e18 <spi_send+0x58>
	{
		if (((p_spi_x->SPI_SR)&(1<<SR_BIT1_TXE)) != 0)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d01e      	beq.n	8000e18 <spi_send+0x58>
		/*If TX buffer is empty*/
		{
			if (((p_spi_x->SPI_CR1)&(1<<CR1_BIT11_DFF)) == SPI_DFF_8_BIT)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <spi_send+0x42>
			/*If Frame format is 8 bit*/
			{
				p_spi_x->SPI_DR |= *pTxbuffer;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	7812      	ldrb	r2, [r2, #0]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	60da      	str	r2, [r3, #12]
				pTxbuffer++;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3301      	adds	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
				len--;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	e00a      	b.n	8000e18 <spi_send+0x58>
			}
			else
			/*If Frame format is 16 bit*/
			{
				p_spi_x->SPI_DR =  *((uint16_t*)pTxbuffer);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	60da      	str	r2, [r3, #12]
				len = len-2;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxbuffer++;
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1d7      	bne.n	8000dce <spi_send+0xe>
				pTxbuffer++;
				*/
			}
		}
	}
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	4e0d      	ldr	r6, [pc, #52]	; (8000e64 <__libc_init_array+0x38>)
 8000e30:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e32:	1ba4      	subs	r4, r4, r6
 8000e34:	10a4      	asrs	r4, r4, #2
 8000e36:	2500      	movs	r5, #0
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	4e0b      	ldr	r6, [pc, #44]	; (8000e6c <__libc_init_array+0x40>)
 8000e3e:	4c0c      	ldr	r4, [pc, #48]	; (8000e70 <__libc_init_array+0x44>)
 8000e40:	f000 f818 	bl	8000e74 <_init>
 8000e44:	1ba4      	subs	r4, r4, r6
 8000e46:	10a4      	asrs	r4, r4, #2
 8000e48:	2500      	movs	r5, #0
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e54:	4798      	blx	r3
 8000e56:	3501      	adds	r5, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5e:	4798      	blx	r3
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000ea4 	.word	0x08000ea4
 8000e68:	08000ea4 	.word	0x08000ea4
 8000e6c:	08000ea4 	.word	0x08000ea4
 8000e70:	08000ea8 	.word	0x08000ea8

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
