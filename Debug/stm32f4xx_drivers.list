
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e4c  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ff4  08000ff4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ff4  08000ff4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff4  08000ff4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff4  08000ff4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001000  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001000  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a8c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000292  00000000  00000000  00020ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00020d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  00020e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000014f6  00000000  00000000  00020ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b1b  00000000  00000000  000223d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000057a5  00000000  00000000  00022ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00028696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000428  00000000  00000000  00028714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fdc 	.word	0x08000fdc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000fdc 	.word	0x08000fdc

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__gedf2>:
 8000560:	f04f 3cff 	mov.w	ip, #4294967295
 8000564:	e006      	b.n	8000574 <__cmpdf2+0x4>
 8000566:	bf00      	nop

08000568 <__ledf2>:
 8000568:	f04f 0c01 	mov.w	ip, #1
 800056c:	e002      	b.n	8000574 <__cmpdf2+0x4>
 800056e:	bf00      	nop

08000570 <__cmpdf2>:
 8000570:	f04f 0c01 	mov.w	ip, #1
 8000574:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800057c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000584:	bf18      	it	ne
 8000586:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058a:	d01b      	beq.n	80005c4 <__cmpdf2+0x54>
 800058c:	b001      	add	sp, #4
 800058e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000592:	bf0c      	ite	eq
 8000594:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000598:	ea91 0f03 	teqne	r1, r3
 800059c:	bf02      	ittt	eq
 800059e:	ea90 0f02 	teqeq	r0, r2
 80005a2:	2000      	moveq	r0, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	f110 0f00 	cmn.w	r0, #0
 80005aa:	ea91 0f03 	teq	r1, r3
 80005ae:	bf58      	it	pl
 80005b0:	4299      	cmppl	r1, r3
 80005b2:	bf08      	it	eq
 80005b4:	4290      	cmpeq	r0, r2
 80005b6:	bf2c      	ite	cs
 80005b8:	17d8      	asrcs	r0, r3, #31
 80005ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005be:	f040 0001 	orr.w	r0, r0, #1
 80005c2:	4770      	bx	lr
 80005c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d102      	bne.n	80005d4 <__cmpdf2+0x64>
 80005ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d2:	d107      	bne.n	80005e4 <__cmpdf2+0x74>
 80005d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005dc:	d1d6      	bne.n	800058c <__cmpdf2+0x1c>
 80005de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e2:	d0d3      	beq.n	800058c <__cmpdf2+0x1c>
 80005e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__aeabi_cdrcmple>:
 80005ec:	4684      	mov	ip, r0
 80005ee:	4610      	mov	r0, r2
 80005f0:	4662      	mov	r2, ip
 80005f2:	468c      	mov	ip, r1
 80005f4:	4619      	mov	r1, r3
 80005f6:	4663      	mov	r3, ip
 80005f8:	e000      	b.n	80005fc <__aeabi_cdcmpeq>
 80005fa:	bf00      	nop

080005fc <__aeabi_cdcmpeq>:
 80005fc:	b501      	push	{r0, lr}
 80005fe:	f7ff ffb7 	bl	8000570 <__cmpdf2>
 8000602:	2800      	cmp	r0, #0
 8000604:	bf48      	it	mi
 8000606:	f110 0f00 	cmnmi.w	r0, #0
 800060a:	bd01      	pop	{r0, pc}

0800060c <__aeabi_dcmpeq>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff fff4 	bl	80005fc <__aeabi_cdcmpeq>
 8000614:	bf0c      	ite	eq
 8000616:	2001      	moveq	r0, #1
 8000618:	2000      	movne	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmplt>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffea 	bl	80005fc <__aeabi_cdcmpeq>
 8000628:	bf34      	ite	cc
 800062a:	2001      	movcc	r0, #1
 800062c:	2000      	movcs	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmple>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffe0 	bl	80005fc <__aeabi_cdcmpeq>
 800063c:	bf94      	ite	ls
 800063e:	2001      	movls	r0, #1
 8000640:	2000      	movhi	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmpge>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffce 	bl	80005ec <__aeabi_cdrcmple>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpgt>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffc4 	bl	80005ec <__aeabi_cdrcmple>
 8000664:	bf34      	ite	cc
 8000666:	2001      	movcc	r0, #1
 8000668:	2000      	movcs	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <delay>:


static int timeout = 2.5*M;

void delay(int timeout)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < timeout ; i ++);
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	e002      	b.n	8000684 <delay+0x14>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3f8      	bcc.n	800067e <delay+0xe>
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <main>:


int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af04      	add	r7, sp, #16
	int cnt = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_Handle_t orange_led;
	GPIO_Handle_t red_led;
	GPIO_Handle_t blue_led;
	GPIO_Handle_t irq_pin;

	gpio_configure_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 80006a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80006a6:	2300      	movs	r3, #0
 80006a8:	9302      	str	r3, [sp, #8]
 80006aa:	2300      	movs	r3, #0
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2300      	movs	r3, #0
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	220c      	movs	r2, #12
 80006b6:	493c      	ldr	r1, [pc, #240]	; (80007a8 <main+0x110>)
 80006b8:	f000 fb7a 	bl	8000db0 <gpio_configure_pin>
	gpio_configure_pin(&orange_led, GPIOD, 13, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 80006bc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80006c0:	2300      	movs	r3, #0
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2300      	movs	r3, #0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	220d      	movs	r2, #13
 80006d0:	4935      	ldr	r1, [pc, #212]	; (80007a8 <main+0x110>)
 80006d2:	f000 fb6d 	bl	8000db0 <gpio_configure_pin>
	gpio_configure_pin(&red_led, GPIOD, 14, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 80006d6:	f107 0018 	add.w	r0, r7, #24
 80006da:	2300      	movs	r3, #0
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	2300      	movs	r3, #0
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2300      	movs	r3, #0
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	220e      	movs	r2, #14
 80006ea:	492f      	ldr	r1, [pc, #188]	; (80007a8 <main+0x110>)
 80006ec:	f000 fb60 	bl	8000db0 <gpio_configure_pin>
	gpio_configure_pin(&blue_led, GPIOD, 15, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);
 80006f0:	f107 000c 	add.w	r0, r7, #12
 80006f4:	2300      	movs	r3, #0
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2300      	movs	r3, #0
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	220f      	movs	r2, #15
 8000704:	4928      	ldr	r1, [pc, #160]	; (80007a8 <main+0x110>)
 8000706:	f000 fb53 	bl	8000db0 <gpio_configure_pin>
	gpio_configure_pin(&irq_pin, GPIOA, 0, GPIO_MODE_IRQ_RT, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD);		/*Configures GPIOA_0 pin the work in interrupt mode*/
 800070a:	4638      	mov	r0, r7
 800070c:	2300      	movs	r3, #0
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	2300      	movs	r3, #0
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2302      	movs	r3, #2
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2305      	movs	r3, #5
 800071a:	2200      	movs	r2, #0
 800071c:	4923      	ldr	r1, [pc, #140]	; (80007ac <main+0x114>)
 800071e:	f000 fb47 	bl	8000db0 <gpio_configure_pin>

	/*Enables the GPIO CLK*/
	GPIO_CLKCtrl(GPIOD,ENABLE);
 8000722:	2101      	movs	r1, #1
 8000724:	4820      	ldr	r0, [pc, #128]	; (80007a8 <main+0x110>)
 8000726:	f000 f89b 	bl	8000860 <GPIO_CLKCtrl>
	GPIO_CLKCtrl(GPIOA,ENABLE);
 800072a:	2101      	movs	r1, #1
 800072c:	481f      	ldr	r0, [pc, #124]	; (80007ac <main+0x114>)
 800072e:	f000 f897 	bl	8000860 <GPIO_CLKCtrl>

	gpio_init(&green_led);
 8000732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f97a 	bl	8000a30 <gpio_init>
	gpio_init(&orange_led);
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f975 	bl	8000a30 <gpio_init>
	gpio_init(&red_led);
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f970 	bl	8000a30 <gpio_init>
	gpio_init(&blue_led);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f96b 	bl	8000a30 <gpio_init>
	gpio_init(&irq_pin);
 800075a:	463b      	mov	r3, r7
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f967 	bl	8000a30 <gpio_init>


	/*Enable and configure interrupt line 0*/
	gpio_irq_set(EXTI0);
 8000762:	2006      	movs	r0, #6
 8000764:	f000 fb82 	bl	8000e6c <gpio_irq_set>
	gpio_irq_priority(EXTI0, 15);
 8000768:	210f      	movs	r1, #15
 800076a:	2006      	movs	r0, #6
 800076c:	f000 fbc2 	bl	8000ef4 <gpio_irq_priority>
	gpio_write_to_pin(GPIOD, 15, ENABLE);
 8000770:	2201      	movs	r2, #1
 8000772:	210f      	movs	r1, #15
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <main+0x110>)
 8000776:	f000 fb3f 	bl	8000df8 <gpio_write_to_pin>

	while(1)
	{
		delay(timeout);
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <main+0x118>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff76 	bl	8000670 <delay>
		gpio_toggle_pin(GPIOD, 12+(cnt++)%4);
 8000784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800078a:	425a      	negs	r2, r3
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	f002 0203 	and.w	r2, r2, #3
 8000794:	bf58      	it	pl
 8000796:	4253      	negpl	r3, r2
 8000798:	b2db      	uxtb	r3, r3
 800079a:	330c      	adds	r3, #12
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	4801      	ldr	r0, [pc, #4]	; (80007a8 <main+0x110>)
 80007a2:	f000 fb4e 	bl	8000e42 <gpio_toggle_pin>
		delay(timeout);
 80007a6:	e7e8      	b.n	800077a <main+0xe2>
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40020000 	.word	0x40020000
 80007b0:	20000000 	.word	0x20000000
 80007b4:	00000000 	.word	0x00000000

080007b8 <EXTI0_IRQHandler>:

	return 0;
}

void EXTI0_IRQHandler(void)
	{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	delay(0.1*K);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f7ff ff57 	bl	8000670 <delay>
	if (timeout == 2.5*M)
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <EXTI0_IRQHandler+0x48>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe60 	bl	800048c <__aeabi_i2d>
 80007cc:	a30a      	add	r3, pc, #40	; (adr r3, 80007f8 <EXTI0_IRQHandler+0x40>)
 80007ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d2:	f7ff ff1b 	bl	800060c <__aeabi_dcmpeq>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d003      	beq.n	80007e4 <EXTI0_IRQHandler+0x2c>
		timeout = 100*K;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <EXTI0_IRQHandler+0x48>)
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <EXTI0_IRQHandler+0x4c>)
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e002      	b.n	80007ea <EXTI0_IRQHandler+0x32>
	else
		timeout = 2.5*M;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <EXTI0_IRQHandler+0x48>)
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <EXTI0_IRQHandler+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
	gpio_irq_handler(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 fbb2 	bl	8000f54 <gpio_irq_handler>
	}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	f3af 8000 	nop.w
 80007f8:	00000000 	.word	0x00000000
 80007fc:	414312d0 	.word	0x414312d0
 8000800:	20000000 	.word	0x20000000
 8000804:	000186a0 	.word	0x000186a0
 8000808:	002625a0 	.word	0x002625a0

0800080c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000810:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <LoopForever+0x6>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LoopForever+0xe>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <LoopForever+0x16>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083a:	f000 fbab 	bl	8000f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083e:	f7ff ff2b 	bl	8000698 <main>

08000842 <LoopForever>:

LoopForever:
    b LoopForever
 8000842:	e7fe      	b.n	8000842 <LoopForever>
  ldr   r0, =_estack
 8000844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000850:	08000ffc 	.word	0x08000ffc
  ldr r2, =_sbss
 8000854:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000858:	20000020 	.word	0x20000020

0800085c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <GPIO_CLKCtrl>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void GPIO_CLKCtrl(GPIO_RegDef_t *pGPIOx,uint8_t enable)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	if (enable)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d062      	beq.n	8000938 <GPIO_CLKCtrl+0xd8>
	{
		if (pGPIOx == GPIOA)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a64      	ldr	r2, [pc, #400]	; (8000a08 <GPIO_CLKCtrl+0x1a8>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <GPIO_CLKCtrl+0x28>
		{
			GPIOA_CLK_EN();
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a63      	ldr	r2, [pc, #396]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 8000886:	e0b9      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a61      	ldr	r2, [pc, #388]	; (8000a10 <GPIO_CLKCtrl+0x1b0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <GPIO_CLKCtrl+0x3e>
			GPIOB_CLK_EN();
 8000890:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089c:	e0ae      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <GPIO_CLKCtrl+0x1b4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <GPIO_CLKCtrl+0x54>
			GPIOC_CLK_EN();
 80008a6:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b2:	e0a3      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a58      	ldr	r2, [pc, #352]	; (8000a18 <GPIO_CLKCtrl+0x1b8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <GPIO_CLKCtrl+0x6a>
			GPIOD_CLK_EN();
 80008bc:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a52      	ldr	r2, [pc, #328]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c8:	e098      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <GPIO_CLKCtrl+0x1bc>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <GPIO_CLKCtrl+0x80>
			GPIOE_CLK_EN();
 80008d2:	4b4e      	ldr	r3, [pc, #312]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a4d      	ldr	r2, [pc, #308]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008de:	e08d      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a4f      	ldr	r2, [pc, #316]	; (8000a20 <GPIO_CLKCtrl+0x1c0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <GPIO_CLKCtrl+0x96>
			GPIOF_CLK_EN();
 80008e8:	4b48      	ldr	r3, [pc, #288]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a47      	ldr	r2, [pc, #284]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f4:	e082      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a4a      	ldr	r2, [pc, #296]	; (8000a24 <GPIO_CLKCtrl+0x1c4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <GPIO_CLKCtrl+0xac>
			GPIOG_CLK_EN();
 80008fe:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a42      	ldr	r2, [pc, #264]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090a:	e077      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <GPIO_CLKCtrl+0x1c8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <GPIO_CLKCtrl+0xc2>
			GPIOH_CLK_EN();
 8000914:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a3c      	ldr	r2, [pc, #240]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000920:	e06c      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a41      	ldr	r2, [pc, #260]	; (8000a2c <GPIO_CLKCtrl+0x1cc>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d168      	bne.n	80009fc <GPIO_CLKCtrl+0x19c>
			GPIOI_CLK_EN();
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a37      	ldr	r2, [pc, #220]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000936:	e061      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		if (pGPIOx == GPIOA)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <GPIO_CLKCtrl+0x1a8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <GPIO_CLKCtrl+0xee>
			GPIOA_CLK_DI();
 8000940:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094c:	e056      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOB)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <GPIO_CLKCtrl+0x1b0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <GPIO_CLKCtrl+0x104>
			GPIOB_CLK_DI();
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800095c:	f023 0302 	bic.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000962:	e04b      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <GPIO_CLKCtrl+0x1b4>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <GPIO_CLKCtrl+0x11a>
			GPIOC_CLK_DI();
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000972:	f023 0304 	bic.w	r3, r3, #4
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000978:	e040      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOD)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <GPIO_CLKCtrl+0x1b8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <GPIO_CLKCtrl+0x130>
			GPIOD_CLK_DI();
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 8000988:	f023 0308 	bic.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800098e:	e035      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <GPIO_CLKCtrl+0x1bc>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <GPIO_CLKCtrl+0x146>
			GPIOE_CLK_DI();
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 800099e:	f023 0310 	bic.w	r3, r3, #16
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a4:	e02a      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOF)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <GPIO_CLKCtrl+0x1c0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d106      	bne.n	80009bc <GPIO_CLKCtrl+0x15c>
			GPIOF_CLK_DI();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009b4:	f023 0320 	bic.w	r3, r3, #32
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ba:	e01f      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOG)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <GPIO_CLKCtrl+0x1c4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d106      	bne.n	80009d2 <GPIO_CLKCtrl+0x172>
			GPIOG_CLK_DI();
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d0:	e014      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOH)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <GPIO_CLKCtrl+0x1c8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <GPIO_CLKCtrl+0x188>
			GPIOH_CLK_DI();
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e6:	e009      	b.n	80009fc <GPIO_CLKCtrl+0x19c>
		else if(pGPIOx == GPIOI)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <GPIO_CLKCtrl+0x1cc>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d105      	bne.n	80009fc <GPIO_CLKCtrl+0x19c>
			GPIOI_CLK_DI();
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <GPIO_CLKCtrl+0x1ac>)
 80009f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40021400 	.word	0x40021400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40021c00 	.word	0x40021c00
 8000a2c:	40022000 	.word	0x40022000

08000a30 <gpio_init>:

/******************************************************
				2.GPIO initializations
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d821      	bhi.n	8000a88 <gpio_init+0x58>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	795b      	ldrb	r3, [r3, #5]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	4619      	mov	r1, r3
 8000a62:	2303      	movs	r3, #3
 8000a64:	408b      	lsls	r3, r1
 8000a66:	43db      	mvns	r3, r3
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	400a      	ands	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
		temp= 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	e0e9      	b.n	8000c5c <gpio_init+0x22c>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <gpio_init+0x198>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7912      	ldrb	r2, [r2, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	408a      	lsls	r2, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <gpio_init+0x198>)
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d117      	bne.n	8000ad6 <gpio_init+0xa6>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000aa6:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <gpio_init+0x198>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7912      	ldrb	r2, [r2, #4]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	408a      	lsls	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a43      	ldr	r2, [pc, #268]	; (8000bc8 <gpio_init+0x198>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <gpio_init+0x198>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	7912      	ldrb	r2, [r2, #4]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	2201      	movs	r2, #1
 8000aca:	408a      	lsls	r2, r1
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <gpio_init+0x198>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	60d3      	str	r3, [r2, #12]
 8000ad4:	e035      	b.n	8000b42 <gpio_init+0x112>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	2b05      	cmp	r3, #5
 8000adc:	d117      	bne.n	8000b0e <gpio_init+0xde>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <gpio_init+0x198>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	7912      	ldrb	r2, [r2, #4]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	408a      	lsls	r2, r1
 8000aec:	43d2      	mvns	r2, r2
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <gpio_init+0x198>)
 8000af2:	400b      	ands	r3, r1
 8000af4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <gpio_init+0x198>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7912      	ldrb	r2, [r2, #4]
 8000afe:	4611      	mov	r1, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	408a      	lsls	r2, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <gpio_init+0x198>)
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6093      	str	r3, [r2, #8]
 8000b0c:	e019      	b.n	8000b42 <gpio_init+0x112>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d115      	bne.n	8000b42 <gpio_init+0x112>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <gpio_init+0x198>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7912      	ldrb	r2, [r2, #4]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	2201      	movs	r2, #1
 8000b22:	408a      	lsls	r2, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <gpio_init+0x198>)
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <gpio_init+0x198>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	7912      	ldrb	r2, [r2, #4]
 8000b34:	4611      	mov	r1, r2
 8000b36:	2201      	movs	r2, #1
 8000b38:	408a      	lsls	r2, r1
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <gpio_init+0x198>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <gpio_init+0x19c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d102      	bne.n	8000b56 <gpio_init+0x126>
			value = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	e051      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <gpio_init+0x1a0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d102      	bne.n	8000b66 <gpio_init+0x136>
			value = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	e049      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <gpio_init+0x1a4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d102      	bne.n	8000b76 <gpio_init+0x146>
			value = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	e041      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <gpio_init+0x1a8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d102      	bne.n	8000b86 <gpio_init+0x156>
			value = 3;
 8000b80:	2303      	movs	r3, #3
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	e039      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <gpio_init+0x1ac>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d102      	bne.n	8000b96 <gpio_init+0x166>
			value = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	e031      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <gpio_init+0x1b0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d102      	bne.n	8000ba6 <gpio_init+0x176>
			value = 5;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	e029      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <gpio_init+0x1b4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d102      	bne.n	8000bb6 <gpio_init+0x186>
			value = 6;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	e021      	b.n	8000bfa <gpio_init+0x1ca>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <gpio_init+0x1b8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d115      	bne.n	8000bec <gpio_init+0x1bc>
			value = 7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	e019      	b.n	8000bfa <gpio_init+0x1ca>
 8000bc6:	bf00      	nop
 8000bc8:	40013c00 	.word	0x40013c00
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a6c      	ldr	r2, [pc, #432]	; (8000da4 <gpio_init+0x374>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <gpio_init+0x1ca>
			value = 8;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 8000bfa:	4b6b      	ldr	r3, [pc, #428]	; (8000da8 <gpio_init+0x378>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a6a      	ldr	r2, [pc, #424]	; (8000da8 <gpio_init+0x378>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 8000c1a:	4a64      	ldr	r2, [pc, #400]	; (8000dac <gpio_init+0x37c>)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3302      	adds	r3, #2
 8000c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	69f9      	ldr	r1, [r7, #28]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	495e      	ldr	r1, [pc, #376]	; (8000dac <gpio_init+0x37c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3302      	adds	r3, #2
 8000c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 8000c3c:	4a5b      	ldr	r2, [pc, #364]	; (8000dac <gpio_init+0x37c>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3302      	adds	r3, #2
 8000c42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	69f9      	ldr	r1, [r7, #28]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	4956      	ldr	r1, [pc, #344]	; (8000dac <gpio_init+0x37c>)
 8000c52:	431a      	orrs	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3302      	adds	r3, #2
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	799b      	ldrb	r3, [r3, #6]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	400a      	ands	r2, r1
 8000c8a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6899      	ldr	r1, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	609a      	str	r2, [r3, #8]
	temp= 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	79db      	ldrb	r3, [r3, #7]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	791b      	ldrb	r3, [r3, #4]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	400a      	ands	r2, r1
 8000cce:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68d9      	ldr	r1, [r3, #12]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7a1b      	ldrb	r3, [r3, #8]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	791b      	ldrb	r3, [r3, #4]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2301      	movs	r3, #1
 8000d02:	408b      	lsls	r3, r1
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4619      	mov	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6859      	ldr	r1, [r3, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d135      	bne.n	8000d98 <gpio_init+0x368>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	3208      	adds	r2, #8
 8000d46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	4001      	ands	r1, r0
 8000d60:	3208      	adds	r2, #8
 8000d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7a5b      	ldrb	r3, [r3, #9]
 8000d76:	461a      	mov	r2, r3
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	4301      	orrs	r1, r0
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73bb      	strb	r3, [r7, #14]
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	73fb      	strb	r3, [r7, #15]
	}


}
 8000d98:	bf00      	nop
 8000d9a:	3724      	adds	r7, #36	; 0x24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40022000 	.word	0x40022000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40013800 	.word	0x40013800

08000db0 <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *gpio_x_pin, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor_state)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
	gpio_x_pin->pGPIOx = gpio;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	601a      	str	r2, [r3, #0]
	gpio_x_pin->GPIO_PinCfng.PinNumber = pin_number;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	711a      	strb	r2, [r3, #4]
	gpio_x_pin->GPIO_PinCfng.PinMode = output_mode;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	715a      	strb	r2, [r3, #5]
	gpio_x_pin->GPIO_PinCfng.PinSpeed = pin_speed;
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	719a      	strb	r2, [r3, #6]
	gpio_x_pin->GPIO_PinCfng.PinOType = pin_out_mode;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	721a      	strb	r2, [r3, #8]
	gpio_x_pin->GPIO_PinCfng.PinPuPdCtrl = internal_resistor_state;
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	71da      	strb	r2, [r3, #7]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <gpio_write_to_pin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR; // returns the entire register
	return value;
}
void gpio_write_to_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 8000e08:	78bb      	ldrb	r3, [r7, #2]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d109      	bne.n	8000e22 <gpio_write_to_pin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR &= ~ (0x1 << PinNumber);
	pGPIOx->ODR |= (value << PinNumber);
	 */


}
 8000e20:	e009      	b.n	8000e36 <gpio_write_to_pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	43d2      	mvns	r2, r2
 8000e30:	401a      	ands	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	615a      	str	r2, [r3, #20]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <gpio_toggle_pin>:
void gpio_write_to_port(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = value;
}
void gpio_toggle_pin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin_number); //changing previous pin state
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	405a      	eors	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	615a      	str	r2, [r3, #20]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <gpio_irq_set>:

/******************************************************
				4.GPIO Interrupt request functions
*******************************************************/
void gpio_irq_set(uint8_t IRQNumber)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	if (IRQNumber < 32)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b1f      	cmp	r3, #31
 8000e7a:	d80a      	bhi.n	8000e92 <gpio_irq_set+0x26>
		{*NVIC_ISER0 |= (1<<IRQNumber);}
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <gpio_irq_set+0x7c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <gpio_irq_set+0x7c>)
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6013      	str	r3, [r2, #0]
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
}
 8000e90:	e024      	b.n	8000edc <gpio_irq_set+0x70>
	else if ((IRQNumber > 32)&&(IRQNumber < 64))
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b20      	cmp	r3, #32
 8000e96:	d90f      	bls.n	8000eb8 <gpio_irq_set+0x4c>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e9c:	d80c      	bhi.n	8000eb8 <gpio_irq_set+0x4c>
		{*NVIC_ISER1 |= (1<<IRQNumber%32); }
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <gpio_irq_set+0x80>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	f002 021f 	and.w	r2, r2, #31
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <gpio_irq_set+0x80>)
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6013      	str	r3, [r2, #0]
}
 8000eb6:	e011      	b.n	8000edc <gpio_irq_set+0x70>
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b40      	cmp	r3, #64	; 0x40
 8000ebc:	d90e      	bls.n	8000edc <gpio_irq_set+0x70>
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ec2:	d80b      	bhi.n	8000edc <gpio_irq_set+0x70>
		{*NVIC_ISER2 |= (1<<IRQNumber%32); }
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <gpio_irq_set+0x84>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	f002 021f 	and.w	r2, r2, #31
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <gpio_irq_set+0x84>)
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000e104 	.word	0xe000e104
 8000ef0:	e000e108 	.word	0xe000e108

08000ef4 <gpio_irq_priority>:
		{*NVIC_ICER1 |= (1<<IRQNumber%32); }
	else if ((IRQNumber > 64)&&(IRQNumber < 96))
		{*NVIC_ICER2 |= (1<<IRQNumber%32); }
}
void gpio_irq_priority(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber/4;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	73fb      	strb	r3, [r7, #15]
	uint8_t	iprx_section = IRQNumber%4;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - PRIORITY_NOT_IMPLEMENTED_BITS);
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	3304      	adds	r3, #4
 8000f1a:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE + iprx) |= (IRQPriority << iprx_section) << (shift_amount);
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f24:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	79b9      	ldrb	r1, [r7, #6]
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	4099      	lsls	r1, r3
 8000f30:	7b7b      	ldrb	r3, [r7, #13]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f40:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]

}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <gpio_irq_handler>:
void gpio_irq_handler(uint8_t PinNumber)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	//Clear the pending register pin
	if(EXTI->PR & (1 << PinNumber))
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <gpio_irq_handler+0x3c>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <gpio_irq_handler+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <gpio_irq_handler+0x3c>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <gpio_irq_handler+0x3c>)
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6153      	str	r3, [r2, #20]
	}
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40013c00 	.word	0x40013c00

08000f94 <__libc_init_array>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	4e0d      	ldr	r6, [pc, #52]	; (8000fcc <__libc_init_array+0x38>)
 8000f98:	4c0d      	ldr	r4, [pc, #52]	; (8000fd0 <__libc_init_array+0x3c>)
 8000f9a:	1ba4      	subs	r4, r4, r6
 8000f9c:	10a4      	asrs	r4, r4, #2
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	d109      	bne.n	8000fb8 <__libc_init_array+0x24>
 8000fa4:	4e0b      	ldr	r6, [pc, #44]	; (8000fd4 <__libc_init_array+0x40>)
 8000fa6:	4c0c      	ldr	r4, [pc, #48]	; (8000fd8 <__libc_init_array+0x44>)
 8000fa8:	f000 f818 	bl	8000fdc <_init>
 8000fac:	1ba4      	subs	r4, r4, r6
 8000fae:	10a4      	asrs	r4, r4, #2
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	42a5      	cmp	r5, r4
 8000fb4:	d105      	bne.n	8000fc2 <__libc_init_array+0x2e>
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fbc:	4798      	blx	r3
 8000fbe:	3501      	adds	r5, #1
 8000fc0:	e7ee      	b.n	8000fa0 <__libc_init_array+0xc>
 8000fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc6:	4798      	blx	r3
 8000fc8:	3501      	adds	r5, #1
 8000fca:	e7f2      	b.n	8000fb2 <__libc_init_array+0x1e>
 8000fcc:	08000ff4 	.word	0x08000ff4
 8000fd0:	08000ff4 	.word	0x08000ff4
 8000fd4:	08000ff4 	.word	0x08000ff4
 8000fd8:	08000ff8 	.word	0x08000ff8

08000fdc <_init>:
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fde:	bf00      	nop
 8000fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe2:	bc08      	pop	{r3}
 8000fe4:	469e      	mov	lr, r3
 8000fe6:	4770      	bx	lr

08000fe8 <_fini>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr
