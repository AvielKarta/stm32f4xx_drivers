
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fb0  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001158  08001158  00011158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001160  08001160  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001160  08001160  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001160  08001160  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001160  08001160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800116c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800116c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019e3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004db  00000000  00000000  00021a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00021ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00022030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f20  00000000  00000000  00022130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000119b  00000000  00000000  00024050  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008c5e  00000000  00000000  000251eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002de49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  0002dec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001140 	.word	0x08001140

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08001140 	.word	0x08001140

080001e8 <strcmp>:
 80001e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f0:	2a01      	cmp	r2, #1
 80001f2:	bf28      	it	cs
 80001f4:	429a      	cmpcs	r2, r3
 80001f6:	d0f7      	beq.n	80001e8 <strcmp>
 80001f8:	1ad0      	subs	r0, r2, r3
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__gedf2>:
 8000574:	f04f 3cff 	mov.w	ip, #4294967295
 8000578:	e006      	b.n	8000588 <__cmpdf2+0x4>
 800057a:	bf00      	nop

0800057c <__ledf2>:
 800057c:	f04f 0c01 	mov.w	ip, #1
 8000580:	e002      	b.n	8000588 <__cmpdf2+0x4>
 8000582:	bf00      	nop

08000584 <__cmpdf2>:
 8000584:	f04f 0c01 	mov.w	ip, #1
 8000588:	f84d cd04 	str.w	ip, [sp, #-4]!
 800058c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000598:	bf18      	it	ne
 800059a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800059e:	d01b      	beq.n	80005d8 <__cmpdf2+0x54>
 80005a0:	b001      	add	sp, #4
 80005a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005a6:	bf0c      	ite	eq
 80005a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005ac:	ea91 0f03 	teqne	r1, r3
 80005b0:	bf02      	ittt	eq
 80005b2:	ea90 0f02 	teqeq	r0, r2
 80005b6:	2000      	moveq	r0, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	f110 0f00 	cmn.w	r0, #0
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf58      	it	pl
 80005c4:	4299      	cmppl	r1, r3
 80005c6:	bf08      	it	eq
 80005c8:	4290      	cmpeq	r0, r2
 80005ca:	bf2c      	ite	cs
 80005cc:	17d8      	asrcs	r0, r3, #31
 80005ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d2:	f040 0001 	orr.w	r0, r0, #1
 80005d6:	4770      	bx	lr
 80005d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d102      	bne.n	80005e8 <__cmpdf2+0x64>
 80005e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005e6:	d107      	bne.n	80005f8 <__cmpdf2+0x74>
 80005e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f0:	d1d6      	bne.n	80005a0 <__cmpdf2+0x1c>
 80005f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005f6:	d0d3      	beq.n	80005a0 <__cmpdf2+0x1c>
 80005f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <__aeabi_cdrcmple>:
 8000600:	4684      	mov	ip, r0
 8000602:	4610      	mov	r0, r2
 8000604:	4662      	mov	r2, ip
 8000606:	468c      	mov	ip, r1
 8000608:	4619      	mov	r1, r3
 800060a:	4663      	mov	r3, ip
 800060c:	e000      	b.n	8000610 <__aeabi_cdcmpeq>
 800060e:	bf00      	nop

08000610 <__aeabi_cdcmpeq>:
 8000610:	b501      	push	{r0, lr}
 8000612:	f7ff ffb7 	bl	8000584 <__cmpdf2>
 8000616:	2800      	cmp	r0, #0
 8000618:	bf48      	it	mi
 800061a:	f110 0f00 	cmnmi.w	r0, #0
 800061e:	bd01      	pop	{r0, pc}

08000620 <__aeabi_dcmpeq>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff fff4 	bl	8000610 <__aeabi_cdcmpeq>
 8000628:	bf0c      	ite	eq
 800062a:	2001      	moveq	r0, #1
 800062c:	2000      	movne	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmplt>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffea 	bl	8000610 <__aeabi_cdcmpeq>
 800063c:	bf34      	ite	cc
 800063e:	2001      	movcc	r0, #1
 8000640:	2000      	movcs	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmple>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffe0 	bl	8000610 <__aeabi_cdcmpeq>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpge>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffce 	bl	8000600 <__aeabi_cdrcmple>
 8000664:	bf94      	ite	ls
 8000666:	2001      	movls	r0, #1
 8000668:	2000      	movhi	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_dcmpgt>:
 8000670:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000674:	f7ff ffc4 	bl	8000600 <__aeabi_cdrcmple>
 8000678:	bf34      	ite	cc
 800067a:	2001      	movcc	r0, #1
 800067c:	2000      	movcs	r0, #0
 800067e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000682:	bf00      	nop

08000684 <spi_driver_function>:
	gpio_irq_priority(EXTI0, 15);


}
void spi_driver_function(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af06      	add	r7, sp, #24


	GPIO_Handle_t spi_pins;
	gpio_configure_pin(&spi_pins, GPIOB, 13, GPIO_MODE_ALTFN, GPIO_SPPED_FAST, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 5);/*Enables CLK*/
 800068a:	f107 000c 	add.w	r0, r7, #12
 800068e:	2305      	movs	r3, #5
 8000690:	9303      	str	r3, [sp, #12]
 8000692:	2300      	movs	r3, #0
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2302      	movs	r3, #2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	220d      	movs	r2, #13
 80006a2:	4918      	ldr	r1, [pc, #96]	; (8000704 <spi_driver_function+0x80>)
 80006a4:	f000 fb58 	bl	8000d58 <gpio_configure_pin>
	gpio_init(&spi_pins);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f98f 	bl	80009d0 <gpio_init>
	spi_pins.GPIO_PinCfng.PinNumber = 14;/*Enables MISO*/
 80006b2:	230e      	movs	r3, #14
 80006b4:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f988 	bl	80009d0 <gpio_init>
	spi_pins.GPIO_PinCfng.PinNumber = 15;/*Enables MOSI*/
 80006c0:	230f      	movs	r3, #15
 80006c2:	743b      	strb	r3, [r7, #16]
	gpio_init(&spi_pins);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f981 	bl	80009d0 <gpio_init>
		spi_configure_pin(&spi2_handler, SPI2, SPI_CLK_PHASE_0, SPI_CLK_IDLE_0, SPI_MASTER, SPI_BR_CLK_DIV_2, SPI_SSM_EN, SPI_SSI_EN, SPI_DFF_8_BIT, SPI_FULL_DUPLEX);/*Configures parameters for SPI2*/
		spi_init(&spi2_handler);
	}
	else
	{
		spi_configure_pin(&spi2_handler, SPI2, SPI_CLK_PHASE_0, SPI_CLK_IDLE_0, SPI_SLAVE, SPI_BR_CLK_DIV_2, SPI_SSM_EN, SPI_SSI_DIS, SPI_DFF_8_BIT, SPI_FULL_DUPLEX);/*Configures parameters for SPI2*/
 80006ce:	4638      	mov	r0, r7
 80006d0:	2301      	movs	r3, #1
 80006d2:	9305      	str	r3, [sp, #20]
 80006d4:	2300      	movs	r3, #0
 80006d6:	9304      	str	r3, [sp, #16]
 80006d8:	2300      	movs	r3, #0
 80006da:	9303      	str	r3, [sp, #12]
 80006dc:	2301      	movs	r3, #1
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	4906      	ldr	r1, [pc, #24]	; (8000708 <spi_driver_function+0x84>)
 80006ee:	f000 fc19 	bl	8000f24 <spi_configure_pin>
		spi_init(&spi2_handler);
 80006f2:	463b      	mov	r3, r7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fc45 	bl	8000f84 <spi_init>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40020400 	.word	0x40020400
 8000708:	40003800 	.word	0x40003800

0800070c <main>:

int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

	}
	else
	{
		char spi_rx_data[5];
		spi_driver_function();
 8000712:	f7ff ffb7 	bl	8000684 <spi_driver_function>
		spi_ssi_enable(SPI2, DISABLE);
 8000716:	2100      	movs	r1, #0
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <main+0x44>)
 800071a:	f000 fc98 	bl	800104e <spi_ssi_enable>
		spi_enable(SPI2, ENABLE);
 800071e:	2101      	movs	r1, #1
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <main+0x44>)
 8000722:	f000 fc7b 	bl	800101c <spi_enable>

		while(1)
			{
			spi_recieve(SPI2, (uint8_t*)spi_rx_data, 5);
 8000726:	463b      	mov	r3, r7
 8000728:	2205      	movs	r2, #5
 800072a:	4619      	mov	r1, r3
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <main+0x44>)
 800072e:	f000 fca7 	bl	8001080 <spi_recieve>
			if (!strcmp(spi_rx_data, "blue"))
 8000732:	463b      	mov	r3, r7
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <main+0x48>)
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd56 	bl	80001e8 <strcmp>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f1      	bne.n	8000726 <main+0x1a>
				{
				gpio_write_to_pin(GPIOD, 15, ENABLE);
 8000742:	2201      	movs	r2, #1
 8000744:	210f      	movs	r1, #15
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <main+0x4c>)
 8000748:	f000 fb2e 	bl	8000da8 <gpio_write_to_pin>
			spi_recieve(SPI2, (uint8_t*)spi_rx_data, 5);
 800074c:	e7eb      	b.n	8000726 <main+0x1a>
 800074e:	bf00      	nop
 8000750:	40003800 	.word	0x40003800
 8000754:	08001158 	.word	0x08001158
 8000758:	40020c00 	.word	0x40020c00
 800075c:	00000000 	.word	0x00000000

08000760 <EXTI0_IRQHandler>:
	}
	return 0;
}

void EXTI0_IRQHandler(void)
	{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if (timeout == 2.5*M)
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <EXTI0_IRQHandler+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fe99 	bl	80004a0 <__aeabi_i2d>
 800076e:	a30a      	add	r3, pc, #40	; (adr r3, 8000798 <EXTI0_IRQHandler+0x38>)
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	f7ff ff54 	bl	8000620 <__aeabi_dcmpeq>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <EXTI0_IRQHandler+0x26>
		timeout = 100*K;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <EXTI0_IRQHandler+0x40>)
 8000780:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <EXTI0_IRQHandler+0x44>)
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	e002      	b.n	800078c <EXTI0_IRQHandler+0x2c>
	else
		timeout = 2.5*M;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <EXTI0_IRQHandler+0x40>)
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <EXTI0_IRQHandler+0x48>)
 800078a:	601a      	str	r2, [r3, #0]
	gpio_irq_handler(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f000 fb31 	bl	8000df4 <gpio_irq_handler>
	}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	00000000 	.word	0x00000000
 800079c:	414312d0 	.word	0x414312d0
 80007a0:	20000000 	.word	0x20000000
 80007a4:	000186a0 	.word	0x000186a0
 80007a8:	002625a0 	.word	0x002625a0

080007ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007da:	f000 fc8d 	bl	80010f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff ff95 	bl	800070c <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007f0:	08001168 	.word	0x08001168
  ldr r2, =_sbss
 80007f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007f8:	20000020 	.word	0x20000020

080007fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC_IRQHandler>
	...

08000800 <gpio_clk_control>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void gpio_clk_control(GPIO_RegDef_t *pGPIOx,uint8_t enable)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
	if (enable)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d062      	beq.n	80008d8 <gpio_clk_control+0xd8>
	{
		if (pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a64      	ldr	r2, [pc, #400]	; (80009a8 <gpio_clk_control+0x1a8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <gpio_clk_control+0x28>
		{
			GPIOA_CLK_EN();
 800081a:	4b64      	ldr	r3, [pc, #400]	; (80009ac <gpio_clk_control+0x1ac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a63      	ldr	r2, [pc, #396]	; (80009ac <gpio_clk_control+0x1ac>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 8000826:	e0b9      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a61      	ldr	r2, [pc, #388]	; (80009b0 <gpio_clk_control+0x1b0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <gpio_clk_control+0x3e>
			GPIOB_CLK_EN();
 8000830:	4b5e      	ldr	r3, [pc, #376]	; (80009ac <gpio_clk_control+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a5d      	ldr	r2, [pc, #372]	; (80009ac <gpio_clk_control+0x1ac>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e0ae      	b.n	800099c <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a5c      	ldr	r2, [pc, #368]	; (80009b4 <gpio_clk_control+0x1b4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <gpio_clk_control+0x54>
			GPIOC_CLK_EN();
 8000846:	4b59      	ldr	r3, [pc, #356]	; (80009ac <gpio_clk_control+0x1ac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a58      	ldr	r2, [pc, #352]	; (80009ac <gpio_clk_control+0x1ac>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e0a3      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a58      	ldr	r2, [pc, #352]	; (80009b8 <gpio_clk_control+0x1b8>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <gpio_clk_control+0x6a>
			GPIOD_CLK_EN();
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <gpio_clk_control+0x1ac>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a52      	ldr	r2, [pc, #328]	; (80009ac <gpio_clk_control+0x1ac>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e098      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a53      	ldr	r2, [pc, #332]	; (80009bc <gpio_clk_control+0x1bc>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <gpio_clk_control+0x80>
			GPIOE_CLK_EN();
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <gpio_clk_control+0x1ac>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4d      	ldr	r2, [pc, #308]	; (80009ac <gpio_clk_control+0x1ac>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e08d      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a4f      	ldr	r2, [pc, #316]	; (80009c0 <gpio_clk_control+0x1c0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d106      	bne.n	8000896 <gpio_clk_control+0x96>
			GPIOF_CLK_EN();
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <gpio_clk_control+0x1ac>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a47      	ldr	r2, [pc, #284]	; (80009ac <gpio_clk_control+0x1ac>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	e082      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a4a      	ldr	r2, [pc, #296]	; (80009c4 <gpio_clk_control+0x1c4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d106      	bne.n	80008ac <gpio_clk_control+0xac>
			GPIOG_CLK_EN();
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <gpio_clk_control+0x1ac>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a42      	ldr	r2, [pc, #264]	; (80009ac <gpio_clk_control+0x1ac>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008aa:	e077      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a46      	ldr	r2, [pc, #280]	; (80009c8 <gpio_clk_control+0x1c8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d106      	bne.n	80008c2 <gpio_clk_control+0xc2>
			GPIOH_CLK_EN();
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <gpio_clk_control+0x1ac>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <gpio_clk_control+0x1ac>)
 80008ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c0:	e06c      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a41      	ldr	r2, [pc, #260]	; (80009cc <gpio_clk_control+0x1cc>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d168      	bne.n	800099c <gpio_clk_control+0x19c>
			GPIOI_CLK_EN();
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <gpio_clk_control+0x1ac>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a37      	ldr	r2, [pc, #220]	; (80009ac <gpio_clk_control+0x1ac>)
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d6:	e061      	b.n	800099c <gpio_clk_control+0x19c>
		if (pGPIOx == GPIOA)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <gpio_clk_control+0x1a8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <gpio_clk_control+0xee>
			GPIOA_CLK_DI();
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <gpio_clk_control+0x1ac>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a31      	ldr	r2, [pc, #196]	; (80009ac <gpio_clk_control+0x1ac>)
 80008e6:	f023 0301 	bic.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ec:	e056      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <gpio_clk_control+0x1b0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <gpio_clk_control+0x104>
			GPIOB_CLK_DI();
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <gpio_clk_control+0x1ac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <gpio_clk_control+0x1ac>)
 80008fc:	f023 0302 	bic.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000902:	e04b      	b.n	800099c <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <gpio_clk_control+0x1b4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d106      	bne.n	800091a <gpio_clk_control+0x11a>
			GPIOC_CLK_DI();
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <gpio_clk_control+0x1ac>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a26      	ldr	r2, [pc, #152]	; (80009ac <gpio_clk_control+0x1ac>)
 8000912:	f023 0304 	bic.w	r3, r3, #4
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000918:	e040      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <gpio_clk_control+0x1b8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <gpio_clk_control+0x130>
			GPIOD_CLK_DI();
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <gpio_clk_control+0x1ac>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <gpio_clk_control+0x1ac>)
 8000928:	f023 0308 	bic.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092e:	e035      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <gpio_clk_control+0x1bc>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <gpio_clk_control+0x146>
			GPIOE_CLK_DI();
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <gpio_clk_control+0x1ac>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <gpio_clk_control+0x1ac>)
 800093e:	f023 0310 	bic.w	r3, r3, #16
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000944:	e02a      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <gpio_clk_control+0x1c0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <gpio_clk_control+0x15c>
			GPIOF_CLK_DI();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <gpio_clk_control+0x1ac>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <gpio_clk_control+0x1ac>)
 8000954:	f023 0320 	bic.w	r3, r3, #32
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095a:	e01f      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <gpio_clk_control+0x1c4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <gpio_clk_control+0x172>
			GPIOG_CLK_DI();
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <gpio_clk_control+0x1ac>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <gpio_clk_control+0x1ac>)
 800096a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000970:	e014      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <gpio_clk_control+0x1c8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <gpio_clk_control+0x188>
			GPIOH_CLK_DI();
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <gpio_clk_control+0x1ac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <gpio_clk_control+0x1ac>)
 8000980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000986:	e009      	b.n	800099c <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <gpio_clk_control+0x1cc>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d105      	bne.n	800099c <gpio_clk_control+0x19c>
			GPIOI_CLK_DI();
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <gpio_clk_control+0x1ac>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <gpio_clk_control+0x1ac>)
 8000996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40021400 	.word	0x40021400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40021c00 	.word	0x40021c00
 80009cc:	40022000 	.word	0x40022000

080009d0 <gpio_init>:

/******************************************************
				2.GPIO initializations
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	gpio_clk_control(pGPIOHandle->pGPIOx, ENABLE);/*Initializes the clock control*/
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff0e 	bl	8000800 <gpio_clk_control>
	uint32_t temp=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d821      	bhi.n	8000a34 <gpio_init+0x64>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2303      	movs	r3, #3
 8000a10:	408b      	lsls	r3, r1
 8000a12:	43db      	mvns	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
		temp= 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	e0e9      	b.n	8000c08 <gpio_init+0x238>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000a34:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <gpio_init+0x1a4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	7912      	ldrb	r2, [r2, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	2201      	movs	r2, #1
 8000a40:	408a      	lsls	r2, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <gpio_init+0x1a4>)
 8000a46:	430b      	orrs	r3, r1
 8000a48:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	795b      	ldrb	r3, [r3, #5]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d117      	bne.n	8000a82 <gpio_init+0xb2>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000a52:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <gpio_init+0x1a4>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	408a      	lsls	r2, r1
 8000a60:	43d2      	mvns	r2, r2
 8000a62:	4611      	mov	r1, r2
 8000a64:	4a43      	ldr	r2, [pc, #268]	; (8000b74 <gpio_init+0x1a4>)
 8000a66:	400b      	ands	r3, r1
 8000a68:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000a6a:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <gpio_init+0x1a4>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7912      	ldrb	r2, [r2, #4]
 8000a72:	4611      	mov	r1, r2
 8000a74:	2201      	movs	r2, #1
 8000a76:	408a      	lsls	r2, r1
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <gpio_init+0x1a4>)
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	60d3      	str	r3, [r2, #12]
 8000a80:	e035      	b.n	8000aee <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	795b      	ldrb	r3, [r3, #5]
 8000a86:	2b05      	cmp	r3, #5
 8000a88:	d117      	bne.n	8000aba <gpio_init+0xea>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <gpio_init+0x1a4>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	7912      	ldrb	r2, [r2, #4]
 8000a92:	4611      	mov	r1, r2
 8000a94:	2201      	movs	r2, #1
 8000a96:	408a      	lsls	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a35      	ldr	r2, [pc, #212]	; (8000b74 <gpio_init+0x1a4>)
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <gpio_init+0x1a4>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7912      	ldrb	r2, [r2, #4]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	2201      	movs	r2, #1
 8000aae:	408a      	lsls	r2, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a30      	ldr	r2, [pc, #192]	; (8000b74 <gpio_init+0x1a4>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6093      	str	r3, [r2, #8]
 8000ab8:	e019      	b.n	8000aee <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	795b      	ldrb	r3, [r3, #5]
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d115      	bne.n	8000aee <gpio_init+0x11e>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <gpio_init+0x1a4>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	7912      	ldrb	r2, [r2, #4]
 8000aca:	4611      	mov	r1, r2
 8000acc:	2201      	movs	r2, #1
 8000ace:	408a      	lsls	r2, r1
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <gpio_init+0x1a4>)
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <gpio_init+0x1a4>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	7912      	ldrb	r2, [r2, #4]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	408a      	lsls	r2, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <gpio_init+0x1a4>)
 8000aea:	430b      	orrs	r3, r1
 8000aec:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <gpio_init+0x1a8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d102      	bne.n	8000b02 <gpio_init+0x132>
			value = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	e051      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <gpio_init+0x1ac>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d102      	bne.n	8000b12 <gpio_init+0x142>
			value = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	e049      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <gpio_init+0x1b0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d102      	bne.n	8000b22 <gpio_init+0x152>
			value = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	e041      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <gpio_init+0x1b4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d102      	bne.n	8000b32 <gpio_init+0x162>
			value = 3;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	e039      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <gpio_init+0x1b8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <gpio_init+0x172>
			value = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	e031      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <gpio_init+0x1bc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d102      	bne.n	8000b52 <gpio_init+0x182>
			value = 5;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	e029      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <gpio_init+0x1c0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d102      	bne.n	8000b62 <gpio_init+0x192>
			value = 6;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	e021      	b.n	8000ba6 <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <gpio_init+0x1c4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d115      	bne.n	8000b98 <gpio_init+0x1c8>
			value = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	e019      	b.n	8000ba6 <gpio_init+0x1d6>
 8000b72:	bf00      	nop
 8000b74:	40013c00 	.word	0x40013c00
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a6b      	ldr	r2, [pc, #428]	; (8000d4c <gpio_init+0x37c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <gpio_init+0x1d6>
			value = 8;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 8000ba6:	4b6a      	ldr	r3, [pc, #424]	; (8000d50 <gpio_init+0x380>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a69      	ldr	r2, [pc, #420]	; (8000d50 <gpio_init+0x380>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	791b      	ldrb	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 8000bc6:	4a63      	ldr	r2, [pc, #396]	; (8000d54 <gpio_init+0x384>)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	69f9      	ldr	r1, [r7, #28]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	495d      	ldr	r1, [pc, #372]	; (8000d54 <gpio_init+0x384>)
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3302      	adds	r3, #2
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 8000be8:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <gpio_init+0x384>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3302      	adds	r3, #2
 8000bee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	69f9      	ldr	r1, [r7, #28]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	4955      	ldr	r1, [pc, #340]	; (8000d54 <gpio_init+0x384>)
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3302      	adds	r3, #2
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	799b      	ldrb	r3, [r3, #6]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2103      	movs	r1, #3
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	400a      	ands	r2, r1
 8000c36:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6899      	ldr	r1, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	609a      	str	r2, [r3, #8]
	temp= 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	79db      	ldrb	r3, [r3, #7]
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	791b      	ldrb	r3, [r3, #4]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	400a      	ands	r2, r1
 8000c7a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68d9      	ldr	r1, [r3, #12]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
	temp= 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	791b      	ldrb	r3, [r3, #4]
 8000caa:	4619      	mov	r1, r3
 8000cac:	2301      	movs	r3, #1
 8000cae:	408b      	lsls	r3, r1
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	400a      	ands	r2, r1
 8000cba:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6859      	ldr	r1, [r3, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	795b      	ldrb	r3, [r3, #5]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d135      	bne.n	8000d44 <gpio_init+0x374>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	4001      	ands	r1, r0
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7a5b      	ldrb	r3, [r3, #9]
 8000d22:	461a      	mov	r2, r3
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	7bfa      	ldrb	r2, [r7, #15]
 8000d34:	4301      	orrs	r1, r0
 8000d36:	3208      	adds	r2, #8
 8000d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73bb      	strb	r3, [r7, #14]
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	73fb      	strb	r3, [r7, #15]
	}


}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40013800 	.word	0x40013800

08000d58 <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *gpio_x_pin, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor, int alternate_function)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
	gpio_x_pin->pGPIOx = gpio;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	601a      	str	r2, [r3, #0]
	gpio_x_pin->GPIO_PinCfng.PinNumber = pin_number;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	711a      	strb	r2, [r3, #4]
	gpio_x_pin->GPIO_PinCfng.PinMode = output_mode;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	715a      	strb	r2, [r3, #5]
	gpio_x_pin->GPIO_PinCfng.PinSpeed = pin_speed;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	719a      	strb	r2, [r3, #6]
	gpio_x_pin->GPIO_PinCfng.PinOType = pin_out_mode;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	721a      	strb	r2, [r3, #8]
	gpio_x_pin->GPIO_PinCfng.PinPuPdCtrl = internal_resistor;
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	71da      	strb	r2, [r3, #7]
	gpio_x_pin->GPIO_PinCfng.PinAltFunc = alternate_function;
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	725a      	strb	r2, [r3, #9]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <gpio_write_to_pin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR; // returns the entire register
	return value;
}
void gpio_write_to_pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
 8000db4:	4613      	mov	r3, r2
 8000db6:	70bb      	strb	r3, [r7, #2]
	if (value == ENABLE)
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d109      	bne.n	8000dd2 <gpio_write_to_pin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	78fa      	ldrb	r2, [r7, #3]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR &= ~ (0x1 << PinNumber);
	pGPIOx->ODR |= (value << PinNumber);
	 */


}
 8000dd0:	e009      	b.n	8000de6 <gpio_write_to_pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	43d2      	mvns	r2, r2
 8000de0:	401a      	ands	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	615a      	str	r2, [r3, #20]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <gpio_irq_handler>:
	uint8_t shift_amount = (8 * iprx_section) + (8 - PRIORITY_NOT_IMPLEMENTED_BITS);
	*(NVIC_IPR_BASE + iprx) |= (IRQPriority << iprx_section) << (shift_amount);

}
void gpio_irq_handler(uint8_t PinNumber)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	//Clear the pending register pin
	if(EXTI->PR & (1 << PinNumber))
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <gpio_irq_handler+0x3c>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <gpio_irq_handler+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <gpio_irq_handler+0x3c>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <gpio_irq_handler+0x3c>)
 8000e20:	430b      	orrs	r3, r1
 8000e22:	6153      	str	r3, [r2, #20]
	}
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40013c00 	.word	0x40013c00

08000e34 <spi_clk_control>:
/******************************************************
				1.GPIO CLK control
*******************************************************/

void spi_clk_control(SPI_Handle_t* spi_handle,uint8_t enable)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]

	if (enable)
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d02f      	beq.n	8000ea6 <spi_clk_control+0x72>
	{
		if (spi_handle->p_spi_x == SPI1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <spi_clk_control+0xdc>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d106      	bne.n	8000e5e <spi_clk_control+0x2a>
		{
			SPI1_CLK_EN();
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <spi_clk_control+0xe0>)
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <spi_clk_control+0xe0>)
 8000e56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5a:	6453      	str	r3, [r2, #68]	; 0x44
				SPI4_CLK_DI();
			}
	}


}
 8000e5c:	e052      	b.n	8000f04 <spi_clk_control+0xd0>
		else if (spi_handle->p_spi_x == SPI2)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <spi_clk_control+0xe4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d106      	bne.n	8000e76 <spi_clk_control+0x42>
			SPI2_CLK_EN();
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <spi_clk_control+0xe0>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <spi_clk_control+0xe0>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e74:	e046      	b.n	8000f04 <spi_clk_control+0xd0>
		else if (spi_handle->p_spi_x == SPI3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <spi_clk_control+0xe8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <spi_clk_control+0x5a>
			SPI3_CLK_EN();
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <spi_clk_control+0xe0>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <spi_clk_control+0xe0>)
 8000e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e8c:	e03a      	b.n	8000f04 <spi_clk_control+0xd0>
		else if (spi_handle->p_spi_x == SPI4)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <spi_clk_control+0xec>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d135      	bne.n	8000f04 <spi_clk_control+0xd0>
			SPI4_CLK_EN();
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <spi_clk_control+0xe0>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <spi_clk_control+0xe0>)
 8000e9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ea2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ea4:	e02e      	b.n	8000f04 <spi_clk_control+0xd0>
		if (spi_handle->p_spi_x == SPI1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <spi_clk_control+0xdc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d106      	bne.n	8000ebe <spi_clk_control+0x8a>
				SPI1_CLK_DI();
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <spi_clk_control+0xe0>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <spi_clk_control+0xe0>)
 8000eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eba:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ebc:	e022      	b.n	8000f04 <spi_clk_control+0xd0>
			else if (spi_handle->p_spi_x == SPI2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <spi_clk_control+0xe4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d106      	bne.n	8000ed6 <spi_clk_control+0xa2>
				SPI2_CLK_DI();
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <spi_clk_control+0xe0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <spi_clk_control+0xe0>)
 8000ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed4:	e016      	b.n	8000f04 <spi_clk_control+0xd0>
			else if (spi_handle->p_spi_x == SPI3)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <spi_clk_control+0xe8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <spi_clk_control+0xba>
				SPI3_CLK_DI();
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <spi_clk_control+0xe0>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <spi_clk_control+0xe0>)
 8000ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eec:	e00a      	b.n	8000f04 <spi_clk_control+0xd0>
			else if (spi_handle->p_spi_x == SPI4)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <spi_clk_control+0xec>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d105      	bne.n	8000f04 <spi_clk_control+0xd0>
				SPI4_CLK_DI();
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <spi_clk_control+0xe0>)
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <spi_clk_control+0xe0>)
 8000efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f02:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40013000 	.word	0x40013000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40003800 	.word	0x40003800
 8000f1c:	40003c00 	.word	0x40003c00
 8000f20:	40013400 	.word	0x40013400

08000f24 <spi_configure_pin>:

/******************************************************
				2.SPI
*******************************************************/
void spi_configure_pin(SPI_Handle_t* spi, SPI_RegDef_t* spi_x, int cpha, int cpol, int master, int baudrate, int ssm, int ssi, int dff, int bus_cfg)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]

	spi->p_spi_x = spi_x;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	601a      	str	r2, [r3, #0]
	spi->spi_config.CPHA = cpha;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	711a      	strb	r2, [r3, #4]
	spi->spi_config.CPOL = cpol;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	715a      	strb	r2, [r3, #5]
	spi->spi_config.MSTR = master;
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	719a      	strb	r2, [r3, #6]
	spi->spi_config.BR = baudrate;
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	71da      	strb	r2, [r3, #7]
	spi->spi_config.SSM = ssm;
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	725a      	strb	r2, [r3, #9]
	spi->spi_config.SSI = ssi;
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	729a      	strb	r2, [r3, #10]
	spi->spi_config.DFF = dff;
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	721a      	strb	r2, [r3, #8]
	spi->spi_config.BUS = bus_cfg;
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	72da      	strb	r2, [r3, #11]

}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <spi_init>:
void spi_init(SPI_Handle_t* spi_handle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	spi_clk_control(spi_handle, ENABLE);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff50 	bl	8000e34 <spi_clk_control>

	uint32_t temp = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.CPHA)<<CR1_BIT0_CPHA;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.CPOL)<<CR1_BIT1_CPOL;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	795b      	ldrb	r3, [r3, #5]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.MSTR)<<CR1_BIT2_MSTR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.BR)<<CR1_BIT3_BR0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	79db      	ldrb	r3, [r3, #7]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
	temp |= DISABLE<<CR1_BIT7_LSB;
	temp |= (spi_handle->spi_config.DFF)<<CR1_BIT11_DFF;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7a1b      	ldrb	r3, [r3, #8]
 8000fd2:	02db      	lsls	r3, r3, #11
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
	temp |= (spi_handle->spi_config.SSM)<<CR1_BIT9_SSM;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a5b      	ldrb	r3, [r3, #9]
 8000fe0:	025b      	lsls	r3, r3, #9
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

	if (spi_handle->spi_config.BUS == SPI_HALF_DUPLEX)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7adb      	ldrb	r3, [r3, #11]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d104      	bne.n	8000ffc <spi_init+0x78>
	{
		/*Half duplex - BIDIMODE bit should be enabled*/
		temp |= SPI_BIDI_MODE<<CR1_BIT15_BIDIMODE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e007      	b.n	800100c <spi_init+0x88>
	}
	else
	{
		/*Full duplex - BIDIMODE bit should be reset*/
		temp |= SPI_UNIDI_MODE<<CR1_BIT15_BIDIMODE;
		if (spi_handle->spi_config.BUS == SPI_SIMPLEX_RX_ONLY)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7adb      	ldrb	r3, [r3, #11]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d103      	bne.n	800100c <spi_init+0x88>
		{
			/*Simplex RX only - RXONLY bit should be enabled*/
			temp |= ENABLE<<CR1_BIT10_RXONLY;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	60fb      	str	r3, [r7, #12]
		}
	}
	spi_handle->p_spi_x->SPI_CR1 = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	601a      	str	r2, [r3, #0]

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <spi_enable>:
void spi_enable(SPI_RegDef_t *p_spi_x, uint8_t enable)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	p_spi_x->SPI_CR1 &= ~(1<<CR1_BIT6_SPE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
	p_spi_x->SPI_CR1 |= (enable<<CR1_BIT6_SPE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	0192      	lsls	r2, r2, #6
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <spi_ssi_enable>:
void spi_ssi_enable(SPI_RegDef_t *p_spi_x, uint8_t enable)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
	p_spi_x->SPI_CR1 &= ~(1<<CR1_BIT8_SSI);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
	p_spi_x->SPI_CR1 |= (enable<<CR1_BIT8_SSI);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	78fa      	ldrb	r2, [r7, #3]
 800106c:	0212      	lsls	r2, r2, #8
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]

}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <spi_recieve>:
			}
		}
	}
}
void spi_recieve(SPI_RegDef_t* p_spi_x,uint8_t *pRxbuffer, uint32_t len)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	while(len > 0)
 800108c:	e02a      	b.n	80010e4 <spi_recieve+0x64>
		{
			if (((p_spi_x->SPI_SR)&(1<<SR_BIT0_RXNE)) != 0)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d024      	beq.n	80010e4 <spi_recieve+0x64>
			/*If RX buffer get the data from the shift register*/
			{
				if (((p_spi_x->SPI_CR1)&(1<<CR1_BIT11_DFF)) == SPI_DFF_8_BIT)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <spi_recieve+0x46>
				/*If Frame format is 8 bit*/
				{
					*pRxbuffer |= p_spi_x->SPI_DR;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	68d9      	ldr	r1, [r3, #12]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	b2cb      	uxtb	r3, r1
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	701a      	strb	r2, [r3, #0]
					pRxbuffer++;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
					len--;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	e00e      	b.n	80010e4 <spi_recieve+0x64>
				}
				else
				/*If Frame format is 16 bit*/
				{
					*((uint16_t*)pRxbuffer) |= p_spi_x->SPI_DR;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	b28b      	uxth	r3, r1
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	801a      	strh	r2, [r3, #0]
					len = len-2;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b02      	subs	r3, #2
 80010dc:	607b      	str	r3, [r7, #4]
					(uint16_t*)pRxbuffer++;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1d1      	bne.n	800108e <spi_recieve+0xe>

				}
			}
		}

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <__libc_init_array>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	4e0d      	ldr	r6, [pc, #52]	; (8001130 <__libc_init_array+0x38>)
 80010fc:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__libc_init_array+0x3c>)
 80010fe:	1ba4      	subs	r4, r4, r6
 8001100:	10a4      	asrs	r4, r4, #2
 8001102:	2500      	movs	r5, #0
 8001104:	42a5      	cmp	r5, r4
 8001106:	d109      	bne.n	800111c <__libc_init_array+0x24>
 8001108:	4e0b      	ldr	r6, [pc, #44]	; (8001138 <__libc_init_array+0x40>)
 800110a:	4c0c      	ldr	r4, [pc, #48]	; (800113c <__libc_init_array+0x44>)
 800110c:	f000 f818 	bl	8001140 <_init>
 8001110:	1ba4      	subs	r4, r4, r6
 8001112:	10a4      	asrs	r4, r4, #2
 8001114:	2500      	movs	r5, #0
 8001116:	42a5      	cmp	r5, r4
 8001118:	d105      	bne.n	8001126 <__libc_init_array+0x2e>
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001120:	4798      	blx	r3
 8001122:	3501      	adds	r5, #1
 8001124:	e7ee      	b.n	8001104 <__libc_init_array+0xc>
 8001126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800112a:	4798      	blx	r3
 800112c:	3501      	adds	r5, #1
 800112e:	e7f2      	b.n	8001116 <__libc_init_array+0x1e>
 8001130:	08001160 	.word	0x08001160
 8001134:	08001160 	.word	0x08001160
 8001138:	08001160 	.word	0x08001160
 800113c:	08001164 	.word	0x08001164

08001140 <_init>:
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	bf00      	nop
 8001144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001146:	bc08      	pop	{r3}
 8001148:	469e      	mov	lr, r3
 800114a:	4770      	bx	lr

0800114c <_fini>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	bf00      	nop
 8001150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001152:	bc08      	pop	{r3}
 8001154:	469e      	mov	lr, r3
 8001156:	4770      	bx	lr
