
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000888  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000a30  08000a30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a38  08000a38  00010a40  2**0
                  CONTENTS
  4 .ARM          00000000  08000a38  08000a38  00010a40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a38  08000a40  00010a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a40  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a40  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000247f  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000685  00000000  00000000  00012eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00013578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  000136e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002076  00000000  00000000  00013800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000175b  00000000  00000000  00015876  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008c97  00000000  00000000  00016fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001fc68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004bc  00000000  00000000  0001fce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a18 	.word	0x08000a18

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a18 	.word	0x08000a18

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay1>:
#include "stm32f407xx.h"
#include <string.h>


void delay1(int timeout)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < timeout ; i ++);
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e002      	b.n	800020c <delay1+0x14>
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	429a      	cmp	r2, r3
 8000212:	d3f8      	bcc.n	8000206 <delay1+0xe>
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <gpio_driver_function1>:

void gpio_driver_function1(GPIO_Handle_t green_led)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af04      	add	r7, sp, #16
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	gpio_configure_pin(&green_led, GPIOD, 12, GPIO_MODE_OUT, GPIO_SPPED_LOW, GPIO_OUT_MODE_PP, GPIO_DIS_PUPD, 0);
 800022c:	1d38      	adds	r0, r7, #4
 800022e:	2300      	movs	r3, #0
 8000230:	9303      	str	r3, [sp, #12]
 8000232:	2300      	movs	r3, #0
 8000234:	9302      	str	r3, [sp, #8]
 8000236:	2300      	movs	r3, #0
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2301      	movs	r3, #1
 8000240:	220c      	movs	r2, #12
 8000242:	4905      	ldr	r1, [pc, #20]	; (8000258 <gpio_driver_function1+0x38>)
 8000244:	f000 fb32 	bl	80008ac <gpio_configure_pin>
	gpio_init(&green_led);
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f96a 	bl	8000524 <gpio_init>

}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020c00 	.word	0x40020c00

0800025c <main>:

int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
	GPIO_Handle_t green_led;
	gpio_driver_function1(green_led);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000268:	f7ff ffda 	bl	8000220 <gpio_driver_function1>
	while(1)
	{
		gpio_toggle_pin(GPIOD, 12);
 800026c:	210c      	movs	r1, #12
 800026e:	4803      	ldr	r0, [pc, #12]	; (800027c <main+0x20>)
 8000270:	f000 fb44 	bl	80008fc <gpio_toggle_pin>
		delay1(700000);
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <main+0x24>)
 8000276:	f7ff ffbf 	bl	80001f8 <delay1>
		gpio_toggle_pin(GPIOD, 12);
 800027a:	e7f7      	b.n	800026c <main+0x10>
 800027c:	40020c00 	.word	0x40020c00
 8000280:	000aae60 	.word	0x000aae60

08000284 <delay>:
#define		MASTER		1
#define		SLAVE		0
#define		DEVICE		SLAVE

void delay(int timeout)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < timeout ; i ++);
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e002      	b.n	8000298 <delay+0x14>
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3f8      	bcc.n	8000292 <delay+0xe>
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <EXTI0_IRQHandler>:

return 0;
}

void EXTI0_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0

	gpio_toggle_pin(GPIOD, 14);
 80002b2:	210e      	movs	r1, #14
 80002b4:	480f      	ldr	r0, [pc, #60]	; (80002f4 <EXTI0_IRQHandler+0x48>)
 80002b6:	f000 fb21 	bl	80008fc <gpio_toggle_pin>
	char spi_tx_data[7];
	strcpy(spi_tx_data, "green");
 80002ba:	463b      	mov	r3, r7
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <EXTI0_IRQHandler+0x4c>)
 80002be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c2:	6018      	str	r0, [r3, #0]
 80002c4:	3304      	adds	r3, #4
 80002c6:	8019      	strh	r1, [r3, #0]
	spi_send(SPI2, (uint8_t*)spi_tx_data, strlen(spi_tx_data));
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff8c 	bl	80001e8 <strlen>
 80002d0:	4602      	mov	r2, r0
 80002d2:	463b      	mov	r3, r7
 80002d4:	4619      	mov	r1, r3
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <EXTI0_IRQHandler+0x50>)
 80002d8:	f000 fb46 	bl	8000968 <spi_send>
	delay(1000);
 80002dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e0:	f7ff ffd0 	bl	8000284 <delay>
	gpio_irq_handler(0);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 fb1f 	bl	8000928 <gpio_irq_handler>

}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40020c00 	.word	0x40020c00
 80002f8:	08000a30 	.word	0x08000a30
 80002fc:	40003800 	.word	0x40003800

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 fb4f 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ff93 	bl	800025c <main>

08000336 <LoopForever>:

LoopForever:
    b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	08000a40 	.word	0x08000a40
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	2000001c 	.word	0x2000001c

08000350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <gpio_clk_control>:

/******************************************************
				1.GPIO CLK control
*******************************************************/
void gpio_clk_control(GPIO_RegDef_t *pGPIOx,uint8_t enable)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	if (enable)
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d062      	beq.n	800042c <gpio_clk_control+0xd8>
	{
		if (pGPIOx == GPIOA)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a64      	ldr	r2, [pc, #400]	; (80004fc <gpio_clk_control+0x1a8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <gpio_clk_control+0x28>
		{
			GPIOA_CLK_EN();
 800036e:	4b64      	ldr	r3, [pc, #400]	; (8000500 <gpio_clk_control+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a63      	ldr	r2, [pc, #396]	; (8000500 <gpio_clk_control+0x1ac>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_CLK_DI();
		}

	}

}
 800037a:	e0b9      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a61      	ldr	r2, [pc, #388]	; (8000504 <gpio_clk_control+0x1b0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <gpio_clk_control+0x3e>
			GPIOB_CLK_EN();
 8000384:	4b5e      	ldr	r3, [pc, #376]	; (8000500 <gpio_clk_control+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a5d      	ldr	r2, [pc, #372]	; (8000500 <gpio_clk_control+0x1ac>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e0ae      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a5c      	ldr	r2, [pc, #368]	; (8000508 <gpio_clk_control+0x1b4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <gpio_clk_control+0x54>
			GPIOC_CLK_EN();
 800039a:	4b59      	ldr	r3, [pc, #356]	; (8000500 <gpio_clk_control+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a58      	ldr	r2, [pc, #352]	; (8000500 <gpio_clk_control+0x1ac>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e0a3      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a58      	ldr	r2, [pc, #352]	; (800050c <gpio_clk_control+0x1b8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <gpio_clk_control+0x6a>
			GPIOD_CLK_EN();
 80003b0:	4b53      	ldr	r3, [pc, #332]	; (8000500 <gpio_clk_control+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a52      	ldr	r2, [pc, #328]	; (8000500 <gpio_clk_control+0x1ac>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e098      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a53      	ldr	r2, [pc, #332]	; (8000510 <gpio_clk_control+0x1bc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <gpio_clk_control+0x80>
			GPIOE_CLK_EN();
 80003c6:	4b4e      	ldr	r3, [pc, #312]	; (8000500 <gpio_clk_control+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a4d      	ldr	r2, [pc, #308]	; (8000500 <gpio_clk_control+0x1ac>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e08d      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a4f      	ldr	r2, [pc, #316]	; (8000514 <gpio_clk_control+0x1c0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <gpio_clk_control+0x96>
			GPIOF_CLK_EN();
 80003dc:	4b48      	ldr	r3, [pc, #288]	; (8000500 <gpio_clk_control+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a47      	ldr	r2, [pc, #284]	; (8000500 <gpio_clk_control+0x1ac>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e082      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a4a      	ldr	r2, [pc, #296]	; (8000518 <gpio_clk_control+0x1c4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <gpio_clk_control+0xac>
			GPIOG_CLK_EN();
 80003f2:	4b43      	ldr	r3, [pc, #268]	; (8000500 <gpio_clk_control+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a42      	ldr	r2, [pc, #264]	; (8000500 <gpio_clk_control+0x1ac>)
 80003f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e077      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a46      	ldr	r2, [pc, #280]	; (800051c <gpio_clk_control+0x1c8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <gpio_clk_control+0xc2>
			GPIOH_CLK_EN();
 8000408:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <gpio_clk_control+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a3c      	ldr	r2, [pc, #240]	; (8000500 <gpio_clk_control+0x1ac>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e06c      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a41      	ldr	r2, [pc, #260]	; (8000520 <gpio_clk_control+0x1cc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d168      	bne.n	80004f0 <gpio_clk_control+0x19c>
			GPIOI_CLK_EN();
 800041e:	4b38      	ldr	r3, [pc, #224]	; (8000500 <gpio_clk_control+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a37      	ldr	r2, [pc, #220]	; (8000500 <gpio_clk_control+0x1ac>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e061      	b.n	80004f0 <gpio_clk_control+0x19c>
		if (pGPIOx == GPIOA)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a33      	ldr	r2, [pc, #204]	; (80004fc <gpio_clk_control+0x1a8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <gpio_clk_control+0xee>
			GPIOA_CLK_DI();
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <gpio_clk_control+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <gpio_clk_control+0x1ac>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e056      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOB)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <gpio_clk_control+0x1b0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <gpio_clk_control+0x104>
			GPIOB_CLK_DI();
 800044a:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <gpio_clk_control+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <gpio_clk_control+0x1ac>)
 8000450:	f023 0302 	bic.w	r3, r3, #2
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e04b      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if (pGPIOx == GPIOC)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <gpio_clk_control+0x1b4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <gpio_clk_control+0x11a>
			GPIOC_CLK_DI();
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <gpio_clk_control+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a26      	ldr	r2, [pc, #152]	; (8000500 <gpio_clk_control+0x1ac>)
 8000466:	f023 0304 	bic.w	r3, r3, #4
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e040      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOD)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a26      	ldr	r2, [pc, #152]	; (800050c <gpio_clk_control+0x1b8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <gpio_clk_control+0x130>
			GPIOD_CLK_DI();
 8000476:	4b22      	ldr	r3, [pc, #136]	; (8000500 <gpio_clk_control+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a21      	ldr	r2, [pc, #132]	; (8000500 <gpio_clk_control+0x1ac>)
 800047c:	f023 0308 	bic.w	r3, r3, #8
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e035      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOE)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a22      	ldr	r2, [pc, #136]	; (8000510 <gpio_clk_control+0x1bc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <gpio_clk_control+0x146>
			GPIOE_CLK_DI();
 800048c:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <gpio_clk_control+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <gpio_clk_control+0x1ac>)
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e02a      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOF)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <gpio_clk_control+0x1c0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <gpio_clk_control+0x15c>
			GPIOF_CLK_DI();
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <gpio_clk_control+0x1ac>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <gpio_clk_control+0x1ac>)
 80004a8:	f023 0320 	bic.w	r3, r3, #32
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e01f      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOG)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a19      	ldr	r2, [pc, #100]	; (8000518 <gpio_clk_control+0x1c4>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <gpio_clk_control+0x172>
			GPIOG_CLK_DI();
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <gpio_clk_control+0x1ac>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a10      	ldr	r2, [pc, #64]	; (8000500 <gpio_clk_control+0x1ac>)
 80004be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e014      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOH)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <gpio_clk_control+0x1c8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <gpio_clk_control+0x188>
			GPIOH_CLK_DI();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <gpio_clk_control+0x1ac>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <gpio_clk_control+0x1ac>)
 80004d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e009      	b.n	80004f0 <gpio_clk_control+0x19c>
		else if(pGPIOx == GPIOI)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <gpio_clk_control+0x1cc>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <gpio_clk_control+0x19c>
			GPIOI_CLK_DI();
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <gpio_clk_control+0x1ac>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <gpio_clk_control+0x1ac>)
 80004ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020000 	.word	0x40020000
 8000500:	40023800 	.word	0x40023800
 8000504:	40020400 	.word	0x40020400
 8000508:	40020800 	.word	0x40020800
 800050c:	40020c00 	.word	0x40020c00
 8000510:	40021000 	.word	0x40021000
 8000514:	40021400 	.word	0x40021400
 8000518:	40021800 	.word	0x40021800
 800051c:	40021c00 	.word	0x40021c00
 8000520:	40022000 	.word	0x40022000

08000524 <gpio_init>:

/******************************************************
				2.GPIO initializations
*******************************************************/
void gpio_init(GPIO_Handle_t *pGPIOHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	gpio_clk_control(pGPIOHandle->pGPIOx, ENABLE);/*Initializes the clock control*/
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff0e 	bl	8000354 <gpio_clk_control>
	uint32_t temp=0;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]

	/* 1.Configure GPIO pin mode - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted with multiplication  of 2 relative to pin #. */

	//1.1.Non interrupt mode
	if (pGPIOHandle->GPIO_PinCfng.PinMode <= GPIO_MODE_ANALOG)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d821      	bhi.n	8000588 <gpio_init+0x64>
	{

		temp = (pGPIOHandle->GPIO_PinCfng.PinMode << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	2303      	movs	r3, #3
 8000564:	408b      	lsls	r3, r1
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;// Write to the 2 bits
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	69ba      	ldr	r2, [r7, #24]
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
		temp= 0;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
 8000586:	e0e9      	b.n	800075c <gpio_init+0x238>

	//1.2.Interrupt mode
	else
	{
		// Enable the Interrupt mask register
		EXTI->IMR |=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000588:	4b4f      	ldr	r3, [pc, #316]	; (80006c8 <gpio_init+0x1a4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7912      	ldrb	r2, [r2, #4]
 8000590:	4611      	mov	r1, r2
 8000592:	2201      	movs	r2, #1
 8000594:	408a      	lsls	r2, r1
 8000596:	4611      	mov	r1, r2
 8000598:	4a4b      	ldr	r2, [pc, #300]	; (80006c8 <gpio_init+0x1a4>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6013      	str	r3, [r2, #0]

		if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_FT)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d117      	bne.n	80005d6 <gpio_init+0xb2>
		{	// Enable only the rising trigger selection register
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <gpio_init+0x1a4>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	43d2      	mvns	r2, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a43      	ldr	r2, [pc, #268]	; (80006c8 <gpio_init+0x1a4>)
 80005ba:	400b      	ands	r3, r1
 80005bc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005be:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <gpio_init+0x1a4>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a3e      	ldr	r2, [pc, #248]	; (80006c8 <gpio_init+0x1a4>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	60d3      	str	r3, [r2, #12]
 80005d4:	e035      	b.n	8000642 <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RT)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	795b      	ldrb	r3, [r3, #5]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d117      	bne.n	800060e <gpio_init+0xea>
		{
			//Enable only falling trigger selection register
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <gpio_init+0x1a4>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a35      	ldr	r2, [pc, #212]	; (80006c8 <gpio_init+0x1a4>)
 80005f2:	400b      	ands	r3, r1
 80005f4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <gpio_init+0x1a4>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a30      	ldr	r2, [pc, #192]	; (80006c8 <gpio_init+0x1a4>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6093      	str	r3, [r2, #8]
 800060c:	e019      	b.n	8000642 <gpio_init+0x11e>
		}
		else if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_IRQ_RFT)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	2b06      	cmp	r3, #6
 8000614:	d115      	bne.n	8000642 <gpio_init+0x11e>
		{
			//Enable both falling and rising trigger selection register
			EXTI->RTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <gpio_init+0x1a4>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	4611      	mov	r1, r2
 8000620:	2201      	movs	r2, #1
 8000622:	408a      	lsls	r2, r1
 8000624:	4611      	mov	r1, r2
 8000626:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <gpio_init+0x1a4>)
 8000628:	430b      	orrs	r3, r1
 800062a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=   (1 << pGPIOHandle->GPIO_PinCfng.PinNumber);
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <gpio_init+0x1a4>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <gpio_init+0x1a4>)
 800063e:	430b      	orrs	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
		}
		//Select the SYSCFG register

		uint32_t value = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
		if (pGPIOHandle->pGPIOx == GPIOA)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <gpio_init+0x1a8>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d102      	bne.n	8000656 <gpio_init+0x132>
			value = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
 8000654:	e051      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOB)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <gpio_init+0x1ac>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d102      	bne.n	8000666 <gpio_init+0x142>
			value = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e049      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOC)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <gpio_init+0x1b0>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d102      	bne.n	8000676 <gpio_init+0x152>
			value = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	e041      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOD)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <gpio_init+0x1b4>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d102      	bne.n	8000686 <gpio_init+0x162>
			value = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	e039      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOE)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <gpio_init+0x1b8>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d102      	bne.n	8000696 <gpio_init+0x172>
			value = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	e031      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOF)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <gpio_init+0x1bc>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d102      	bne.n	80006a6 <gpio_init+0x182>
			value = 5;
 80006a0:	2305      	movs	r3, #5
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	e029      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOG)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <gpio_init+0x1c0>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d102      	bne.n	80006b6 <gpio_init+0x192>
			value = 6;
 80006b0:	2306      	movs	r3, #6
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	e021      	b.n	80006fa <gpio_init+0x1d6>
		else if (pGPIOHandle->pGPIOx == GPIOH)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <gpio_init+0x1c4>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d115      	bne.n	80006ec <gpio_init+0x1c8>
			value = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	e019      	b.n	80006fa <gpio_init+0x1d6>
 80006c6:	bf00      	nop
 80006c8:	40013c00 	.word	0x40013c00
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40021400 	.word	0x40021400
 80006e4:	40021800 	.word	0x40021800
 80006e8:	40021c00 	.word	0x40021c00
		else if (pGPIOHandle->pGPIOx == GPIOI)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a6b      	ldr	r2, [pc, #428]	; (80008a0 <gpio_init+0x37c>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <gpio_init+0x1d6>
			value = 8;
 80006f6:	2308      	movs	r3, #8
 80006f8:	61fb      	str	r3, [r7, #28]

		SYSCFG_CLK_EN();
 80006fa:	4b6a      	ldr	r3, [pc, #424]	; (80008a4 <gpio_init+0x380>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a69      	ldr	r2, [pc, #420]	; (80008a4 <gpio_init+0x380>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t exticr_reg = pGPIOHandle->GPIO_PinCfng.PinNumber/4;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	617b      	str	r3, [r7, #20]
		uint32_t exticr_position = pGPIOHandle->GPIO_PinCfng.PinNumber%4;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	f003 0303 	and.w	r3, r3, #3
 8000718:	613b      	str	r3, [r7, #16]
		SYSCFG->EXTICR[exticr_reg ] &= ~(value<<4*exticr_position);
 800071a:	4a63      	ldr	r2, [pc, #396]	; (80008a8 <gpio_init+0x384>)
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3302      	adds	r3, #2
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	69f9      	ldr	r1, [r7, #28]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	495d      	ldr	r1, [pc, #372]	; (80008a8 <gpio_init+0x384>)
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	3302      	adds	r3, #2
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[exticr_reg ] |= value<<4*exticr_position;
 800073c:	4a5a      	ldr	r2, [pc, #360]	; (80008a8 <gpio_init+0x384>)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3302      	adds	r3, #2
 8000742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	69f9      	ldr	r1, [r7, #28]
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	4955      	ldr	r1, [pc, #340]	; (80008a8 <gpio_init+0x384>)
 8000752:	431a      	orrs	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3302      	adds	r3, #2
 8000758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	/*2. Configure GPIO pin speed - each pin has 2 dedicated bits in the GPIO mode register
	hence the value is shifted as multiplication  of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinSpeed << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	461a      	mov	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2103      	movs	r1, #3
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	400a      	ands	r2, r1
 800078a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;// Write to the 2 bits
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6899      	ldr	r1, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	430a      	orrs	r2, r1
 800079a:	609a      	str	r2, [r3, #8]
	temp= 0;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]

	/*3. Configure GPIO pin pull up\pull down register - each pin has 2 dedicated bits
	in the GPIO mode register hence the value is shifted with as multiplication of 2 relative to pin # */
	temp = (pGPIOHandle->GPIO_PinCfng.PinPuPdCtrl << (2* pGPIOHandle->GPIO_PinCfng.PinNumber));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	79db      	ldrb	r3, [r3, #7]
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << ( 2* pGPIOHandle->GPIO_PinCfng.PinNumber)); //Clear the 2 bits
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2103      	movs	r1, #3
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	400a      	ands	r2, r1
 80007ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;// Write to the 2 bits
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68d9      	ldr	r1, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	430a      	orrs	r2, r1
 80007de:	60da      	str	r2, [r3, #12]
	temp= 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

	/*4. Configure GPIO pin output type register - each pin has 1 dedicated bits
	 in the GPIO output type register hence the value is shifted relative to pin #. */
	temp = (pGPIOHandle->GPIO_PinCfng.PinOType << (pGPIOHandle->GPIO_PinCfng.PinNumber));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7a1b      	ldrb	r3, [r3, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinCfng.PinNumber); //Clear the 2 bits
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	4619      	mov	r1, r3
 8000800:	2301      	movs	r3, #1
 8000802:	408b      	lsls	r3, r1
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;// Write to the bit
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6859      	ldr	r1, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	430a      	orrs	r2, r1
 800081e:	605a      	str	r2, [r3, #4]
	temp= 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]

	/*5. Configure GPIO pin alternate functionality register - each pin has 4 dedicated bits
	 in it hence the value is shifted as multiplication of 4 relative to pin #. */
	if (pGPIOHandle->GPIO_PinCfng.PinMode == GPIO_MODE_ALTFN)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d135      	bne.n	8000898 <gpio_init+0x374>
	{
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinCfng.PinNumber / 8  ;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinCfng.PinNumber % 8 ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	3208      	adds	r2, #8
 8000846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	220f      	movs	r2, #15
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	4001      	ands	r1, r0
 8000860:	3208      	adds	r2, #8
 8000862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinCfng.PinAltFunc << (4 * temp2)); //write to the 4 bits
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7a5b      	ldrb	r3, [r3, #9]
 8000876:	461a      	mov	r2, r3
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	4618      	mov	r0, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	4301      	orrs	r1, r0
 800088a:	3208      	adds	r2, #8
 800088c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = temp2 = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73bb      	strb	r3, [r7, #14]
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	73fb      	strb	r3, [r7, #15]
	}


}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40022000 	.word	0x40022000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40013800 	.word	0x40013800

080008ac <gpio_configure_pin>:
	{
		GPIOI_RST();
	}
}
void gpio_configure_pin(GPIO_Handle_t *gpio_x_pin, GPIO_RegDef_t* gpio, int pin_number, int output_mode, int pin_speed, int pin_out_mode,int internal_resistor, int alternate_function)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
	gpio_x_pin->pGPIOx = gpio;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	601a      	str	r2, [r3, #0]
	gpio_x_pin->GPIO_PinCfng.PinNumber = pin_number;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	711a      	strb	r2, [r3, #4]
	gpio_x_pin->GPIO_PinCfng.PinMode = output_mode;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	715a      	strb	r2, [r3, #5]
	gpio_x_pin->GPIO_PinCfng.PinSpeed = pin_speed;
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	719a      	strb	r2, [r3, #6]
	gpio_x_pin->GPIO_PinCfng.PinOType = pin_out_mode;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	721a      	strb	r2, [r3, #8]
	gpio_x_pin->GPIO_PinCfng.PinPuPdCtrl = internal_resistor;
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	71da      	strb	r2, [r3, #7]
	gpio_x_pin->GPIO_PinCfng.PinAltFunc = alternate_function;
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	725a      	strb	r2, [r3, #9]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <gpio_toggle_pin>:
void gpio_write_to_port(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = value;
}
void gpio_toggle_pin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin_number); //changing previous pin state
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	78fa      	ldrb	r2, [r7, #3]
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f202 	lsl.w	r2, r1, r2
 8000914:	405a      	eors	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	615a      	str	r2, [r3, #20]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <gpio_irq_handler>:
	uint8_t shift_amount = (8 * iprx_section) + (8 - PRIORITY_NOT_IMPLEMENTED_BITS);
	*(NVIC_IPR_BASE + iprx) |= (IRQPriority << iprx_section) << (shift_amount);

}
void gpio_irq_handler(uint8_t PinNumber)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	//Clear the pending register pin
	if(EXTI->PR & (1 << PinNumber))
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <gpio_irq_handler+0x3c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d009      	beq.n	8000958 <gpio_irq_handler+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <gpio_irq_handler+0x3c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <gpio_irq_handler+0x3c>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6153      	str	r3, [r2, #20]
	}
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40013c00 	.word	0x40013c00

08000968 <spi_send>:
}
/******************************************************
				3.3.SPI send/receive functions
*******************************************************/
void spi_send(SPI_RegDef_t* p_spi_x,uint8_t *pTxbuffer, uint32_t len)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000974:	e022      	b.n	80009bc <spi_send+0x54>
	{
		if (((p_spi_x->SPI_SR)&(1<<SR_BIT1_TXE)) != 0)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d01c      	beq.n	80009bc <spi_send+0x54>
		/*If TX buffer is empty*/
		{
			if (((p_spi_x->SPI_CR1)&(1<<CR1_BIT11_DFF)) == SPI_DFF_8_BIT)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10b      	bne.n	80009a6 <spi_send+0x3e>
			/*If Frame format is 8 bit*/
			{
				p_spi_x->SPI_DR = *pTxbuffer;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	60da      	str	r2, [r3, #12]
				pTxbuffer++;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	3301      	adds	r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
				len--;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	e00a      	b.n	80009bc <spi_send+0x54>
			}
			else
			/*If Frame format is 16 bit*/
			{
				p_spi_x->SPI_DR = *((uint16_t*)pTxbuffer);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	60da      	str	r2, [r3, #12]
				len = len-2;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b02      	subs	r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxbuffer++;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1d9      	bne.n	8000976 <spi_send+0xe>
				pTxbuffer++;
				*/
			}
		}
	}
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	4e0d      	ldr	r6, [pc, #52]	; (8000a08 <__libc_init_array+0x38>)
 80009d4:	4c0d      	ldr	r4, [pc, #52]	; (8000a0c <__libc_init_array+0x3c>)
 80009d6:	1ba4      	subs	r4, r4, r6
 80009d8:	10a4      	asrs	r4, r4, #2
 80009da:	2500      	movs	r5, #0
 80009dc:	42a5      	cmp	r5, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	4e0b      	ldr	r6, [pc, #44]	; (8000a10 <__libc_init_array+0x40>)
 80009e2:	4c0c      	ldr	r4, [pc, #48]	; (8000a14 <__libc_init_array+0x44>)
 80009e4:	f000 f818 	bl	8000a18 <_init>
 80009e8:	1ba4      	subs	r4, r4, r6
 80009ea:	10a4      	asrs	r4, r4, #2
 80009ec:	2500      	movs	r5, #0
 80009ee:	42a5      	cmp	r5, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009f8:	4798      	blx	r3
 80009fa:	3501      	adds	r5, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a02:	4798      	blx	r3
 8000a04:	3501      	adds	r5, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000a38 	.word	0x08000a38
 8000a0c:	08000a38 	.word	0x08000a38
 8000a10:	08000a38 	.word	0x08000a38
 8000a14:	08000a3c 	.word	0x08000a3c

08000a18 <_init>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr

08000a24 <_fini>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr
